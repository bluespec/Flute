//
// Generated by Bluespec Compiler, version 2021.07-22-g61dc0ebb (build 61dc0ebb)
//
//
// Ports:
// Name                         I/O  size props
// tck                            O     1
// tdi                            O     1
// tms                            O     1
// RST_N_reset                    O     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// tdo_x                          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkJtag(CLK,
	      RST_N,

	      tck,

	      tdi,

	      tdo_x,

	      tms,

	      RST_N_reset);
  input  CLK;
  input  RST_N;

  // value method tck
  output tck;

  // value method tdi
  output tdi;

  // action method tdo
  input  tdo_x;

  // value method tms
  output tms;

  // output resets
  output RST_N_reset;

  // signals for module outputs
  wire RST_N_reset, tck, tdi, tms;

  // ports of submodule j
  wire j$reset, j$tck, j$tdi, j$tdo, j$tms;

  // ports of submodule jtagReset
  wire jtagReset$IN, jtagReset$OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_setJtagReset,
       CAN_FIRE_tdo,
       WILL_FIRE_RL_setJtagReset,
       WILL_FIRE_tdo;

  // output resets
  assign RST_N_reset = jtagReset$OUT ;

  // value method tck
  assign tck = j$tck ;

  // value method tdi
  assign tdi = j$tdi ;

  // action method tdo
  assign CAN_FIRE_tdo = 1'd1 ;
  assign WILL_FIRE_tdo = 1'd1 ;

  // value method tms
  assign tms = j$tms ;

  // submodule j
  xilinx_jtag j(.clk(CLK),
		.rst_n(RST_N),
		.tdo(j$tdo),
		.reset(j$reset),
		.sel1(),
		.sel2(),
		.tck(j$tck),
		.tdi(j$tdi),
		.tms(j$tms));

  // submodule jtagReset
  ASSIGN1 jtagReset(.IN(jtagReset$IN), .OUT(jtagReset$OUT));

  // rule RL_setJtagReset
  assign CAN_FIRE_RL_setJtagReset = 1'd1 ;
  assign WILL_FIRE_RL_setJtagReset = 1'd1 ;

  // submodule j
  assign j$tdo = tdo_x ;

  // submodule jtagReset
  assign jtagReset$IN = j$reset ;
endmodule  // mkJtag

