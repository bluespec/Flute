//
// Generated by Bluespec Compiler, version 2021.07-10-gb37e90ec (build b37e90ec)
//
//
// Ports:
// Name                         I/O  size props
// nmio_master_awvalid            O     1 reg
// nmio_master_awid               O     4 reg
// nmio_master_awaddr             O    32 reg
// nmio_master_awlen              O     8 reg
// nmio_master_awsize             O     3 reg
// nmio_master_awburst            O     2 reg
// nmio_master_awlock             O     1 reg
// nmio_master_awcache            O     4 reg
// nmio_master_awprot             O     3 reg
// nmio_master_awqos              O     4 reg
// nmio_master_awregion           O     4 reg
// nmio_master_wvalid             O     1 reg
// nmio_master_wdata              O    32 reg
// nmio_master_wstrb              O     4 reg
// nmio_master_wlast              O     1 reg
// nmio_master_bready             O     1 reg
// nmio_master_arvalid            O     1 reg
// nmio_master_arid               O     4 reg
// nmio_master_araddr             O    32 reg
// nmio_master_arlen              O     8 reg
// nmio_master_arsize             O     3 reg
// nmio_master_arburst            O     2 reg
// nmio_master_arlock             O     1 reg
// nmio_master_arcache            O     4 reg
// nmio_master_arprot             O     3 reg
// nmio_master_arqos              O     4 reg
// nmio_master_arregion           O     4 reg
// nmio_master_rready             O     1 reg
// dmem_master_HADDR              O    32 reg
// dmem_master_HBURST             O     3 const
// dmem_master_HMASTLOCK          O     1 const
// dmem_master_HPROT              O     4 const
// dmem_master_HSIZE              O     3 reg
// dmem_master_HTRANS             O     2 reg
// dmem_master_HWDATA             O    32 reg
// dmem_master_HWRITE             O     1 reg
// imem_dma_server_awready        O     1 reg
// imem_dma_server_wready         O     1 reg
// imem_dma_server_bvalid         O     1 reg
// imem_dma_server_bid            O     4 reg
// imem_dma_server_bresp          O     2 reg
// imem_dma_server_arready        O     1 reg
// imem_dma_server_rvalid         O     1 reg
// imem_dma_server_rid            O     4 reg
// imem_dma_server_rdata          O    32 reg
// imem_dma_server_rresp          O     2 reg
// imem_dma_server_rlast          O     1 reg
// dmem_dma_server_awready        O     1 reg
// dmem_dma_server_wready         O     1 reg
// dmem_dma_server_bvalid         O     1 reg
// dmem_dma_server_bid            O     4 reg
// dmem_dma_server_bresp          O     2 reg
// dmem_dma_server_arready        O     1 reg
// dmem_dma_server_rvalid         O     1 reg
// dmem_dma_server_rid            O     4 reg
// dmem_dma_server_rdata          O    32 reg
// dmem_dma_server_rresp          O     2 reg
// dmem_dma_server_rlast          O     1 reg
// RDY_debug_hart_reset_server_request_put  O     1 reg
// debug_hart_reset_server_response_get  O     1 reg
// RDY_debug_hart_reset_server_response_get  O     1 reg
// RDY_debug_hart_server_run_halt_request_put  O     1 reg
// debug_hart_server_run_halt_response_get  O     1 reg
// RDY_debug_hart_server_run_halt_response_get  O     1 reg
// RDY_debug_hart_put_other_req_put  O     1 const
// RDY_debug_hart_gpr_mem_server_request_put  O     1 reg
// debug_hart_gpr_mem_server_response_get  O    33 reg
// RDY_debug_hart_gpr_mem_server_response_get  O     1 reg
// RDY_debug_hart_csr_mem_server_request_put  O     1 reg
// debug_hart_csr_mem_server_response_get  O    33 reg
// RDY_debug_hart_csr_mem_server_response_get  O     1 reg
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64
// RDY_mv_tohost_value            O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// nmio_master_awready            I     1
// nmio_master_wready             I     1
// nmio_master_bvalid             I     1
// nmio_master_bid                I     4 reg
// nmio_master_bresp              I     2 reg
// nmio_master_arready            I     1
// nmio_master_rvalid             I     1
// nmio_master_rid                I     4 reg
// nmio_master_rdata              I    32 reg
// nmio_master_rresp              I     2 reg
// nmio_master_rlast              I     1 reg
// dmem_master_HRDATA             I    32
// dmem_master_HREADY             I     1
// dmem_master_HRESP              I     1
// imem_dma_server_awvalid        I     1
// imem_dma_server_awid           I     4 reg
// imem_dma_server_awaddr         I    32 reg
// imem_dma_server_awlen          I     8 reg
// imem_dma_server_awsize         I     3 reg
// imem_dma_server_awburst        I     2 reg
// imem_dma_server_awlock         I     1 reg
// imem_dma_server_awcache        I     4 reg
// imem_dma_server_awprot         I     3 reg
// imem_dma_server_awqos          I     4 reg
// imem_dma_server_awregion       I     4 reg
// imem_dma_server_wvalid         I     1
// imem_dma_server_wdata          I    32 reg
// imem_dma_server_wstrb          I     4 reg
// imem_dma_server_wlast          I     1 reg
// imem_dma_server_bready         I     1
// imem_dma_server_arvalid        I     1
// imem_dma_server_arid           I     4 reg
// imem_dma_server_araddr         I    32 reg
// imem_dma_server_arlen          I     8 reg
// imem_dma_server_arsize         I     3 reg
// imem_dma_server_arburst        I     2 reg
// imem_dma_server_arlock         I     1 reg
// imem_dma_server_arcache        I     4 reg
// imem_dma_server_arprot         I     3 reg
// imem_dma_server_arqos          I     4 reg
// imem_dma_server_arregion       I     4 reg
// imem_dma_server_rready         I     1
// dmem_dma_server_awvalid        I     1
// dmem_dma_server_awid           I     4 reg
// dmem_dma_server_awaddr         I    32 reg
// dmem_dma_server_awlen          I     8 reg
// dmem_dma_server_awsize         I     3 reg
// dmem_dma_server_awburst        I     2 reg
// dmem_dma_server_awlock         I     1 reg
// dmem_dma_server_awcache        I     4 reg
// dmem_dma_server_awprot         I     3 reg
// dmem_dma_server_awqos          I     4 reg
// dmem_dma_server_awregion       I     4 reg
// dmem_dma_server_wvalid         I     1
// dmem_dma_server_wdata          I    32 reg
// dmem_dma_server_wstrb          I     4 reg
// dmem_dma_server_wlast          I     1 reg
// dmem_dma_server_bready         I     1
// dmem_dma_server_arvalid        I     1
// dmem_dma_server_arid           I     4 reg
// dmem_dma_server_araddr         I    32 reg
// dmem_dma_server_arlen          I     8 reg
// dmem_dma_server_arsize         I     3 reg
// dmem_dma_server_arburst        I     2 reg
// dmem_dma_server_arlock         I     1 reg
// dmem_dma_server_arcache        I     4 reg
// dmem_dma_server_arprot         I     3 reg
// dmem_dma_server_arqos          I     4 reg
// dmem_dma_server_arregion       I     4 reg
// dmem_dma_server_rready         I     1
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// debug_hart_reset_server_request_put  I     1 reg
// debug_hart_server_run_halt_request_put  I     1 reg
// debug_hart_put_other_req_put   I     4
// debug_hart_gpr_mem_server_request_put  I    38 reg
// debug_hart_csr_mem_server_request_put  I    45 reg
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_debug_hart_reset_server_request_put  I     1
// EN_debug_hart_server_run_halt_request_put  I     1
// EN_debug_hart_put_other_req_put  I     1
// EN_debug_hart_gpr_mem_server_request_put  I     1
// EN_debug_hart_csr_mem_server_request_put  I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_debug_hart_reset_server_response_get  I     1
// EN_debug_hart_server_run_halt_response_get  I     1
// EN_debug_hart_gpr_mem_server_response_get  I     1
// EN_debug_hart_csr_mem_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     nmio_master_awvalid,

	     nmio_master_awid,

	     nmio_master_awaddr,

	     nmio_master_awlen,

	     nmio_master_awsize,

	     nmio_master_awburst,

	     nmio_master_awlock,

	     nmio_master_awcache,

	     nmio_master_awprot,

	     nmio_master_awqos,

	     nmio_master_awregion,

	     nmio_master_awready,

	     nmio_master_wvalid,

	     nmio_master_wdata,

	     nmio_master_wstrb,

	     nmio_master_wlast,

	     nmio_master_wready,

	     nmio_master_bvalid,
	     nmio_master_bid,
	     nmio_master_bresp,

	     nmio_master_bready,

	     nmio_master_arvalid,

	     nmio_master_arid,

	     nmio_master_araddr,

	     nmio_master_arlen,

	     nmio_master_arsize,

	     nmio_master_arburst,

	     nmio_master_arlock,

	     nmio_master_arcache,

	     nmio_master_arprot,

	     nmio_master_arqos,

	     nmio_master_arregion,

	     nmio_master_arready,

	     nmio_master_rvalid,
	     nmio_master_rid,
	     nmio_master_rdata,
	     nmio_master_rresp,
	     nmio_master_rlast,

	     nmio_master_rready,

	     dmem_master_HADDR,

	     dmem_master_HBURST,

	     dmem_master_HMASTLOCK,

	     dmem_master_HPROT,

	     dmem_master_HSIZE,

	     dmem_master_HTRANS,

	     dmem_master_HWDATA,

	     dmem_master_HWRITE,

	     dmem_master_HRDATA,

	     dmem_master_HREADY,

	     dmem_master_HRESP,

	     imem_dma_server_awvalid,
	     imem_dma_server_awid,
	     imem_dma_server_awaddr,
	     imem_dma_server_awlen,
	     imem_dma_server_awsize,
	     imem_dma_server_awburst,
	     imem_dma_server_awlock,
	     imem_dma_server_awcache,
	     imem_dma_server_awprot,
	     imem_dma_server_awqos,
	     imem_dma_server_awregion,

	     imem_dma_server_awready,

	     imem_dma_server_wvalid,
	     imem_dma_server_wdata,
	     imem_dma_server_wstrb,
	     imem_dma_server_wlast,

	     imem_dma_server_wready,

	     imem_dma_server_bvalid,

	     imem_dma_server_bid,

	     imem_dma_server_bresp,

	     imem_dma_server_bready,

	     imem_dma_server_arvalid,
	     imem_dma_server_arid,
	     imem_dma_server_araddr,
	     imem_dma_server_arlen,
	     imem_dma_server_arsize,
	     imem_dma_server_arburst,
	     imem_dma_server_arlock,
	     imem_dma_server_arcache,
	     imem_dma_server_arprot,
	     imem_dma_server_arqos,
	     imem_dma_server_arregion,

	     imem_dma_server_arready,

	     imem_dma_server_rvalid,

	     imem_dma_server_rid,

	     imem_dma_server_rdata,

	     imem_dma_server_rresp,

	     imem_dma_server_rlast,

	     imem_dma_server_rready,

	     dmem_dma_server_awvalid,
	     dmem_dma_server_awid,
	     dmem_dma_server_awaddr,
	     dmem_dma_server_awlen,
	     dmem_dma_server_awsize,
	     dmem_dma_server_awburst,
	     dmem_dma_server_awlock,
	     dmem_dma_server_awcache,
	     dmem_dma_server_awprot,
	     dmem_dma_server_awqos,
	     dmem_dma_server_awregion,

	     dmem_dma_server_awready,

	     dmem_dma_server_wvalid,
	     dmem_dma_server_wdata,
	     dmem_dma_server_wstrb,
	     dmem_dma_server_wlast,

	     dmem_dma_server_wready,

	     dmem_dma_server_bvalid,

	     dmem_dma_server_bid,

	     dmem_dma_server_bresp,

	     dmem_dma_server_bready,

	     dmem_dma_server_arvalid,
	     dmem_dma_server_arid,
	     dmem_dma_server_araddr,
	     dmem_dma_server_arlen,
	     dmem_dma_server_arsize,
	     dmem_dma_server_arburst,
	     dmem_dma_server_arlock,
	     dmem_dma_server_arcache,
	     dmem_dma_server_arprot,
	     dmem_dma_server_arqos,
	     dmem_dma_server_arregion,

	     dmem_dma_server_arready,

	     dmem_dma_server_rvalid,

	     dmem_dma_server_rid,

	     dmem_dma_server_rdata,

	     dmem_dma_server_rresp,

	     dmem_dma_server_rlast,

	     dmem_dma_server_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     debug_hart_reset_server_request_put,
	     EN_debug_hart_reset_server_request_put,
	     RDY_debug_hart_reset_server_request_put,

	     EN_debug_hart_reset_server_response_get,
	     debug_hart_reset_server_response_get,
	     RDY_debug_hart_reset_server_response_get,

	     debug_hart_server_run_halt_request_put,
	     EN_debug_hart_server_run_halt_request_put,
	     RDY_debug_hart_server_run_halt_request_put,

	     EN_debug_hart_server_run_halt_response_get,
	     debug_hart_server_run_halt_response_get,
	     RDY_debug_hart_server_run_halt_response_get,

	     debug_hart_put_other_req_put,
	     EN_debug_hart_put_other_req_put,
	     RDY_debug_hart_put_other_req_put,

	     debug_hart_gpr_mem_server_request_put,
	     EN_debug_hart_gpr_mem_server_request_put,
	     RDY_debug_hart_gpr_mem_server_request_put,

	     EN_debug_hart_gpr_mem_server_response_get,
	     debug_hart_gpr_mem_server_response_get,
	     RDY_debug_hart_gpr_mem_server_response_get,

	     debug_hart_csr_mem_server_request_put,
	     EN_debug_hart_csr_mem_server_request_put,
	     RDY_debug_hart_csr_mem_server_request_put,

	     EN_debug_hart_csr_mem_server_response_get,
	     debug_hart_csr_mem_server_response_get,
	     RDY_debug_hart_csr_mem_server_response_get,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     set_watch_tohost_watch_tohost,
	     set_watch_tohost_tohost_addr,
	     EN_set_watch_tohost,
	     RDY_set_watch_tohost,

	     mv_tohost_value,
	     RDY_mv_tohost_value);
  input  CLK;
  input  RST_N;

  // value method nmio_master_m_awvalid
  output nmio_master_awvalid;

  // value method nmio_master_m_awid
  output [3 : 0] nmio_master_awid;

  // value method nmio_master_m_awaddr
  output [31 : 0] nmio_master_awaddr;

  // value method nmio_master_m_awlen
  output [7 : 0] nmio_master_awlen;

  // value method nmio_master_m_awsize
  output [2 : 0] nmio_master_awsize;

  // value method nmio_master_m_awburst
  output [1 : 0] nmio_master_awburst;

  // value method nmio_master_m_awlock
  output nmio_master_awlock;

  // value method nmio_master_m_awcache
  output [3 : 0] nmio_master_awcache;

  // value method nmio_master_m_awprot
  output [2 : 0] nmio_master_awprot;

  // value method nmio_master_m_awqos
  output [3 : 0] nmio_master_awqos;

  // value method nmio_master_m_awregion
  output [3 : 0] nmio_master_awregion;

  // value method nmio_master_m_awuser

  // action method nmio_master_m_awready
  input  nmio_master_awready;

  // value method nmio_master_m_wvalid
  output nmio_master_wvalid;

  // value method nmio_master_m_wdata
  output [31 : 0] nmio_master_wdata;

  // value method nmio_master_m_wstrb
  output [3 : 0] nmio_master_wstrb;

  // value method nmio_master_m_wlast
  output nmio_master_wlast;

  // value method nmio_master_m_wuser

  // action method nmio_master_m_wready
  input  nmio_master_wready;

  // action method nmio_master_m_bvalid
  input  nmio_master_bvalid;
  input  [3 : 0] nmio_master_bid;
  input  [1 : 0] nmio_master_bresp;

  // value method nmio_master_m_bready
  output nmio_master_bready;

  // value method nmio_master_m_arvalid
  output nmio_master_arvalid;

  // value method nmio_master_m_arid
  output [3 : 0] nmio_master_arid;

  // value method nmio_master_m_araddr
  output [31 : 0] nmio_master_araddr;

  // value method nmio_master_m_arlen
  output [7 : 0] nmio_master_arlen;

  // value method nmio_master_m_arsize
  output [2 : 0] nmio_master_arsize;

  // value method nmio_master_m_arburst
  output [1 : 0] nmio_master_arburst;

  // value method nmio_master_m_arlock
  output nmio_master_arlock;

  // value method nmio_master_m_arcache
  output [3 : 0] nmio_master_arcache;

  // value method nmio_master_m_arprot
  output [2 : 0] nmio_master_arprot;

  // value method nmio_master_m_arqos
  output [3 : 0] nmio_master_arqos;

  // value method nmio_master_m_arregion
  output [3 : 0] nmio_master_arregion;

  // value method nmio_master_m_aruser

  // action method nmio_master_m_arready
  input  nmio_master_arready;

  // action method nmio_master_m_rvalid
  input  nmio_master_rvalid;
  input  [3 : 0] nmio_master_rid;
  input  [31 : 0] nmio_master_rdata;
  input  [1 : 0] nmio_master_rresp;
  input  nmio_master_rlast;

  // value method nmio_master_m_rready
  output nmio_master_rready;

  // value method dmem_master_haddr
  output [31 : 0] dmem_master_HADDR;

  // value method dmem_master_hburst
  output [2 : 0] dmem_master_HBURST;

  // value method dmem_master_hmastlock
  output dmem_master_HMASTLOCK;

  // value method dmem_master_hprot
  output [3 : 0] dmem_master_HPROT;

  // value method dmem_master_hsize
  output [2 : 0] dmem_master_HSIZE;

  // value method dmem_master_htrans
  output [1 : 0] dmem_master_HTRANS;

  // value method dmem_master_hwdata
  output [31 : 0] dmem_master_HWDATA;

  // value method dmem_master_hwrite
  output dmem_master_HWRITE;

  // action method dmem_master_hrdata
  input  [31 : 0] dmem_master_HRDATA;

  // action method dmem_master_hready
  input  dmem_master_HREADY;

  // action method dmem_master_hresp
  input  dmem_master_HRESP;

  // action method imem_dma_server_m_awvalid
  input  imem_dma_server_awvalid;
  input  [3 : 0] imem_dma_server_awid;
  input  [31 : 0] imem_dma_server_awaddr;
  input  [7 : 0] imem_dma_server_awlen;
  input  [2 : 0] imem_dma_server_awsize;
  input  [1 : 0] imem_dma_server_awburst;
  input  imem_dma_server_awlock;
  input  [3 : 0] imem_dma_server_awcache;
  input  [2 : 0] imem_dma_server_awprot;
  input  [3 : 0] imem_dma_server_awqos;
  input  [3 : 0] imem_dma_server_awregion;

  // value method imem_dma_server_m_awready
  output imem_dma_server_awready;

  // action method imem_dma_server_m_wvalid
  input  imem_dma_server_wvalid;
  input  [31 : 0] imem_dma_server_wdata;
  input  [3 : 0] imem_dma_server_wstrb;
  input  imem_dma_server_wlast;

  // value method imem_dma_server_m_wready
  output imem_dma_server_wready;

  // value method imem_dma_server_m_bvalid
  output imem_dma_server_bvalid;

  // value method imem_dma_server_m_bid
  output [3 : 0] imem_dma_server_bid;

  // value method imem_dma_server_m_bresp
  output [1 : 0] imem_dma_server_bresp;

  // value method imem_dma_server_m_buser

  // action method imem_dma_server_m_bready
  input  imem_dma_server_bready;

  // action method imem_dma_server_m_arvalid
  input  imem_dma_server_arvalid;
  input  [3 : 0] imem_dma_server_arid;
  input  [31 : 0] imem_dma_server_araddr;
  input  [7 : 0] imem_dma_server_arlen;
  input  [2 : 0] imem_dma_server_arsize;
  input  [1 : 0] imem_dma_server_arburst;
  input  imem_dma_server_arlock;
  input  [3 : 0] imem_dma_server_arcache;
  input  [2 : 0] imem_dma_server_arprot;
  input  [3 : 0] imem_dma_server_arqos;
  input  [3 : 0] imem_dma_server_arregion;

  // value method imem_dma_server_m_arready
  output imem_dma_server_arready;

  // value method imem_dma_server_m_rvalid
  output imem_dma_server_rvalid;

  // value method imem_dma_server_m_rid
  output [3 : 0] imem_dma_server_rid;

  // value method imem_dma_server_m_rdata
  output [31 : 0] imem_dma_server_rdata;

  // value method imem_dma_server_m_rresp
  output [1 : 0] imem_dma_server_rresp;

  // value method imem_dma_server_m_rlast
  output imem_dma_server_rlast;

  // value method imem_dma_server_m_ruser

  // action method imem_dma_server_m_rready
  input  imem_dma_server_rready;

  // action method dmem_dma_server_m_awvalid
  input  dmem_dma_server_awvalid;
  input  [3 : 0] dmem_dma_server_awid;
  input  [31 : 0] dmem_dma_server_awaddr;
  input  [7 : 0] dmem_dma_server_awlen;
  input  [2 : 0] dmem_dma_server_awsize;
  input  [1 : 0] dmem_dma_server_awburst;
  input  dmem_dma_server_awlock;
  input  [3 : 0] dmem_dma_server_awcache;
  input  [2 : 0] dmem_dma_server_awprot;
  input  [3 : 0] dmem_dma_server_awqos;
  input  [3 : 0] dmem_dma_server_awregion;

  // value method dmem_dma_server_m_awready
  output dmem_dma_server_awready;

  // action method dmem_dma_server_m_wvalid
  input  dmem_dma_server_wvalid;
  input  [31 : 0] dmem_dma_server_wdata;
  input  [3 : 0] dmem_dma_server_wstrb;
  input  dmem_dma_server_wlast;

  // value method dmem_dma_server_m_wready
  output dmem_dma_server_wready;

  // value method dmem_dma_server_m_bvalid
  output dmem_dma_server_bvalid;

  // value method dmem_dma_server_m_bid
  output [3 : 0] dmem_dma_server_bid;

  // value method dmem_dma_server_m_bresp
  output [1 : 0] dmem_dma_server_bresp;

  // value method dmem_dma_server_m_buser

  // action method dmem_dma_server_m_bready
  input  dmem_dma_server_bready;

  // action method dmem_dma_server_m_arvalid
  input  dmem_dma_server_arvalid;
  input  [3 : 0] dmem_dma_server_arid;
  input  [31 : 0] dmem_dma_server_araddr;
  input  [7 : 0] dmem_dma_server_arlen;
  input  [2 : 0] dmem_dma_server_arsize;
  input  [1 : 0] dmem_dma_server_arburst;
  input  dmem_dma_server_arlock;
  input  [3 : 0] dmem_dma_server_arcache;
  input  [2 : 0] dmem_dma_server_arprot;
  input  [3 : 0] dmem_dma_server_arqos;
  input  [3 : 0] dmem_dma_server_arregion;

  // value method dmem_dma_server_m_arready
  output dmem_dma_server_arready;

  // value method dmem_dma_server_m_rvalid
  output dmem_dma_server_rvalid;

  // value method dmem_dma_server_m_rid
  output [3 : 0] dmem_dma_server_rid;

  // value method dmem_dma_server_m_rdata
  output [31 : 0] dmem_dma_server_rdata;

  // value method dmem_dma_server_m_rresp
  output [1 : 0] dmem_dma_server_rresp;

  // value method dmem_dma_server_m_rlast
  output dmem_dma_server_rlast;

  // value method dmem_dma_server_m_ruser

  // action method dmem_dma_server_m_rready
  input  dmem_dma_server_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method debug_hart_reset_server_request_put
  input  debug_hart_reset_server_request_put;
  input  EN_debug_hart_reset_server_request_put;
  output RDY_debug_hart_reset_server_request_put;

  // actionvalue method debug_hart_reset_server_response_get
  input  EN_debug_hart_reset_server_response_get;
  output debug_hart_reset_server_response_get;
  output RDY_debug_hart_reset_server_response_get;

  // action method debug_hart_server_run_halt_request_put
  input  debug_hart_server_run_halt_request_put;
  input  EN_debug_hart_server_run_halt_request_put;
  output RDY_debug_hart_server_run_halt_request_put;

  // actionvalue method debug_hart_server_run_halt_response_get
  input  EN_debug_hart_server_run_halt_response_get;
  output debug_hart_server_run_halt_response_get;
  output RDY_debug_hart_server_run_halt_response_get;

  // action method debug_hart_put_other_req_put
  input  [3 : 0] debug_hart_put_other_req_put;
  input  EN_debug_hart_put_other_req_put;
  output RDY_debug_hart_put_other_req_put;

  // action method debug_hart_gpr_mem_server_request_put
  input  [37 : 0] debug_hart_gpr_mem_server_request_put;
  input  EN_debug_hart_gpr_mem_server_request_put;
  output RDY_debug_hart_gpr_mem_server_request_put;

  // actionvalue method debug_hart_gpr_mem_server_response_get
  input  EN_debug_hart_gpr_mem_server_response_get;
  output [32 : 0] debug_hart_gpr_mem_server_response_get;
  output RDY_debug_hart_gpr_mem_server_response_get;

  // action method debug_hart_csr_mem_server_request_put
  input  [44 : 0] debug_hart_csr_mem_server_request_put;
  input  EN_debug_hart_csr_mem_server_request_put;
  output RDY_debug_hart_csr_mem_server_request_put;

  // actionvalue method debug_hart_csr_mem_server_response_get
  input  EN_debug_hart_csr_mem_server_response_get;
  output [32 : 0] debug_hart_csr_mem_server_response_get;
  output RDY_debug_hart_csr_mem_server_response_get;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [63 : 0] mv_tohost_value;
  wire [32 : 0] debug_hart_csr_mem_server_response_get,
		debug_hart_gpr_mem_server_response_get;
  wire [31 : 0] dmem_dma_server_rdata,
		dmem_master_HADDR,
		dmem_master_HWDATA,
		imem_dma_server_rdata,
		nmio_master_araddr,
		nmio_master_awaddr,
		nmio_master_wdata;
  wire [7 : 0] nmio_master_arlen, nmio_master_awlen;
  wire [3 : 0] dmem_dma_server_bid,
	       dmem_dma_server_rid,
	       dmem_master_HPROT,
	       imem_dma_server_bid,
	       imem_dma_server_rid,
	       nmio_master_arcache,
	       nmio_master_arid,
	       nmio_master_arqos,
	       nmio_master_arregion,
	       nmio_master_awcache,
	       nmio_master_awid,
	       nmio_master_awqos,
	       nmio_master_awregion,
	       nmio_master_wstrb;
  wire [2 : 0] dmem_master_HBURST,
	       dmem_master_HSIZE,
	       nmio_master_arprot,
	       nmio_master_arsize,
	       nmio_master_awprot,
	       nmio_master_awsize;
  wire [1 : 0] dmem_dma_server_bresp,
	       dmem_dma_server_rresp,
	       dmem_master_HTRANS,
	       imem_dma_server_bresp,
	       imem_dma_server_rresp,
	       nmio_master_arburst,
	       nmio_master_awburst;
  wire RDY_debug_hart_csr_mem_server_request_put,
       RDY_debug_hart_csr_mem_server_response_get,
       RDY_debug_hart_gpr_mem_server_request_put,
       RDY_debug_hart_gpr_mem_server_response_get,
       RDY_debug_hart_put_other_req_put,
       RDY_debug_hart_reset_server_request_put,
       RDY_debug_hart_reset_server_response_get,
       RDY_debug_hart_server_run_halt_request_put,
       RDY_debug_hart_server_run_halt_response_get,
       RDY_mv_tohost_value,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       debug_hart_reset_server_response_get,
       debug_hart_server_run_halt_response_get,
       dmem_dma_server_arready,
       dmem_dma_server_awready,
       dmem_dma_server_bvalid,
       dmem_dma_server_rlast,
       dmem_dma_server_rvalid,
       dmem_dma_server_wready,
       dmem_master_HMASTLOCK,
       dmem_master_HWRITE,
       imem_dma_server_arready,
       imem_dma_server_awready,
       imem_dma_server_bvalid,
       imem_dma_server_rlast,
       imem_dma_server_rvalid,
       imem_dma_server_wready,
       nmio_master_arlock,
       nmio_master_arvalid,
       nmio_master_awlock,
       nmio_master_awvalid,
       nmio_master_bready,
       nmio_master_rready,
       nmio_master_wlast,
       nmio_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_cache_addr
  reg [31 : 0] imem_rg_cache_addr;
  reg [31 : 0] imem_rg_cache_addr$D_IN;
  wire imem_rg_cache_addr$EN;

  // register imem_rg_cache_b16
  reg [15 : 0] imem_rg_cache_b16;
  wire [15 : 0] imem_rg_cache_b16$D_IN;
  wire imem_rg_cache_b16$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_pc
  reg [31 : 0] imem_rg_pc;
  reg [31 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_tval
  reg [31 : 0] imem_rg_tval;
  reg [31 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_csr_pc
  reg [31 : 0] rg_csr_pc;
  wire [31 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [31 : 0] rg_csr_val1;
  wire [31 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_epoch
  reg [1 : 0] rg_epoch;
  reg [1 : 0] rg_epoch$D_IN;
  wire rg_epoch$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  reg [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_step_count
  reg rg_step_count;
  wire rg_step_count$D_IN, rg_step_count$EN;

  // register rg_stop_req
  reg rg_stop_req;
  wire rg_stop_req$D_IN, rg_stop_req$EN;

  // register rg_trap_info
  reg [67 : 0] rg_trap_info;
  reg [67 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage1_rg_stage_input
  reg [305 : 0] stage1_rg_stage_input;
  wire [305 : 0] stage1_rg_stage_input$D_IN;
  wire stage1_rg_stage_input$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [169 : 0] stage2_rg_stage2;
  wire [169 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [103 : 0] stage3_rg_stage3;
  wire [103 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register stageD_rg_data
  reg [137 : 0] stageD_rg_data;
  wire [137 : 0] stageD_rg_data$D_IN;
  wire stageD_rg_data$EN;

  // register stageD_rg_full
  reg stageD_rg_full;
  reg stageD_rg_full$D_IN;
  wire stageD_rg_full$EN;

  // register stageF_rg_epoch
  reg [1 : 0] stageF_rg_epoch;
  reg [1 : 0] stageF_rg_epoch$D_IN;
  wire stageF_rg_epoch$EN;

  // register stageF_rg_full
  reg stageF_rg_full;
  reg stageF_rg_full$D_IN;
  wire stageF_rg_full$EN;

  // register stageF_rg_priv
  reg [1 : 0] stageF_rg_priv;
  wire [1 : 0] stageF_rg_priv$D_IN;
  wire stageF_rg_priv$EN;

  // ports of submodule csr_regfile
  reg [31 : 0] csr_regfile$mav_csr_write_word;
  reg [2 : 0] csr_regfile$write_dcsr_cause_priv_cause;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [64 : 0] csr_regfile$mav_csr_write;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr, csr_regfile$read_csr_port2;
  wire [31 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$read_dpc,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$write_dpc_pc;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_ret_actions_from_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$dcsr_break_enters_debug_cur_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$write_dcsr_cause_priv_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_write_dcsr_cause_priv,
       csr_regfile$EN_write_dpc,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$dcsr_break_enters_debug,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$read_dcsr_step,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_csr_reqs
  wire [44 : 0] f_csr_reqs$D_IN, f_csr_reqs$D_OUT;
  wire f_csr_reqs$CLR,
       f_csr_reqs$DEQ,
       f_csr_reqs$EMPTY_N,
       f_csr_reqs$ENQ,
       f_csr_reqs$FULL_N;

  // ports of submodule f_csr_rsps
  reg [32 : 0] f_csr_rsps$D_IN;
  wire [32 : 0] f_csr_rsps$D_OUT;
  wire f_csr_rsps$CLR,
       f_csr_rsps$DEQ,
       f_csr_rsps$EMPTY_N,
       f_csr_rsps$ENQ,
       f_csr_rsps$FULL_N;

  // ports of submodule f_gpr_reqs
  wire [37 : 0] f_gpr_reqs$D_IN, f_gpr_reqs$D_OUT;
  wire f_gpr_reqs$CLR,
       f_gpr_reqs$DEQ,
       f_gpr_reqs$EMPTY_N,
       f_gpr_reqs$ENQ,
       f_gpr_reqs$FULL_N;

  // ports of submodule f_gpr_rsps
  reg [32 : 0] f_gpr_rsps$D_IN;
  wire [32 : 0] f_gpr_rsps$D_OUT;
  wire f_gpr_rsps$CLR,
       f_gpr_rsps$DEQ,
       f_gpr_rsps$EMPTY_N,
       f_gpr_rsps$ENQ,
       f_gpr_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_run_halt_reqs
  wire f_run_halt_reqs$CLR,
       f_run_halt_reqs$DEQ,
       f_run_halt_reqs$D_IN,
       f_run_halt_reqs$D_OUT,
       f_run_halt_reqs$EMPTY_N,
       f_run_halt_reqs$ENQ,
       f_run_halt_reqs$FULL_N;

  // ports of submodule f_run_halt_rsps
  wire f_run_halt_rsps$CLR,
       f_run_halt_rsps$DEQ,
       f_run_halt_rsps$D_IN,
       f_run_halt_rsps$D_OUT,
       f_run_halt_rsps$EMPTY_N,
       f_run_halt_rsps$ENQ,
       f_run_halt_rsps$FULL_N;

  // ports of submodule gpr_regfile
  reg [31 : 0] gpr_regfile$write_rd_rd_val;
  reg [4 : 0] gpr_regfile$write_rd_rd;
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs1_port2,
		gpr_regfile$read_rs2;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  wire [63 : 0] near_mem$mv_tohost_value,
		near_mem$set_watch_tohost_tohost_addr;
  wire [31 : 0] near_mem$dmem_dma_server_araddr,
		near_mem$dmem_dma_server_awaddr,
		near_mem$dmem_dma_server_rdata,
		near_mem$dmem_dma_server_wdata,
		near_mem$dmem_master_HADDR,
		near_mem$dmem_master_HRDATA,
		near_mem$dmem_master_HWDATA,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word32,
		near_mem$imem_dma_server_araddr,
		near_mem$imem_dma_server_awaddr,
		near_mem$imem_dma_server_rdata,
		near_mem$imem_dma_server_wdata,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$nmio_master_araddr,
		near_mem$nmio_master_awaddr,
		near_mem$nmio_master_rdata,
		near_mem$nmio_master_wdata;
  wire [7 : 0] near_mem$dmem_dma_server_arlen,
	       near_mem$dmem_dma_server_awlen,
	       near_mem$imem_dma_server_arlen,
	       near_mem$imem_dma_server_awlen,
	       near_mem$nmio_master_arlen,
	       near_mem$nmio_master_awlen,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_dma_server_arcache,
	       near_mem$dmem_dma_server_arid,
	       near_mem$dmem_dma_server_arqos,
	       near_mem$dmem_dma_server_arregion,
	       near_mem$dmem_dma_server_awcache,
	       near_mem$dmem_dma_server_awid,
	       near_mem$dmem_dma_server_awqos,
	       near_mem$dmem_dma_server_awregion,
	       near_mem$dmem_dma_server_bid,
	       near_mem$dmem_dma_server_rid,
	       near_mem$dmem_dma_server_wstrb,
	       near_mem$dmem_exc_code,
	       near_mem$dmem_master_HPROT,
	       near_mem$imem_dma_server_arcache,
	       near_mem$imem_dma_server_arid,
	       near_mem$imem_dma_server_arqos,
	       near_mem$imem_dma_server_arregion,
	       near_mem$imem_dma_server_awcache,
	       near_mem$imem_dma_server_awid,
	       near_mem$imem_dma_server_awqos,
	       near_mem$imem_dma_server_awregion,
	       near_mem$imem_dma_server_bid,
	       near_mem$imem_dma_server_rid,
	       near_mem$imem_dma_server_wstrb,
	       near_mem$imem_exc_code,
	       near_mem$nmio_master_arcache,
	       near_mem$nmio_master_arid,
	       near_mem$nmio_master_arqos,
	       near_mem$nmio_master_arregion,
	       near_mem$nmio_master_awcache,
	       near_mem$nmio_master_awid,
	       near_mem$nmio_master_awqos,
	       near_mem$nmio_master_awregion,
	       near_mem$nmio_master_bid,
	       near_mem$nmio_master_rid,
	       near_mem$nmio_master_wstrb;
  wire [2 : 0] near_mem$dmem_dma_server_arprot,
	       near_mem$dmem_dma_server_arsize,
	       near_mem$dmem_dma_server_awprot,
	       near_mem$dmem_dma_server_awsize,
	       near_mem$dmem_master_HBURST,
	       near_mem$dmem_master_HSIZE,
	       near_mem$dmem_req_f3,
	       near_mem$imem_dma_server_arprot,
	       near_mem$imem_dma_server_arsize,
	       near_mem$imem_dma_server_awprot,
	       near_mem$imem_dma_server_awsize,
	       near_mem$imem_req_f3,
	       near_mem$nmio_master_arprot,
	       near_mem$nmio_master_arsize,
	       near_mem$nmio_master_awprot,
	       near_mem$nmio_master_awsize;
  wire [1 : 0] near_mem$dmem_dma_server_arburst,
	       near_mem$dmem_dma_server_awburst,
	       near_mem$dmem_dma_server_bresp,
	       near_mem$dmem_dma_server_rresp,
	       near_mem$dmem_master_HTRANS,
	       near_mem$dmem_req_op,
	       near_mem$imem_dma_server_arburst,
	       near_mem$imem_dma_server_awburst,
	       near_mem$imem_dma_server_bresp,
	       near_mem$imem_dma_server_rresp,
	       near_mem$nmio_master_arburst,
	       near_mem$nmio_master_awburst,
	       near_mem$nmio_master_bresp,
	       near_mem$nmio_master_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_set_watch_tohost,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_dma_server_arlock,
       near_mem$dmem_dma_server_arready,
       near_mem$dmem_dma_server_arvalid,
       near_mem$dmem_dma_server_awlock,
       near_mem$dmem_dma_server_awready,
       near_mem$dmem_dma_server_awvalid,
       near_mem$dmem_dma_server_bready,
       near_mem$dmem_dma_server_bvalid,
       near_mem$dmem_dma_server_rlast,
       near_mem$dmem_dma_server_rready,
       near_mem$dmem_dma_server_rvalid,
       near_mem$dmem_dma_server_wlast,
       near_mem$dmem_dma_server_wready,
       near_mem$dmem_dma_server_wvalid,
       near_mem$dmem_exc,
       near_mem$dmem_master_HMASTLOCK,
       near_mem$dmem_master_HREADY,
       near_mem$dmem_master_HRESP,
       near_mem$dmem_master_HWRITE,
       near_mem$dmem_valid,
       near_mem$imem_dma_server_arlock,
       near_mem$imem_dma_server_arready,
       near_mem$imem_dma_server_arvalid,
       near_mem$imem_dma_server_awlock,
       near_mem$imem_dma_server_awready,
       near_mem$imem_dma_server_awvalid,
       near_mem$imem_dma_server_bready,
       near_mem$imem_dma_server_bvalid,
       near_mem$imem_dma_server_rlast,
       near_mem$imem_dma_server_rready,
       near_mem$imem_dma_server_rvalid,
       near_mem$imem_dma_server_wlast,
       near_mem$imem_dma_server_wready,
       near_mem$imem_dma_server_wvalid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_valid,
       near_mem$nmio_master_arlock,
       near_mem$nmio_master_arready,
       near_mem$nmio_master_arvalid,
       near_mem$nmio_master_awlock,
       near_mem$nmio_master_awready,
       near_mem$nmio_master_awvalid,
       near_mem$nmio_master_bready,
       near_mem$nmio_master_bvalid,
       near_mem$nmio_master_rlast,
       near_mem$nmio_master_rready,
       near_mem$nmio_master_rvalid,
       near_mem$nmio_master_wlast,
       near_mem$nmio_master_wready,
       near_mem$nmio_master_wvalid,
       near_mem$set_watch_tohost_watch_tohost;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_pc_reset_value;
  wire [31 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_clint_addr_addr,
		soc_map$m_is_dtcm_addr_addr,
		soc_map$m_is_itcm_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_nmio_addr_addr,
		soc_map$m_is_tcm_addr_addr;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // ports of submodule stageD_f_reset_reqs
  wire stageD_f_reset_reqs$CLR,
       stageD_f_reset_reqs$DEQ,
       stageD_f_reset_reqs$EMPTY_N,
       stageD_f_reset_reqs$ENQ,
       stageD_f_reset_reqs$FULL_N;

  // ports of submodule stageD_f_reset_rsps
  wire stageD_f_reset_rsps$CLR,
       stageD_f_reset_rsps$DEQ,
       stageD_f_reset_rsps$EMPTY_N,
       stageD_f_reset_rsps$ENQ,
       stageD_f_reset_rsps$FULL_N;

  // ports of submodule stageF_branch_predictor
  reg [31 : 0] stageF_branch_predictor$predict_req_pc;
  wire [98 : 0] stageF_branch_predictor$bp_train_cf_info;
  wire [31 : 0] stageF_branch_predictor$bp_train_instr,
		stageF_branch_predictor$bp_train_pc,
		stageF_branch_predictor$predict_rsp,
		stageF_branch_predictor$predict_rsp_instr;
  wire stageF_branch_predictor$EN_bp_train,
       stageF_branch_predictor$EN_predict_req,
       stageF_branch_predictor$EN_reset,
       stageF_branch_predictor$bp_train_is_i32_not_i16,
       stageF_branch_predictor$predict_rsp_is_i32_not_i16;

  // ports of submodule stageF_f_reset_reqs
  wire stageF_f_reset_reqs$CLR,
       stageF_f_reset_reqs$DEQ,
       stageF_f_reset_reqs$EMPTY_N,
       stageF_f_reset_reqs$ENQ,
       stageF_f_reset_reqs$FULL_N;

  // ports of submodule stageF_f_reset_rsps
  wire stageF_f_reset_rsps$CLR,
       stageF_f_reset_rsps$DEQ,
       stageF_f_reset_rsps$EMPTY_N,
       stageF_f_reset_rsps$ENQ,
       stageF_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_BREAK_cache_flush_finish,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_debug_csr_access_busy,
       CAN_FIRE_RL_rl_debug_gpr_access_busy,
       CAN_FIRE_RL_rl_debug_halt,
       CAN_FIRE_RL_rl_debug_halt_redundant,
       CAN_FIRE_RL_rl_debug_read_csr,
       CAN_FIRE_RL_rl_debug_read_gpr,
       CAN_FIRE_RL_rl_debug_run,
       CAN_FIRE_RL_rl_debug_run_redundant,
       CAN_FIRE_RL_rl_debug_write_csr,
       CAN_FIRE_RL_rl_debug_write_gpr,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_Debug_Module,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_stop,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_stageD_rl_reset,
       CAN_FIRE_RL_stageF_rl_reset,
       CAN_FIRE_debug_hart_csr_mem_server_request_put,
       CAN_FIRE_debug_hart_csr_mem_server_response_get,
       CAN_FIRE_debug_hart_gpr_mem_server_request_put,
       CAN_FIRE_debug_hart_gpr_mem_server_response_get,
       CAN_FIRE_debug_hart_put_other_req_put,
       CAN_FIRE_debug_hart_reset_server_request_put,
       CAN_FIRE_debug_hart_reset_server_response_get,
       CAN_FIRE_debug_hart_server_run_halt_request_put,
       CAN_FIRE_debug_hart_server_run_halt_response_get,
       CAN_FIRE_dmem_dma_server_m_arvalid,
       CAN_FIRE_dmem_dma_server_m_awvalid,
       CAN_FIRE_dmem_dma_server_m_bready,
       CAN_FIRE_dmem_dma_server_m_rready,
       CAN_FIRE_dmem_dma_server_m_wvalid,
       CAN_FIRE_dmem_master_hrdata,
       CAN_FIRE_dmem_master_hready,
       CAN_FIRE_dmem_master_hresp,
       CAN_FIRE_imem_dma_server_m_arvalid,
       CAN_FIRE_imem_dma_server_m_awvalid,
       CAN_FIRE_imem_dma_server_m_bready,
       CAN_FIRE_imem_dma_server_m_rready,
       CAN_FIRE_imem_dma_server_m_wvalid,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_nmio_master_m_arready,
       CAN_FIRE_nmio_master_m_awready,
       CAN_FIRE_nmio_master_m_bvalid,
       CAN_FIRE_nmio_master_m_rvalid,
       CAN_FIRE_nmio_master_m_wready,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_BREAK_cache_flush_finish,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_debug_csr_access_busy,
       WILL_FIRE_RL_rl_debug_gpr_access_busy,
       WILL_FIRE_RL_rl_debug_halt,
       WILL_FIRE_RL_rl_debug_halt_redundant,
       WILL_FIRE_RL_rl_debug_read_csr,
       WILL_FIRE_RL_rl_debug_read_gpr,
       WILL_FIRE_RL_rl_debug_run,
       WILL_FIRE_RL_rl_debug_run_redundant,
       WILL_FIRE_RL_rl_debug_write_csr,
       WILL_FIRE_RL_rl_debug_write_gpr,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_Debug_Module,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_stop,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_stageD_rl_reset,
       WILL_FIRE_RL_stageF_rl_reset,
       WILL_FIRE_debug_hart_csr_mem_server_request_put,
       WILL_FIRE_debug_hart_csr_mem_server_response_get,
       WILL_FIRE_debug_hart_gpr_mem_server_request_put,
       WILL_FIRE_debug_hart_gpr_mem_server_response_get,
       WILL_FIRE_debug_hart_put_other_req_put,
       WILL_FIRE_debug_hart_reset_server_request_put,
       WILL_FIRE_debug_hart_reset_server_response_get,
       WILL_FIRE_debug_hart_server_run_halt_request_put,
       WILL_FIRE_debug_hart_server_run_halt_response_get,
       WILL_FIRE_dmem_dma_server_m_arvalid,
       WILL_FIRE_dmem_dma_server_m_awvalid,
       WILL_FIRE_dmem_dma_server_m_bready,
       WILL_FIRE_dmem_dma_server_m_rready,
       WILL_FIRE_dmem_dma_server_m_wvalid,
       WILL_FIRE_dmem_master_hrdata,
       WILL_FIRE_dmem_master_hready,
       WILL_FIRE_dmem_master_hresp,
       WILL_FIRE_imem_dma_server_m_arvalid,
       WILL_FIRE_imem_dma_server_m_awvalid,
       WILL_FIRE_imem_dma_server_m_bready,
       WILL_FIRE_imem_dma_server_m_rready,
       WILL_FIRE_imem_dma_server_m_wvalid,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_nmio_master_m_arready,
       WILL_FIRE_nmio_master_m_awready,
       WILL_FIRE_nmio_master_m_bvalid,
       WILL_FIRE_nmio_master_m_rvalid,
       WILL_FIRE_nmio_master_m_wready,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [67 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [32 : 0] MUX_f_csr_rsps$enq_1__VAL_3, MUX_f_gpr_rsps$enq_1__VAL_3;
  wire [31 : 0] MUX_imem_rg_cache_addr$write_1__VAL_1,
		MUX_imem_rg_cache_addr$write_1__VAL_2,
		MUX_imem_rg_tval$write_1__VAL_1,
		MUX_imem_rg_tval$write_1__VAL_2,
		MUX_imem_rg_tval$write_1__VAL_3,
		MUX_imem_rg_tval$write_1__VAL_4,
		MUX_imem_rg_tval$write_1__VAL_5,
		MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_4,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_rg_trap_instr$write_1__VAL_2;
  wire [3 : 0] MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_4;
  wire [2 : 0] MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_csr_regfile$mav_csr_write_1__SEL_2,
       MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1,
       MUX_csr_regfile$write_dpc_1__SEL_2,
       MUX_f_run_halt_rsps$enq_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_rg_cache_addr$write_1__SEL_1,
       MUX_imem_rg_cache_addr$write_1__SEL_2,
       MUX_imem_rg_cache_b16$write_1__PSEL_1,
       MUX_imem_rg_pc$write_1__SEL_3,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_step_count$write_1__SEL_4,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stage3_rg_full$write_1__VAL_2,
       MUX_stageD_rg_full$write_1__VAL_2,
       MUX_stageF_rg_full$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2562;
  reg [31 : 0] v__h2556;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13,
	       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848,
	       _theResult_____1_fst__h10739,
	       rs1_val__h27971,
	       x_out_bypass_rd_val__h9012,
	       x_out_cf_info_taken_PC__h12982,
	       x_out_data_to_stage2_addr__h9513,
	       x_out_data_to_stage2_val1__h9514,
	       x_out_data_to_stage3_rd_val__h8362;
  reg [4 : 0] x_out_bypass_rd__h9011, x_out_data_to_stage3_rd__h8361;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q3,
	      CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4,
	      alu_outputs_exc_code__h10158;
  reg [2 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15,
	      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16;
  reg [1 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q18;
  reg CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q6,
      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q9,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q10,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q7,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q8,
      CASE_stage2_rg_stage2_BITS_103_TO_101_1_NOT_ne_ETC__q17,
      IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297,
      IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408,
      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d155,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d163,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d193,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d198,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d206,
      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210;
  wire [135 : 0] IF_stage1_rg_stage_input_17_BITS_271_TO_270_18_ETC___d1608;
  wire [127 : 0] csr_regfile_read_csr_mcycle__5_MINUS_rg_start__ETC___d1996;
  wire [63 : 0] _theResult____h35741,
		cpi__h35743,
		cpifrac__h35744,
		delta_CPI_cycles__h35739,
		delta_CPI_instrs___1__h35785,
		delta_CPI_instrs__h35740,
		x__h35742;
  wire [31 : 0] IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d1296,
		IF_csr_regfile_read_csr_rg_trap_instr_852_BITS_ETC___d1900,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1148,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1150,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1152,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1153,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1155,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1156,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1157,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1159,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1160,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1161,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1163,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1164,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1165,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1166,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1167,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1168,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1169,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1170,
		IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1171,
		IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d1297,
		IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d849,
		IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d850,
		SEXT_stage1_rg_stage_input_17_BITS_87_TO_76_50___d703,
		_theResult_____1_fst__h10732,
		_theResult_____1_fst__h10767,
		_theResult____h5541,
		_theResult___snd_snd__h13386,
		addr_of_b32___1__h21372,
		addr_of_b32___1__h25263,
		addr_of_b32___1__h34631,
		addr_of_b32___1__h36763,
		addr_of_b32__h21244,
		addr_of_b32__h25135,
		addr_of_b32__h34503,
		addr_of_b32__h36635,
		alu_outputs___1_addr__h9705,
		alu_outputs___1_addr__h9928,
		alu_outputs___1_val1__h10120,
		alu_outputs___1_val1__h10141,
		alu_outputs___1_val1__h9823,
		alu_outputs___1_val1__h9861,
		alu_outputs_cf_info_taken_PC__h12974,
		branch_target__h9682,
		d_instr__h19358,
		data_to_stage2_addr__h9503,
		data_to_stage2_val2__h9505,
		eaddr__h9898,
		fall_through_pc__h9296,
		instr___1__h13843,
		instr__h14008,
		instr__h14153,
		instr__h14345,
		instr__h14540,
		instr__h14769,
		instr__h15111,
		instr__h15501,
		instr__h15617,
		instr__h15682,
		instr__h15999,
		instr__h16337,
		instr__h16521,
		instr__h16650,
		instr__h17087,
		instr__h17259,
		instr__h17432,
		instr__h17625,
		instr__h17818,
		instr__h17935,
		instr__h18113,
		instr__h18232,
		instr__h18327,
		instr__h18463,
		instr__h18599,
		instr__h18735,
		instr__h19073,
		instr_out___1__h19360,
		instr_out___1__h19382,
		next_pc___1__h11201,
		next_pc__h11198,
		next_pc__h9297,
		next_pc__h9711,
		next_pc__h9739,
		rd_val___1__h10647,
		rd_val___1__h10728,
		rd_val___1__h10735,
		rd_val___1__h10742,
		rd_val___1__h10749,
		rd_val___1__h10756,
		rd_val__h13287,
		rd_val__h13338,
		rd_val__h13360,
		rd_val__h9184,
		rd_val__h9265,
		rd_val__h9868,
		rd_val__h9882,
		rs1_val__h27157,
		rs1_val_bypassed__h5273,
		rs2_val_bypassed__h5279,
		trap_info_tval__h12083,
		val__h9186,
		val__h9267,
		value__h12149,
		x_out_cf_info_fallthru_PC__h12981,
		x_out_data_to_stage1_instr__h13769,
		x_out_data_to_stage2_val2__h9515,
		x_out_next_pc__h9313,
		y__h28249;
  wire [20 : 0] SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999,
		decoded_instr_imm21_UJ__h23683,
		stage1_rg_stage_input_BITS_30_TO_10__q2;
  wire [19 : 0] imm20__h16389;
  wire [12 : 0] SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028,
		decoded_instr_imm13_SB__h23681,
		stage1_rg_stage_input_BITS_63_TO_51__q1;
  wire [11 : 0] decoded_instr_imm12_S__h23680,
		imm12__h14009,
		imm12__h14346,
		imm12__h16261,
		imm12__h16885,
		imm12__h17100,
		imm12__h17296,
		imm12__h17641,
		offset__h14716,
		stage1_rg_stage_input_BITS_75_TO_64__q5,
		stage1_rg_stage_input_BITS_87_TO_76__q12;
  wire [9 : 0] decoded_instr_funct10__h23678,
	       nzimm10__h16883,
	       nzimm10__h17098;
  wire [8 : 0] offset__h15626;
  wire [7 : 0] offset__h13881;
  wire [6 : 0] offset__h14288;
  wire [5 : 0] imm6__h16259;
  wire [4 : 0] data_to_stage2_rd__h9502,
	       offset_BITS_4_TO_0___h14277,
	       offset_BITS_4_TO_0___h14708,
	       rd__h14348,
	       rs1__h14347,
	       shamt__h9810,
	       x_out_data_to_stage2_rd__h9512;
  wire [3 : 0] alu_outputs___1_exc_code__h10116,
	       cur_verbosity__h3823,
	       x_exc_code__h35443,
	       x_out_trap_info_exc_code__h12088;
  wire [1 : 0] new_epoch__h20813;
  wire IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920,
       IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1561,
       IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596,
       IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1624,
       IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d1813,
       IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286,
       IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288,
       IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1820,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1857,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d398,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472,
       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476,
       IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1517,
       IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1537,
       IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1673,
       IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714,
       IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1770,
       IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d222,
       IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d224,
       NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1504,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1555,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1800,
       NOT_csr_regfile_read_dpc__013_BITS_1_TO_0_014__ETC___d2021,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1293,
       NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1312,
       NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319,
       NOT_near_mem_imem_valid_302_OR_NOT_imem_rg_pc__ETC___d1522,
       NOT_rg_cur_priv_6_EQ_0b11_63_32_AND_NOT_rg_cur_ETC___d648,
       NOT_rg_next_pc_911_BITS_1_TO_0_912_EQ_0b0_913__ETC___d1919,
       NOT_soc_map_m_pc_reset_value__469_BITS_1_TO_0__ETC___d1484,
       NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1551,
       NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1554,
       NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1560,
       NOT_stage1_rg_stage_input_17_BITS_109_TO_105_5_ETC___d392,
       NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d340,
       NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d620,
       NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d627,
       NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546,
       NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1968,
       NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1982,
       NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1986,
       NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1991,
       NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d674,
       NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d1799,
       NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d506,
       NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d521,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1724,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1731,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1784,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1788,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485,
       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d738,
       NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137,
       NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d157,
       NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d1749,
       _dand2rg_step_count$EN_write,
       csr_regfile_RDY_server_reset_request_put__425__ETC___d1437,
       csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1726,
       csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1983,
       csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1013,
       csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1019,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1316,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455,
       imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271,
       imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17,
       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1324,
       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326,
       near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_273___d1274,
       near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d1421,
       rg_cur_priv_6_EQ_0b11_63_OR_rg_cur_priv_6_EQ_0_ETC___d586,
       rg_state_9_EQ_13_2_AND_csr_regfile_wfi_resume__ETC___d1952,
       rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860,
       rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1935,
       rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1940,
       rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1941,
       rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1947,
       rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1803,
       rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1826,
       rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1927,
       rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1960,
       rg_state_9_EQ_4_538_AND_stage3_rg_full_2_OR_st_ETC___d1550,
       rg_state_9_EQ_6_956_AND_NOT_stageF_rg_full_301_ETC___d1957,
       rg_state_9_EQ_9_908_AND_NOT_stageF_rg_full_301_ETC___d1909,
       stage1_f_reset_rsps_i_notEmpty__447_AND_stage2_ETC___d1461,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1772,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1776,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1974,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d683,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d688,
       stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d694,
       stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d747,
       stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d752,
       stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d757,
       stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d443,
       stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d538,
       stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d552,
       stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d567,
       stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d588,
       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557,
       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1925,
       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219,
       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d489,
       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d861,
       stage2_rg_full_01_AND_IF_stage2_rg_stage2_02_B_ETC___d1576,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1497,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1509,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1513,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1527,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1532,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1591,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1598,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1626,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1640,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1649,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1653,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1657,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1661,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1666,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1669,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d496,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d508,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d509,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d511,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d523,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d524,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d526,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d542,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d543,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d545,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d556,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d557,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d559,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d571,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d572,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d574,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d592,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d593,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d595,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d656,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d658,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d660,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d722,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d764,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d772,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1578,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1584,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d270,
       stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_0_04_ETC___d149,
       stage3_rg_full_2_OR_NOT_stage2_rg_full_01_52_O_ETC___d1549,
       stageF_rg_full_301_AND_near_mem_imem_valid_AND_ETC___d1333;

  // value method nmio_master_m_awvalid
  assign nmio_master_awvalid = near_mem$nmio_master_awvalid ;

  // value method nmio_master_m_awid
  assign nmio_master_awid = near_mem$nmio_master_awid ;

  // value method nmio_master_m_awaddr
  assign nmio_master_awaddr = near_mem$nmio_master_awaddr ;

  // value method nmio_master_m_awlen
  assign nmio_master_awlen = near_mem$nmio_master_awlen ;

  // value method nmio_master_m_awsize
  assign nmio_master_awsize = near_mem$nmio_master_awsize ;

  // value method nmio_master_m_awburst
  assign nmio_master_awburst = near_mem$nmio_master_awburst ;

  // value method nmio_master_m_awlock
  assign nmio_master_awlock = near_mem$nmio_master_awlock ;

  // value method nmio_master_m_awcache
  assign nmio_master_awcache = near_mem$nmio_master_awcache ;

  // value method nmio_master_m_awprot
  assign nmio_master_awprot = near_mem$nmio_master_awprot ;

  // value method nmio_master_m_awqos
  assign nmio_master_awqos = near_mem$nmio_master_awqos ;

  // value method nmio_master_m_awregion
  assign nmio_master_awregion = near_mem$nmio_master_awregion ;

  // action method nmio_master_m_awready
  assign CAN_FIRE_nmio_master_m_awready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_awready = 1'd1 ;

  // value method nmio_master_m_wvalid
  assign nmio_master_wvalid = near_mem$nmio_master_wvalid ;

  // value method nmio_master_m_wdata
  assign nmio_master_wdata = near_mem$nmio_master_wdata ;

  // value method nmio_master_m_wstrb
  assign nmio_master_wstrb = near_mem$nmio_master_wstrb ;

  // value method nmio_master_m_wlast
  assign nmio_master_wlast = near_mem$nmio_master_wlast ;

  // action method nmio_master_m_wready
  assign CAN_FIRE_nmio_master_m_wready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_wready = 1'd1 ;

  // action method nmio_master_m_bvalid
  assign CAN_FIRE_nmio_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_bvalid = 1'd1 ;

  // value method nmio_master_m_bready
  assign nmio_master_bready = near_mem$nmio_master_bready ;

  // value method nmio_master_m_arvalid
  assign nmio_master_arvalid = near_mem$nmio_master_arvalid ;

  // value method nmio_master_m_arid
  assign nmio_master_arid = near_mem$nmio_master_arid ;

  // value method nmio_master_m_araddr
  assign nmio_master_araddr = near_mem$nmio_master_araddr ;

  // value method nmio_master_m_arlen
  assign nmio_master_arlen = near_mem$nmio_master_arlen ;

  // value method nmio_master_m_arsize
  assign nmio_master_arsize = near_mem$nmio_master_arsize ;

  // value method nmio_master_m_arburst
  assign nmio_master_arburst = near_mem$nmio_master_arburst ;

  // value method nmio_master_m_arlock
  assign nmio_master_arlock = near_mem$nmio_master_arlock ;

  // value method nmio_master_m_arcache
  assign nmio_master_arcache = near_mem$nmio_master_arcache ;

  // value method nmio_master_m_arprot
  assign nmio_master_arprot = near_mem$nmio_master_arprot ;

  // value method nmio_master_m_arqos
  assign nmio_master_arqos = near_mem$nmio_master_arqos ;

  // value method nmio_master_m_arregion
  assign nmio_master_arregion = near_mem$nmio_master_arregion ;

  // action method nmio_master_m_arready
  assign CAN_FIRE_nmio_master_m_arready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_arready = 1'd1 ;

  // action method nmio_master_m_rvalid
  assign CAN_FIRE_nmio_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_rvalid = 1'd1 ;

  // value method nmio_master_m_rready
  assign nmio_master_rready = near_mem$nmio_master_rready ;

  // value method dmem_master_haddr
  assign dmem_master_HADDR = near_mem$dmem_master_HADDR ;

  // value method dmem_master_hburst
  assign dmem_master_HBURST = near_mem$dmem_master_HBURST ;

  // value method dmem_master_hmastlock
  assign dmem_master_HMASTLOCK = near_mem$dmem_master_HMASTLOCK ;

  // value method dmem_master_hprot
  assign dmem_master_HPROT = near_mem$dmem_master_HPROT ;

  // value method dmem_master_hsize
  assign dmem_master_HSIZE = near_mem$dmem_master_HSIZE ;

  // value method dmem_master_htrans
  assign dmem_master_HTRANS = near_mem$dmem_master_HTRANS ;

  // value method dmem_master_hwdata
  assign dmem_master_HWDATA = near_mem$dmem_master_HWDATA ;

  // value method dmem_master_hwrite
  assign dmem_master_HWRITE = near_mem$dmem_master_HWRITE ;

  // action method dmem_master_hrdata
  assign CAN_FIRE_dmem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_dmem_master_hrdata = 1'd1 ;

  // action method dmem_master_hready
  assign CAN_FIRE_dmem_master_hready = 1'd1 ;
  assign WILL_FIRE_dmem_master_hready = 1'd1 ;

  // action method dmem_master_hresp
  assign CAN_FIRE_dmem_master_hresp = 1'd1 ;
  assign WILL_FIRE_dmem_master_hresp = 1'd1 ;

  // action method imem_dma_server_m_awvalid
  assign CAN_FIRE_imem_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_awvalid = 1'd1 ;

  // value method imem_dma_server_m_awready
  assign imem_dma_server_awready = near_mem$imem_dma_server_awready ;

  // action method imem_dma_server_m_wvalid
  assign CAN_FIRE_imem_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_wvalid = 1'd1 ;

  // value method imem_dma_server_m_wready
  assign imem_dma_server_wready = near_mem$imem_dma_server_wready ;

  // value method imem_dma_server_m_bvalid
  assign imem_dma_server_bvalid = near_mem$imem_dma_server_bvalid ;

  // value method imem_dma_server_m_bid
  assign imem_dma_server_bid = near_mem$imem_dma_server_bid ;

  // value method imem_dma_server_m_bresp
  assign imem_dma_server_bresp = near_mem$imem_dma_server_bresp ;

  // action method imem_dma_server_m_bready
  assign CAN_FIRE_imem_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_bready = 1'd1 ;

  // action method imem_dma_server_m_arvalid
  assign CAN_FIRE_imem_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_arvalid = 1'd1 ;

  // value method imem_dma_server_m_arready
  assign imem_dma_server_arready = near_mem$imem_dma_server_arready ;

  // value method imem_dma_server_m_rvalid
  assign imem_dma_server_rvalid = near_mem$imem_dma_server_rvalid ;

  // value method imem_dma_server_m_rid
  assign imem_dma_server_rid = near_mem$imem_dma_server_rid ;

  // value method imem_dma_server_m_rdata
  assign imem_dma_server_rdata = near_mem$imem_dma_server_rdata ;

  // value method imem_dma_server_m_rresp
  assign imem_dma_server_rresp = near_mem$imem_dma_server_rresp ;

  // value method imem_dma_server_m_rlast
  assign imem_dma_server_rlast = near_mem$imem_dma_server_rlast ;

  // action method imem_dma_server_m_rready
  assign CAN_FIRE_imem_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_rready = 1'd1 ;

  // action method dmem_dma_server_m_awvalid
  assign CAN_FIRE_dmem_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_awvalid = 1'd1 ;

  // value method dmem_dma_server_m_awready
  assign dmem_dma_server_awready = near_mem$dmem_dma_server_awready ;

  // action method dmem_dma_server_m_wvalid
  assign CAN_FIRE_dmem_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_wvalid = 1'd1 ;

  // value method dmem_dma_server_m_wready
  assign dmem_dma_server_wready = near_mem$dmem_dma_server_wready ;

  // value method dmem_dma_server_m_bvalid
  assign dmem_dma_server_bvalid = near_mem$dmem_dma_server_bvalid ;

  // value method dmem_dma_server_m_bid
  assign dmem_dma_server_bid = near_mem$dmem_dma_server_bid ;

  // value method dmem_dma_server_m_bresp
  assign dmem_dma_server_bresp = near_mem$dmem_dma_server_bresp ;

  // action method dmem_dma_server_m_bready
  assign CAN_FIRE_dmem_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_bready = 1'd1 ;

  // action method dmem_dma_server_m_arvalid
  assign CAN_FIRE_dmem_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_arvalid = 1'd1 ;

  // value method dmem_dma_server_m_arready
  assign dmem_dma_server_arready = near_mem$dmem_dma_server_arready ;

  // value method dmem_dma_server_m_rvalid
  assign dmem_dma_server_rvalid = near_mem$dmem_dma_server_rvalid ;

  // value method dmem_dma_server_m_rid
  assign dmem_dma_server_rid = near_mem$dmem_dma_server_rid ;

  // value method dmem_dma_server_m_rdata
  assign dmem_dma_server_rdata = near_mem$dmem_dma_server_rdata ;

  // value method dmem_dma_server_m_rresp
  assign dmem_dma_server_rresp = near_mem$dmem_dma_server_rresp ;

  // value method dmem_dma_server_m_rlast
  assign dmem_dma_server_rlast = near_mem$dmem_dma_server_rlast ;

  // action method dmem_dma_server_m_rready
  assign CAN_FIRE_dmem_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_rready = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method debug_hart_reset_server_request_put
  assign RDY_debug_hart_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_reset_server_request_put =
	     EN_debug_hart_reset_server_request_put ;

  // actionvalue method debug_hart_reset_server_response_get
  assign debug_hart_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_debug_hart_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_reset_server_response_get =
	     f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_reset_server_response_get =
	     EN_debug_hart_reset_server_response_get ;

  // action method debug_hart_server_run_halt_request_put
  assign RDY_debug_hart_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_server_run_halt_request_put =
	     f_run_halt_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_server_run_halt_request_put =
	     EN_debug_hart_server_run_halt_request_put ;

  // actionvalue method debug_hart_server_run_halt_response_get
  assign debug_hart_server_run_halt_response_get = f_run_halt_rsps$D_OUT ;
  assign RDY_debug_hart_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_server_run_halt_response_get =
	     EN_debug_hart_server_run_halt_response_get ;

  // action method debug_hart_put_other_req_put
  assign RDY_debug_hart_put_other_req_put = 1'd1 ;
  assign CAN_FIRE_debug_hart_put_other_req_put = 1'd1 ;
  assign WILL_FIRE_debug_hart_put_other_req_put =
	     EN_debug_hart_put_other_req_put ;

  // action method debug_hart_gpr_mem_server_request_put
  assign RDY_debug_hart_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_gpr_mem_server_request_put =
	     EN_debug_hart_gpr_mem_server_request_put ;

  // actionvalue method debug_hart_gpr_mem_server_response_get
  assign debug_hart_gpr_mem_server_response_get = f_gpr_rsps$D_OUT ;
  assign RDY_debug_hart_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_gpr_mem_server_response_get =
	     f_gpr_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_gpr_mem_server_response_get =
	     EN_debug_hart_gpr_mem_server_response_get ;

  // action method debug_hart_csr_mem_server_request_put
  assign RDY_debug_hart_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign CAN_FIRE_debug_hart_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign WILL_FIRE_debug_hart_csr_mem_server_request_put =
	     EN_debug_hart_csr_mem_server_request_put ;

  // actionvalue method debug_hart_csr_mem_server_response_get
  assign debug_hart_csr_mem_server_response_get = f_csr_rsps$D_OUT ;
  assign RDY_debug_hart_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign CAN_FIRE_debug_hart_csr_mem_server_response_get =
	     f_csr_rsps$EMPTY_N ;
  assign WILL_FIRE_debug_hart_csr_mem_server_response_get =
	     EN_debug_hart_csr_mem_server_response_get ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = near_mem$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .dcsr_break_enters_debug_cur_priv(csr_regfile$dcsr_break_enters_debug_cur_priv),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .write_dcsr_cause_priv_cause(csr_regfile$write_dcsr_cause_priv_cause),
			    .write_dcsr_cause_priv_priv(csr_regfile$write_dcsr_cause_priv_priv),
			    .write_dpc_pc(csr_regfile$write_dpc_pc),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_write_dpc(csr_regfile$EN_write_dpc),
			    .EN_write_dcsr_cause_priv(csr_regfile$EN_write_dcsr_cause_priv),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(csr_regfile$read_csr_port2),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .read_dpc(csr_regfile$read_dpc),
			    .RDY_read_dpc(),
			    .RDY_write_dpc(),
			    .dcsr_break_enters_debug(csr_regfile$dcsr_break_enters_debug),
			    .RDY_dcsr_break_enters_debug(),
			    .read_dcsr_step(csr_regfile$read_dcsr_step),
			    .RDY_read_dcsr_step(),
			    .RDY_debug());

  // submodule f_csr_reqs
  FIFO2 #(.width(32'd45), .guarded(1'd1)) f_csr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_csr_reqs$D_IN),
						     .ENQ(f_csr_reqs$ENQ),
						     .DEQ(f_csr_reqs$DEQ),
						     .CLR(f_csr_reqs$CLR),
						     .D_OUT(f_csr_reqs$D_OUT),
						     .FULL_N(f_csr_reqs$FULL_N),
						     .EMPTY_N(f_csr_reqs$EMPTY_N));

  // submodule f_csr_rsps
  FIFO2 #(.width(32'd33), .guarded(1'd1)) f_csr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_csr_rsps$D_IN),
						     .ENQ(f_csr_rsps$ENQ),
						     .DEQ(f_csr_rsps$DEQ),
						     .CLR(f_csr_rsps$CLR),
						     .D_OUT(f_csr_rsps$D_OUT),
						     .FULL_N(f_csr_rsps$FULL_N),
						     .EMPTY_N(f_csr_rsps$EMPTY_N));

  // submodule f_gpr_reqs
  FIFO2 #(.width(32'd38), .guarded(1'd1)) f_gpr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_gpr_reqs$D_IN),
						     .ENQ(f_gpr_reqs$ENQ),
						     .DEQ(f_gpr_reqs$DEQ),
						     .CLR(f_gpr_reqs$CLR),
						     .D_OUT(f_gpr_reqs$D_OUT),
						     .FULL_N(f_gpr_reqs$FULL_N),
						     .EMPTY_N(f_gpr_reqs$EMPTY_N));

  // submodule f_gpr_rsps
  FIFO2 #(.width(32'd33), .guarded(1'd1)) f_gpr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_gpr_rsps$D_IN),
						     .ENQ(f_gpr_rsps$ENQ),
						     .DEQ(f_gpr_rsps$DEQ),
						     .CLR(f_gpr_rsps$CLR),
						     .D_OUT(f_gpr_rsps$D_OUT),
						     .FULL_N(f_gpr_rsps$FULL_N),
						     .EMPTY_N(f_gpr_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_run_halt_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_run_halt_reqs(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_run_halt_reqs$D_IN),
							 .ENQ(f_run_halt_reqs$ENQ),
							 .DEQ(f_run_halt_reqs$DEQ),
							 .CLR(f_run_halt_reqs$CLR),
							 .D_OUT(f_run_halt_reqs$D_OUT),
							 .FULL_N(f_run_halt_reqs$FULL_N),
							 .EMPTY_N(f_run_halt_reqs$EMPTY_N));

  // submodule f_run_halt_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_run_halt_rsps(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_run_halt_rsps$D_IN),
							 .ENQ(f_run_halt_rsps$ENQ),
							 .DEQ(f_run_halt_rsps$DEQ),
							 .CLR(f_run_halt_rsps$CLR),
							 .D_OUT(f_run_halt_rsps$D_OUT),
							 .FULL_N(f_run_halt_rsps$FULL_N),
							 .EMPTY_N(f_run_halt_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(gpr_regfile$read_rs1_port2),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_dma_server_araddr(near_mem$dmem_dma_server_araddr),
		      .dmem_dma_server_arburst(near_mem$dmem_dma_server_arburst),
		      .dmem_dma_server_arcache(near_mem$dmem_dma_server_arcache),
		      .dmem_dma_server_arid(near_mem$dmem_dma_server_arid),
		      .dmem_dma_server_arlen(near_mem$dmem_dma_server_arlen),
		      .dmem_dma_server_arlock(near_mem$dmem_dma_server_arlock),
		      .dmem_dma_server_arprot(near_mem$dmem_dma_server_arprot),
		      .dmem_dma_server_arqos(near_mem$dmem_dma_server_arqos),
		      .dmem_dma_server_arregion(near_mem$dmem_dma_server_arregion),
		      .dmem_dma_server_arsize(near_mem$dmem_dma_server_arsize),
		      .dmem_dma_server_arvalid(near_mem$dmem_dma_server_arvalid),
		      .dmem_dma_server_awaddr(near_mem$dmem_dma_server_awaddr),
		      .dmem_dma_server_awburst(near_mem$dmem_dma_server_awburst),
		      .dmem_dma_server_awcache(near_mem$dmem_dma_server_awcache),
		      .dmem_dma_server_awid(near_mem$dmem_dma_server_awid),
		      .dmem_dma_server_awlen(near_mem$dmem_dma_server_awlen),
		      .dmem_dma_server_awlock(near_mem$dmem_dma_server_awlock),
		      .dmem_dma_server_awprot(near_mem$dmem_dma_server_awprot),
		      .dmem_dma_server_awqos(near_mem$dmem_dma_server_awqos),
		      .dmem_dma_server_awregion(near_mem$dmem_dma_server_awregion),
		      .dmem_dma_server_awsize(near_mem$dmem_dma_server_awsize),
		      .dmem_dma_server_awvalid(near_mem$dmem_dma_server_awvalid),
		      .dmem_dma_server_bready(near_mem$dmem_dma_server_bready),
		      .dmem_dma_server_rready(near_mem$dmem_dma_server_rready),
		      .dmem_dma_server_wdata(near_mem$dmem_dma_server_wdata),
		      .dmem_dma_server_wlast(near_mem$dmem_dma_server_wlast),
		      .dmem_dma_server_wstrb(near_mem$dmem_dma_server_wstrb),
		      .dmem_dma_server_wvalid(near_mem$dmem_dma_server_wvalid),
		      .dmem_master_HRDATA(near_mem$dmem_master_HRDATA),
		      .dmem_master_HREADY(near_mem$dmem_master_HREADY),
		      .dmem_master_HRESP(near_mem$dmem_master_HRESP),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_dma_server_araddr(near_mem$imem_dma_server_araddr),
		      .imem_dma_server_arburst(near_mem$imem_dma_server_arburst),
		      .imem_dma_server_arcache(near_mem$imem_dma_server_arcache),
		      .imem_dma_server_arid(near_mem$imem_dma_server_arid),
		      .imem_dma_server_arlen(near_mem$imem_dma_server_arlen),
		      .imem_dma_server_arlock(near_mem$imem_dma_server_arlock),
		      .imem_dma_server_arprot(near_mem$imem_dma_server_arprot),
		      .imem_dma_server_arqos(near_mem$imem_dma_server_arqos),
		      .imem_dma_server_arregion(near_mem$imem_dma_server_arregion),
		      .imem_dma_server_arsize(near_mem$imem_dma_server_arsize),
		      .imem_dma_server_arvalid(near_mem$imem_dma_server_arvalid),
		      .imem_dma_server_awaddr(near_mem$imem_dma_server_awaddr),
		      .imem_dma_server_awburst(near_mem$imem_dma_server_awburst),
		      .imem_dma_server_awcache(near_mem$imem_dma_server_awcache),
		      .imem_dma_server_awid(near_mem$imem_dma_server_awid),
		      .imem_dma_server_awlen(near_mem$imem_dma_server_awlen),
		      .imem_dma_server_awlock(near_mem$imem_dma_server_awlock),
		      .imem_dma_server_awprot(near_mem$imem_dma_server_awprot),
		      .imem_dma_server_awqos(near_mem$imem_dma_server_awqos),
		      .imem_dma_server_awregion(near_mem$imem_dma_server_awregion),
		      .imem_dma_server_awsize(near_mem$imem_dma_server_awsize),
		      .imem_dma_server_awvalid(near_mem$imem_dma_server_awvalid),
		      .imem_dma_server_bready(near_mem$imem_dma_server_bready),
		      .imem_dma_server_rready(near_mem$imem_dma_server_rready),
		      .imem_dma_server_wdata(near_mem$imem_dma_server_wdata),
		      .imem_dma_server_wlast(near_mem$imem_dma_server_wlast),
		      .imem_dma_server_wstrb(near_mem$imem_dma_server_wstrb),
		      .imem_dma_server_wvalid(near_mem$imem_dma_server_wvalid),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .nmio_master_arready(near_mem$nmio_master_arready),
		      .nmio_master_awready(near_mem$nmio_master_awready),
		      .nmio_master_bid(near_mem$nmio_master_bid),
		      .nmio_master_bresp(near_mem$nmio_master_bresp),
		      .nmio_master_bvalid(near_mem$nmio_master_bvalid),
		      .nmio_master_rdata(near_mem$nmio_master_rdata),
		      .nmio_master_rid(near_mem$nmio_master_rid),
		      .nmio_master_rlast(near_mem$nmio_master_rlast),
		      .nmio_master_rresp(near_mem$nmio_master_rresp),
		      .nmio_master_rvalid(near_mem$nmio_master_rvalid),
		      .nmio_master_wready(near_mem$nmio_master_wready),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .set_watch_tohost_tohost_addr(near_mem$set_watch_tohost_tohost_addr),
		      .set_watch_tohost_watch_tohost(near_mem$set_watch_tohost_watch_tohost),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_set_watch_tohost(near_mem$EN_set_watch_tohost),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_dma_server_awready(near_mem$imem_dma_server_awready),
		      .imem_dma_server_wready(near_mem$imem_dma_server_wready),
		      .imem_dma_server_bvalid(near_mem$imem_dma_server_bvalid),
		      .imem_dma_server_bid(near_mem$imem_dma_server_bid),
		      .imem_dma_server_bresp(near_mem$imem_dma_server_bresp),
		      .imem_dma_server_arready(near_mem$imem_dma_server_arready),
		      .imem_dma_server_rvalid(near_mem$imem_dma_server_rvalid),
		      .imem_dma_server_rid(near_mem$imem_dma_server_rid),
		      .imem_dma_server_rdata(near_mem$imem_dma_server_rdata),
		      .imem_dma_server_rresp(near_mem$imem_dma_server_rresp),
		      .imem_dma_server_rlast(near_mem$imem_dma_server_rlast),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word32(near_mem$dmem_word32),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .nmio_master_awvalid(near_mem$nmio_master_awvalid),
		      .nmio_master_awid(near_mem$nmio_master_awid),
		      .nmio_master_awaddr(near_mem$nmio_master_awaddr),
		      .nmio_master_awlen(near_mem$nmio_master_awlen),
		      .nmio_master_awsize(near_mem$nmio_master_awsize),
		      .nmio_master_awburst(near_mem$nmio_master_awburst),
		      .nmio_master_awlock(near_mem$nmio_master_awlock),
		      .nmio_master_awcache(near_mem$nmio_master_awcache),
		      .nmio_master_awprot(near_mem$nmio_master_awprot),
		      .nmio_master_awqos(near_mem$nmio_master_awqos),
		      .nmio_master_awregion(near_mem$nmio_master_awregion),
		      .nmio_master_wvalid(near_mem$nmio_master_wvalid),
		      .nmio_master_wdata(near_mem$nmio_master_wdata),
		      .nmio_master_wstrb(near_mem$nmio_master_wstrb),
		      .nmio_master_wlast(near_mem$nmio_master_wlast),
		      .nmio_master_bready(near_mem$nmio_master_bready),
		      .nmio_master_arvalid(near_mem$nmio_master_arvalid),
		      .nmio_master_arid(near_mem$nmio_master_arid),
		      .nmio_master_araddr(near_mem$nmio_master_araddr),
		      .nmio_master_arlen(near_mem$nmio_master_arlen),
		      .nmio_master_arsize(near_mem$nmio_master_arsize),
		      .nmio_master_arburst(near_mem$nmio_master_arburst),
		      .nmio_master_arlock(near_mem$nmio_master_arlock),
		      .nmio_master_arcache(near_mem$nmio_master_arcache),
		      .nmio_master_arprot(near_mem$nmio_master_arprot),
		      .nmio_master_arqos(near_mem$nmio_master_arqos),
		      .nmio_master_arregion(near_mem$nmio_master_arregion),
		      .nmio_master_rready(near_mem$nmio_master_rready),
		      .dmem_master_HADDR(near_mem$dmem_master_HADDR),
		      .dmem_master_HBURST(near_mem$dmem_master_HBURST),
		      .dmem_master_HMASTLOCK(near_mem$dmem_master_HMASTLOCK),
		      .dmem_master_HPROT(near_mem$dmem_master_HPROT),
		      .dmem_master_HSIZE(near_mem$dmem_master_HSIZE),
		      .dmem_master_HTRANS(near_mem$dmem_master_HTRANS),
		      .dmem_master_HWDATA(near_mem$dmem_master_HWDATA),
		      .dmem_master_HWRITE(near_mem$dmem_master_HWRITE),
		      .dmem_dma_server_awready(near_mem$dmem_dma_server_awready),
		      .dmem_dma_server_wready(near_mem$dmem_dma_server_wready),
		      .dmem_dma_server_bvalid(near_mem$dmem_dma_server_bvalid),
		      .dmem_dma_server_bid(near_mem$dmem_dma_server_bid),
		      .dmem_dma_server_bresp(near_mem$dmem_dma_server_bresp),
		      .dmem_dma_server_arready(near_mem$dmem_dma_server_arready),
		      .dmem_dma_server_rvalid(near_mem$dmem_dma_server_rvalid),
		      .dmem_dma_server_rid(near_mem$dmem_dma_server_rid),
		      .dmem_dma_server_rdata(near_mem$dmem_dma_server_rdata),
		      .dmem_dma_server_rresp(near_mem$dmem_dma_server_rresp),
		      .dmem_dma_server_rlast(near_mem$dmem_dma_server_rlast),
		      .RDY_server_fence_i_request_put(),
		      .RDY_server_fence_i_response_get(),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_set_watch_tohost(),
		      .mv_tohost_value(near_mem$mv_tohost_value),
		      .RDY_mv_tohost_value());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_clint_addr_addr(soc_map$m_is_clint_addr_addr),
		    .m_is_dtcm_addr_addr(soc_map$m_is_dtcm_addr_addr),
		    .m_is_itcm_addr_addr(soc_map$m_is_itcm_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_nmio_addr_addr(soc_map$m_is_nmio_addr_addr),
		    .m_is_tcm_addr_addr(soc_map$m_is_tcm_addr_addr),
		    .m_clint_addr_base(),
		    .m_clint_addr_size(),
		    .m_clint_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_itcm_addr_base(),
		    .m_itcm_addr_size(),
		    .m_itcm_addr_lim(),
		    .m_is_itcm_addr(),
		    .m_dtcm_addr_base(),
		    .m_dtcm_addr_size(),
		    .m_dtcm_addr_lim(),
		    .m_is_dtcm_addr(),
		    .m_is_tcm_addr(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_nmio_addr(),
		    .m_is_clint_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_reqs$ENQ),
					       .DEQ(stage1_f_reset_reqs$DEQ),
					       .CLR(stage1_f_reset_reqs$CLR),
					       .FULL_N(stage1_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_rsps$ENQ),
					       .DEQ(stage1_f_reset_rsps$DEQ),
					       .CLR(stage1_f_reset_rsps$CLR),
					       .FULL_N(stage1_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_reqs$ENQ),
					       .DEQ(stage2_f_reset_reqs$DEQ),
					       .CLR(stage2_f_reset_reqs$CLR),
					       .FULL_N(stage2_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_rsps$ENQ),
					       .DEQ(stage2_f_reset_rsps$DEQ),
					       .CLR(stage2_f_reset_rsps$CLR),
					       .FULL_N(stage2_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_reqs$ENQ),
					       .DEQ(stage3_f_reset_reqs$DEQ),
					       .CLR(stage3_f_reset_reqs$CLR),
					       .FULL_N(stage3_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_rsps$ENQ),
					       .DEQ(stage3_f_reset_rsps$DEQ),
					       .CLR(stage3_f_reset_rsps$CLR),
					       .FULL_N(stage3_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // submodule stageD_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stageD_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageD_f_reset_reqs$ENQ),
					       .DEQ(stageD_f_reset_reqs$DEQ),
					       .CLR(stageD_f_reset_reqs$CLR),
					       .FULL_N(stageD_f_reset_reqs$FULL_N),
					       .EMPTY_N(stageD_f_reset_reqs$EMPTY_N));

  // submodule stageD_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stageD_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageD_f_reset_rsps$ENQ),
					       .DEQ(stageD_f_reset_rsps$DEQ),
					       .CLR(stageD_f_reset_rsps$CLR),
					       .FULL_N(stageD_f_reset_rsps$FULL_N),
					       .EMPTY_N(stageD_f_reset_rsps$EMPTY_N));

  // submodule stageF_branch_predictor
  mkBranch_Predictor stageF_branch_predictor(.CLK(CLK),
					     .RST_N(RST_N),
					     .bp_train_cf_info(stageF_branch_predictor$bp_train_cf_info),
					     .bp_train_instr(stageF_branch_predictor$bp_train_instr),
					     .bp_train_is_i32_not_i16(stageF_branch_predictor$bp_train_is_i32_not_i16),
					     .bp_train_pc(stageF_branch_predictor$bp_train_pc),
					     .predict_req_pc(stageF_branch_predictor$predict_req_pc),
					     .predict_rsp_instr(stageF_branch_predictor$predict_rsp_instr),
					     .predict_rsp_is_i32_not_i16(stageF_branch_predictor$predict_rsp_is_i32_not_i16),
					     .EN_reset(stageF_branch_predictor$EN_reset),
					     .EN_predict_req(stageF_branch_predictor$EN_predict_req),
					     .EN_bp_train(stageF_branch_predictor$EN_bp_train),
					     .RDY_reset(),
					     .RDY_predict_req(),
					     .predict_rsp(stageF_branch_predictor$predict_rsp),
					     .RDY_bp_train());

  // submodule stageF_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stageF_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageF_f_reset_reqs$ENQ),
					       .DEQ(stageF_f_reset_reqs$DEQ),
					       .CLR(stageF_f_reset_reqs$CLR),
					       .FULL_N(stageF_f_reset_reqs$FULL_N),
					       .EMPTY_N(stageF_f_reset_reqs$EMPTY_N));

  // submodule stageF_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stageF_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageF_f_reset_rsps$ENQ),
					       .DEQ(stageF_f_reset_rsps$DEQ),
					       .CLR(stageF_f_reset_rsps$CLR),
					       .FULL_N(stageF_f_reset_rsps$FULL_N),
					       .EMPTY_N(stageF_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 &&
	     rg_state != 4'd13 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_debug_run_redundant
  assign CAN_FIRE_RL_rl_debug_run_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run_redundant =
	     CAN_FIRE_RL_rl_debug_run_redundant &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_debug_halt
  assign CAN_FIRE_RL_rl_debug_halt =
	     f_run_halt_reqs$EMPTY_N && !f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_halt =
	     CAN_FIRE_RL_rl_debug_halt && !WILL_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_debug_halt_redundant
  assign CAN_FIRE_RL_rl_debug_halt_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     !f_run_halt_reqs$D_OUT &&
	     (rg_state == 4'd0 || rg_state == 4'd1 || rg_state == 4'd2 ||
	      rg_state == 4'd3) ;
  assign WILL_FIRE_RL_rl_debug_halt_redundant =
	     CAN_FIRE_RL_rl_debug_halt_redundant &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_debug_read_gpr
  assign CAN_FIRE_RL_rl_debug_read_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_gpr_reqs$D_OUT[37] ;
  assign WILL_FIRE_RL_rl_debug_read_gpr = CAN_FIRE_RL_rl_debug_read_gpr ;

  // rule RL_rl_debug_write_gpr
  assign CAN_FIRE_RL_rl_debug_write_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_gpr_reqs$D_OUT[37] ;
  assign WILL_FIRE_RL_rl_debug_write_gpr = CAN_FIRE_RL_rl_debug_write_gpr ;

  // rule RL_rl_debug_gpr_access_busy
  assign CAN_FIRE_RL_rl_debug_gpr_access_busy =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_gpr_access_busy =
	     CAN_FIRE_RL_rl_debug_gpr_access_busy ;

  // rule RL_rl_debug_read_csr
  assign CAN_FIRE_RL_rl_debug_read_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_csr_reqs$D_OUT[44] ;
  assign WILL_FIRE_RL_rl_debug_read_csr = CAN_FIRE_RL_rl_debug_read_csr ;

  // rule RL_rl_debug_run
  assign CAN_FIRE_RL_rl_debug_run =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     f_run_halt_rsps$FULL_N &&
	     f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run =
	     CAN_FIRE_RL_rl_debug_run &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_debug_write_csr
  assign CAN_FIRE_RL_rl_debug_write_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_csr_reqs$D_OUT[44] ;
  assign WILL_FIRE_RL_rl_debug_write_csr =
	     CAN_FIRE_RL_rl_debug_write_csr && !WILL_FIRE_RL_rl_debug_run ;

  // rule RL_rl_debug_csr_access_busy
  assign CAN_FIRE_RL_rl_debug_csr_access_busy =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_csr_access_busy =
	     CAN_FIRE_RL_rl_debug_csr_access_busy ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd4 && !stage3_rg_full && stage2_rg_full &&
	     NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1826 &&
	     (x_out_trap_info_exc_code__h12088 != 4'd3 ||
	      !csr_regfile$dcsr_break_enters_debug) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     rg_state == 4'd5 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d506 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = CAN_FIRE_RL_rl_stage1_CSRR_W ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd7 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d521 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_9_908_AND_NOT_stageF_rg_full_301_ETC___d1909 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1927 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1935 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = CAN_FIRE_RL_rl_stage1_FENCE_I ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1941 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = CAN_FIRE_RL_rl_stage1_FENCE ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1947 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_13_2_AND_csr_regfile_wfi_resume__ETC___d1952 ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd13 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_6_956_AND_NOT_stageF_rg_full_301_ETC___d1957 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_trap_BREAK_to_Debug_Mode
  assign CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     f_run_halt_rsps$FULL_N &&
	     rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1960 &&
	     x_out_trap_info_exc_code__h12088 == 4'd3 &&
	     csr_regfile$dcsr_break_enters_debug ;
  assign WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_reset_from_Debug_Module
  assign CAN_FIRE_RL_rl_reset_from_Debug_Module =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_from_Debug_Module =
	     CAN_FIRE_RL_rl_reset_from_Debug_Module &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_trap_fetch &&
	     !WILL_FIRE_RL_rl_reset_from_WFI &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_finish_FENCE &&
	     !WILL_FIRE_RL_rl_finish_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_trap &&
	     !WILL_FIRE_RL_rl_stage1_trap &&
	     !WILL_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_BREAK_cache_flush_finish
  assign CAN_FIRE_RL_rl_BREAK_cache_flush_finish =
	     f_run_halt_rsps$FULL_N && rg_state == 4'd2 ;
  assign WILL_FIRE_RL_rl_BREAK_cache_flush_finish =
	     CAN_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd4 &&
	     stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1974 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_stage1_interrupt =
	     CAN_FIRE_RL_rl_stage1_interrupt &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_stage1_stop
  assign CAN_FIRE_RL_rl_stage1_stop =
	     rg_state == 4'd4 &&
	     NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1991 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign WILL_FIRE_RL_rl_stage1_stop =
	     CAN_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stageF_f_reset_rsps$EMPTY_N &&
	     stageD_f_reset_rsps$EMPTY_N &&
	     stage1_f_reset_rsps_i_notEmpty__447_AND_stage2_ETC___d1461 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1537 &&
	     rg_state_9_EQ_4_538_AND_stage3_rg_full_2_OR_st_ETC___d1550 &&
	     (NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1560 ||
	      IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1561 ||
	      stage2_rg_full ||
	      stage3_rg_full) ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_debug_halt &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     imem_rg_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__425__ETC___d1437 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_f_reset_rsps$FULL_N && stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_stageD_rl_reset
  assign CAN_FIRE_RL_stageD_rl_reset =
	     stageD_f_reset_reqs$EMPTY_N && stageD_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageD_rl_reset = CAN_FIRE_RL_stageD_rl_reset ;

  // rule RL_stageF_rl_reset
  assign CAN_FIRE_RL_stageF_rl_reset =
	     stageF_f_reset_reqs$EMPTY_N && stageF_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageF_rl_reset = CAN_FIRE_RL_stageF_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_csr_regfile$mav_csr_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ;
  assign MUX_csr_regfile$write_dpc_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_f_run_halt_rsps$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_imem_rg_cache_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_rg_cache_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ;
  assign MUX_imem_rg_cache_b16$write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_rg_pc$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1669 ;
  assign MUX_rg_next_pc$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1532 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_step_count$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h28249 or
	  IF_csr_regfile_read_csr_rg_trap_instr_852_BITS_ETC___d1900)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_852_BITS_ETC___d1900;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h28249;
    endcase
  end
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 =
	     rg_stop_req ? 3'd3 : 3'd4 ;
  assign MUX_f_csr_rsps$enq_1__VAL_3 =
	     { 1'd1, csr_regfile$read_csr_port2[31:0] } ;
  assign MUX_f_gpr_rsps$enq_1__VAL_3 = { 1'd1, gpr_regfile$read_rs1_port2 } ;
  assign MUX_imem_rg_cache_addr$write_1__VAL_1 =
	     (near_mem$imem_valid && !near_mem$imem_exc) ?
	       near_mem$imem_pc :
	       32'h00000001 ;
  assign MUX_imem_rg_cache_addr$write_1__VAL_2 =
	     near_mem$imem_exc ? 32'h00000001 : near_mem$imem_pc ;
  assign MUX_imem_rg_tval$write_1__VAL_1 =
	     (NOT_soc_map_m_pc_reset_value__469_BITS_1_TO_0__ETC___d1484 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h21372 :
	       soc_map$m_pc_reset_value[31:0] ;
  assign MUX_imem_rg_tval$write_1__VAL_2 =
	     (NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d1749 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h25263 :
	       stageF_branch_predictor$predict_rsp ;
  assign MUX_imem_rg_tval$write_1__VAL_3 =
	     (NOT_rg_next_pc_911_BITS_1_TO_0_912_EQ_0b0_913__ETC___d1919 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h34631 :
	       rg_next_pc ;
  assign MUX_imem_rg_tval$write_1__VAL_4 =
	     (NOT_csr_regfile_read_dpc__013_BITS_1_TO_0_014__ETC___d2021 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h36763 :
	       csr_regfile$read_dpc ;
  assign MUX_imem_rg_tval$write_1__VAL_5 = near_mem$imem_pc + 32'd4 ;
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     (NOT_soc_map_m_pc_reset_value__469_BITS_1_TO_0__ETC___d1484 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h21372 :
	       addr_of_b32__h21244 ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     (NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d1749 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h25263 :
	       addr_of_b32__h25135 ;
  assign MUX_near_mem$imem_req_2__VAL_4 =
	     (NOT_rg_next_pc_911_BITS_1_TO_0_912_EQ_0b0_913__ETC___d1919 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h34631 :
	       addr_of_b32__h34503 ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     (NOT_csr_regfile_read_dpc__013_BITS_1_TO_0_014__ETC___d2021 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h36763 :
	       addr_of_b32__h36635 ;
  assign MUX_rg_state$write_1__VAL_2 = rg_run_on_reset ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_1 ? 4'd9 : 4'd5 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     csr_regfile$access_permitted_2 ? 4'd9 : 4'd5 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { stage1_rg_stage_input[305:274],
	       4'd2,
	       stage1_rg_stage_input[268] ?
		 stage1_rg_stage_input[263:232] :
		 trap_info_tval__h12083 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { stage2_rg_stage2[167:136],
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[95:64] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[268] ?
		 stage1_rg_stage_input[267:232] :
		 { alu_outputs_exc_code__h10158, trap_info_tval__h12083 } } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { stage1_rg_stage_input[305:274], x_exc_code__h35443, 32'd0 } ;
  assign MUX_rg_trap_instr$write_1__VAL_2 = stage1_rg_stage_input[231:200] ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1673 &&
	     stageD_rg_full ||
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1770 ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1513 ?
	       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	       (IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 ||
		stage2_rg_stage2[103:101] != 3'd0 &&
		IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728 &&
		stage2_rg_full) :
	       stage2_rg_stage2[103:101] != 3'd0 &&
	       IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728 &&
	       stage2_rg_full ;
  assign MUX_stage3_rg_full$write_1__VAL_2 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506) ;
  assign MUX_stageD_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 ||
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1517 &&
	     stageD_rg_full ;
  assign MUX_stageF_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 ?
	       NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1788 ||
	       IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1517 &&
	       stageD_rg_full :
	       (IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1517 &&
		stageD_rg_full ||
		!near_mem$imem_valid ||
		NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319) &&
	       stageF_rg_full ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       debug_hart_put_other_req_put ;
  assign cfg_verbosity$EN =
	     EN_set_verbosity || EN_debug_hart_put_other_req_put ;

  // register imem_rg_cache_addr
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__VAL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_rg_cache_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  near_mem$imem_pc or MUX_imem_rg_cache_b16$write_1__PSEL_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_1;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_cache_addr$D_IN = near_mem$imem_pc;
      MUX_imem_rg_cache_b16$write_1__PSEL_1:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_1;
      default: imem_rg_cache_addr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_cache_addr$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_cache_b16
  assign imem_rg_cache_b16$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_cache_b16$EN =
	     MUX_imem_rg_cache_b16$write_1__PSEL_1 && near_mem$imem_valid &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_pc
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  rg_next_pc or WILL_FIRE_RL_rl_debug_run or csr_regfile$read_dpc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_pc$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_pc$D_IN = stageF_branch_predictor$predict_rsp;
      MUX_imem_rg_pc$write_1__SEL_3: imem_rg_pc$D_IN = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run: imem_rg_pc$D_IN = csr_regfile$read_dpc;
      default: imem_rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register imem_rg_tval
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_tval$write_1__VAL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_rg_tval$write_1__VAL_2 or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  MUX_imem_rg_tval$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_debug_run or
	  MUX_imem_rg_tval$write_1__VAL_4 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_1;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_2;
      MUX_imem_rg_pc$write_1__SEL_3:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_3;
      WILL_FIRE_RL_rl_debug_run:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_4;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_5;
      default: imem_rg_tval$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = stage1_rg_stage_input[305:274] ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h9514 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_epoch
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  new_epoch__h20813 or
	  MUX_imem_rg_cache_b16$write_1__PSEL_1 or
	  WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  rg_epoch$D_IN = new_epoch__h20813;
      MUX_imem_rg_cache_b16$write_1__PSEL_1:
	  rg_epoch$D_IN = new_epoch__h20813;
      WILL_FIRE_RL_rl_reset_start: rg_epoch$D_IN = 2'd0;
      default: rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_11 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h9313 or
	  MUX_rg_next_pc$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_ret_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h9313;
      MUX_rg_next_pc$write_1__SEL_2: rg_next_pc$D_IN = x_out_next_pc__h9313;
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      default: rg_next_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1669 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = 1'd0 ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_11 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_4 or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_regfile$write_dpc_1__SEL_2 or
	  WILL_FIRE_RL_rl_BREAK_cache_flush_finish or
	  MUX_imem_rg_cache_b16$write_1__PSEL_1 or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__SEL_11 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_csr_regfile$write_dpc_1__SEL_2: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_BREAK_cache_flush_finish: rg_state$D_IN = 4'd3;
      MUX_imem_rg_cache_b16$write_1__PSEL_1: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 4'd5;
      MUX_rg_state$write_1__SEL_1 || MUX_rg_state$write_1__SEL_11:
	  rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd8;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd13;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1532 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_step_count
  assign rg_step_count$D_IN = !MUX_rg_step_count$write_1__SEL_4 ;
  assign rg_step_count$EN =
	     (WILL_FIRE_RL_rl_finish_FENCE ||
	      WILL_FIRE_RL_rl_finish_FENCE_I ||
	      WILL_FIRE_RL_rl_pipe) &&
	     stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1776 ||
	     _dand2rg_step_count$EN_write ||
	     (WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_xRET) &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stop_req
  assign rg_stop_req$D_IN = !MUX_rg_step_count$write_1__SEL_4 ;
  assign rg_stop_req$EN =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_debug_halt ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     WILL_FIRE_RL_rl_stage2_nonpipe ?
	       stage2_rg_stage2[135:104] :
	       stage1_rg_stage_input[231:200] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap ||
    WILL_FIRE_RL_rl_debug_run:
	stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ;

  // register stage1_rg_stage_input
  assign stage1_rg_stage_input$D_IN =
	     { stageD_rg_data[137:106],
	       stageD_rg_data[103:102],
	       stageD_rg_data[105:104],
	       stageD_rg_data[101:64],
	       _theResult____h5541,
	       stageD_rg_data[47:0],
	       _theResult____h5541[6:0],
	       _theResult____h5541[11:7],
	       _theResult____h5541[19:15],
	       _theResult____h5541[24:20],
	       _theResult____h5541[31:27],
	       _theResult____h5541[31:20],
	       _theResult____h5541[14:12],
	       _theResult____h5541[31:27],
	       _theResult____h5541[31:25],
	       decoded_instr_funct10__h23678,
	       _theResult____h5541[31:20],
	       decoded_instr_imm12_S__h23680,
	       decoded_instr_imm13_SB__h23681,
	       _theResult____h5541[31:12],
	       decoded_instr_imm21_UJ__h23683,
	       _theResult____h5541[27:20],
	       _theResult____h5541[26:25] } ;
  assign stage1_rg_stage_input$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1673 &&
	     stageD_rg_full ;

  // register stage2_rg_full
  always@(stage2_f_reset_reqs$EMPTY_N or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    stage2_f_reset_reqs$EMPTY_N: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap ||
    WILL_FIRE_RL_rl_debug_run:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap ||
	     stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end || stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       stage1_rg_stage_input[305:274],
	       IF_stage1_rg_stage_input_17_BITS_271_TO_270_18_ETC___d1608 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1598 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage3_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN = MUX_stage3_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_debug_run:
	stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[167:104],
	       stage2_rg_stage2[169:168],
	       1'd1,
	       x_out_data_to_stage3_rd__h8361,
	       x_out_data_to_stage3_rd_val__h8362 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506) ;

  // register stageD_rg_data
  assign stageD_rg_data$D_IN =
	     { imem_rg_pc,
	       stageF_rg_epoch,
	       stageF_rg_priv,
	       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279 ||
	       imem_rg_pc[1:0] == 2'b0 &&
	       imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	       near_mem$imem_instr[1:0] == 2'b11,
	       near_mem$imem_exc,
	       near_mem$imem_exc_code,
	       imem_rg_tval,
	       d_instr__h19358,
	       stageF_branch_predictor$predict_rsp } ;
  assign stageD_rg_data$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 ;

  // register stageD_rg_full
  always@(WILL_FIRE_RL_stageD_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageD_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stageD_rl_reset: stageD_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageD_rg_full$D_IN = MUX_stageD_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap ||
    WILL_FIRE_RL_rl_debug_run:
	stageD_rg_full$D_IN = 1'd0;
    default: stageD_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageD_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stageD_rl_reset ;

  // register stageF_rg_epoch
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_rg_epoch or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  new_epoch__h20813 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_epoch$D_IN = 2'd0;
    MUX_imem_rg_cache_addr$write_1__SEL_2:
	stageF_rg_epoch$D_IN = stageF_rg_epoch;
    MUX_imem_rg_cache_addr$write_1__SEL_1:
	stageF_rg_epoch$D_IN = new_epoch__h20813;
    WILL_FIRE_RL_rl_trap_fetch: stageF_rg_epoch$D_IN = new_epoch__h20813;
    WILL_FIRE_RL_rl_WFI_resume: stageF_rg_epoch$D_IN = new_epoch__h20813;
    WILL_FIRE_RL_rl_finish_FENCE: stageF_rg_epoch$D_IN = new_epoch__h20813;
    WILL_FIRE_RL_rl_finish_FENCE_I: stageF_rg_epoch$D_IN = new_epoch__h20813;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_epoch$D_IN = new_epoch__h20813;
    WILL_FIRE_RL_rl_debug_run: stageF_rg_epoch$D_IN = new_epoch__h20813;
    default: stageF_rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stageF_rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_stageF_rl_reset ;

  // register stageF_rg_full
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageF_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageF_rg_full$D_IN = MUX_stageF_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_debug_run:
	stageF_rg_full$D_IN = 1'd1;
    default: stageF_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stageF_rl_reset ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stageF_rg_priv
  assign stageF_rg_priv$D_IN = rg_cur_priv ;
  assign stageF_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h27971 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  assign csr_regfile$csr_ret_actions_from_priv =
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1925 ?
	       2'b11 :
	       2'b0 ;
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[35:32] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[67:36] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[31:0] ;
  assign csr_regfile$dcsr_break_enters_debug_cur_priv = rg_cur_priv ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_csr_regfile$mav_csr_write_1__SEL_2) ?
	       rg_trap_instr[31:20] :
	       f_csr_reqs$D_OUT[43:32] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  rs1_val__h27157 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_2 or
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 or
	  WILL_FIRE_RL_rl_debug_write_csr or f_csr_reqs$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  csr_regfile$mav_csr_write_word = rs1_val__h27157;
      MUX_csr_regfile$mav_csr_write_1__SEL_2:
	  csr_regfile$mav_csr_write_word =
	      MUX_csr_regfile$mav_csr_write_2__VAL_2;
      WILL_FIRE_RL_rl_debug_write_csr:
	  csr_regfile$mav_csr_write_word = f_csr_reqs$D_OUT[31:0];
      default: csr_regfile$mav_csr_write_word =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = f_csr_reqs$D_OUT[43:32] ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  always@(MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_stop or
	  MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 or
	  WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd3;
      WILL_FIRE_RL_rl_stage1_stop:
	  csr_regfile$write_dcsr_cause_priv_cause =
	      MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd1;
      default: csr_regfile$write_dcsr_cause_priv_cause =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$write_dcsr_cause_priv_priv =
	     (WILL_FIRE_RL_rl_stage1_stop ||
	      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode) ?
	       rg_cur_priv :
	       2'b11 ;
  assign csr_regfile$write_dpc_pc =
	     MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 ?
	       soc_map$m_pc_reset_value[31:0] :
	       stage1_rg_stage_input[305:274] ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ||
	     WILL_FIRE_RL_rl_debug_write_csr ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_write_dpc =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_write_dcsr_cause_priv =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_csr_reqs
  assign f_csr_reqs$D_IN = debug_hart_csr_mem_server_request_put ;
  assign f_csr_reqs$ENQ = EN_debug_hart_csr_mem_server_request_put ;
  assign f_csr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_reqs$CLR = 1'b0 ;

  // submodule f_csr_rsps
  always@(WILL_FIRE_RL_rl_debug_csr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_csr or
	  WILL_FIRE_RL_rl_debug_read_csr or MUX_f_csr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_csr_access_busy: f_csr_rsps$D_IN = 33'h0AAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_csr: f_csr_rsps$D_IN = 33'h1AAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_csr:
	  f_csr_rsps$D_IN = MUX_f_csr_rsps$enq_1__VAL_3;
      default: f_csr_rsps$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_csr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_rsps$DEQ = EN_debug_hart_csr_mem_server_response_get ;
  assign f_csr_rsps$CLR = 1'b0 ;

  // submodule f_gpr_reqs
  assign f_gpr_reqs$D_IN = debug_hart_gpr_mem_server_request_put ;
  assign f_gpr_reqs$ENQ = EN_debug_hart_gpr_mem_server_request_put ;
  assign f_gpr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_reqs$CLR = 1'b0 ;

  // submodule f_gpr_rsps
  always@(WILL_FIRE_RL_rl_debug_gpr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  WILL_FIRE_RL_rl_debug_read_gpr or MUX_f_gpr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_gpr_access_busy: f_gpr_rsps$D_IN = 33'h0AAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_gpr: f_gpr_rsps$D_IN = 33'h1AAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_gpr:
	  f_gpr_rsps$D_IN = MUX_f_gpr_rsps$enq_1__VAL_3;
      default: f_gpr_rsps$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_gpr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_rsps$DEQ = EN_debug_hart_gpr_mem_server_response_get ;
  assign f_gpr_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = debug_hart_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_debug_hart_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__425__ETC___d1437 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_rsps$DEQ = EN_debug_hart_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_run_halt_reqs
  assign f_run_halt_reqs$D_IN = debug_hart_server_run_halt_request_put ;
  assign f_run_halt_reqs$ENQ = EN_debug_hart_server_run_halt_request_put ;
  assign f_run_halt_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_halt ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_reqs$CLR = 1'b0 ;

  // submodule f_run_halt_rsps
  assign f_run_halt_rsps$D_IN = !MUX_f_run_halt_rsps$enq_1__SEL_1 ;
  assign f_run_halt_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_rsps$DEQ = EN_debug_hart_server_run_halt_response_get ;
  assign f_run_halt_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = f_gpr_reqs$D_OUT[36:32] ;
  assign gpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign gpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or
	  rg_trap_instr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_1 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd = rg_trap_instr[11:7];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd = f_gpr_reqs$D_OUT[36:32];
      MUX_gpr_regfile$write_rd_1__SEL_1:
	  gpr_regfile$write_rd_rd = stage3_rg_stage3[36:32];
      default: gpr_regfile$write_rd_rd = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or
	  csr_regfile$read_csr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_1 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd_val = csr_regfile$read_csr[31:0];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd_val = f_gpr_reqs$D_OUT[31:0];
      MUX_gpr_regfile$write_rd_1__SEL_1:
	  gpr_regfile$write_rd_rd_val = stage3_rg_stage3[31:0];
      default: gpr_regfile$write_rd_rd_val =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_debug_write_gpr ;

  // submodule near_mem
  assign near_mem$dmem_dma_server_araddr = dmem_dma_server_araddr ;
  assign near_mem$dmem_dma_server_arburst = dmem_dma_server_arburst ;
  assign near_mem$dmem_dma_server_arcache = dmem_dma_server_arcache ;
  assign near_mem$dmem_dma_server_arid = dmem_dma_server_arid ;
  assign near_mem$dmem_dma_server_arlen = dmem_dma_server_arlen ;
  assign near_mem$dmem_dma_server_arlock = dmem_dma_server_arlock ;
  assign near_mem$dmem_dma_server_arprot = dmem_dma_server_arprot ;
  assign near_mem$dmem_dma_server_arqos = dmem_dma_server_arqos ;
  assign near_mem$dmem_dma_server_arregion = dmem_dma_server_arregion ;
  assign near_mem$dmem_dma_server_arsize = dmem_dma_server_arsize ;
  assign near_mem$dmem_dma_server_arvalid = dmem_dma_server_arvalid ;
  assign near_mem$dmem_dma_server_awaddr = dmem_dma_server_awaddr ;
  assign near_mem$dmem_dma_server_awburst = dmem_dma_server_awburst ;
  assign near_mem$dmem_dma_server_awcache = dmem_dma_server_awcache ;
  assign near_mem$dmem_dma_server_awid = dmem_dma_server_awid ;
  assign near_mem$dmem_dma_server_awlen = dmem_dma_server_awlen ;
  assign near_mem$dmem_dma_server_awlock = dmem_dma_server_awlock ;
  assign near_mem$dmem_dma_server_awprot = dmem_dma_server_awprot ;
  assign near_mem$dmem_dma_server_awqos = dmem_dma_server_awqos ;
  assign near_mem$dmem_dma_server_awregion = dmem_dma_server_awregion ;
  assign near_mem$dmem_dma_server_awsize = dmem_dma_server_awsize ;
  assign near_mem$dmem_dma_server_awvalid = dmem_dma_server_awvalid ;
  assign near_mem$dmem_dma_server_bready = dmem_dma_server_bready ;
  assign near_mem$dmem_dma_server_rready = dmem_dma_server_rready ;
  assign near_mem$dmem_dma_server_wdata = dmem_dma_server_wdata ;
  assign near_mem$dmem_dma_server_wlast = dmem_dma_server_wlast ;
  assign near_mem$dmem_dma_server_wstrb = dmem_dma_server_wstrb ;
  assign near_mem$dmem_dma_server_wvalid = dmem_dma_server_wvalid ;
  assign near_mem$dmem_master_HRDATA = dmem_master_HRDATA ;
  assign near_mem$dmem_master_HREADY = dmem_master_HREADY ;
  assign near_mem$dmem_master_HRESP = dmem_master_HRESP ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h9513 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h9514[6:0] ;
  assign near_mem$dmem_req_f3 = MUX_rg_trap_instr$write_1__VAL_2[14:12] ;
  assign near_mem$dmem_req_op =
	     (stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	      stage1_rg_stage_input[151:145] == 7'b0000011) ?
	       2'd0 :
	       ((stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
		 stage1_rg_stage_input[151:145] == 7'b0100011) ?
		  2'd1 :
		  2'd2) ;
  assign near_mem$dmem_req_store_value = x_out_data_to_stage2_val2__h9515 ;
  assign near_mem$imem_dma_server_araddr = imem_dma_server_araddr ;
  assign near_mem$imem_dma_server_arburst = imem_dma_server_arburst ;
  assign near_mem$imem_dma_server_arcache = imem_dma_server_arcache ;
  assign near_mem$imem_dma_server_arid = imem_dma_server_arid ;
  assign near_mem$imem_dma_server_arlen = imem_dma_server_arlen ;
  assign near_mem$imem_dma_server_arlock = imem_dma_server_arlock ;
  assign near_mem$imem_dma_server_arprot = imem_dma_server_arprot ;
  assign near_mem$imem_dma_server_arqos = imem_dma_server_arqos ;
  assign near_mem$imem_dma_server_arregion = imem_dma_server_arregion ;
  assign near_mem$imem_dma_server_arsize = imem_dma_server_arsize ;
  assign near_mem$imem_dma_server_arvalid = imem_dma_server_arvalid ;
  assign near_mem$imem_dma_server_awaddr = imem_dma_server_awaddr ;
  assign near_mem$imem_dma_server_awburst = imem_dma_server_awburst ;
  assign near_mem$imem_dma_server_awcache = imem_dma_server_awcache ;
  assign near_mem$imem_dma_server_awid = imem_dma_server_awid ;
  assign near_mem$imem_dma_server_awlen = imem_dma_server_awlen ;
  assign near_mem$imem_dma_server_awlock = imem_dma_server_awlock ;
  assign near_mem$imem_dma_server_awprot = imem_dma_server_awprot ;
  assign near_mem$imem_dma_server_awqos = imem_dma_server_awqos ;
  assign near_mem$imem_dma_server_awregion = imem_dma_server_awregion ;
  assign near_mem$imem_dma_server_awsize = imem_dma_server_awsize ;
  assign near_mem$imem_dma_server_awvalid = imem_dma_server_awvalid ;
  assign near_mem$imem_dma_server_bready = imem_dma_server_bready ;
  assign near_mem$imem_dma_server_rready = imem_dma_server_rready ;
  assign near_mem$imem_dma_server_wdata = imem_dma_server_wdata ;
  assign near_mem$imem_dma_server_wlast = imem_dma_server_wlast ;
  assign near_mem$imem_dma_server_wstrb = imem_dma_server_wstrb ;
  assign near_mem$imem_dma_server_wvalid = imem_dma_server_wvalid ;
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5 or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  MUX_near_mem$imem_req_2__VAL_4 or
	  WILL_FIRE_RL_rl_debug_run or MUX_near_mem$imem_req_2__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_rg_tval$write_1__VAL_5;
      MUX_imem_rg_pc$write_1__SEL_3:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_4;
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  assign near_mem$nmio_master_arready = nmio_master_arready ;
  assign near_mem$nmio_master_awready = nmio_master_awready ;
  assign near_mem$nmio_master_bid = nmio_master_bid ;
  assign near_mem$nmio_master_bresp = nmio_master_bresp ;
  assign near_mem$nmio_master_bvalid = nmio_master_bvalid ;
  assign near_mem$nmio_master_rdata = nmio_master_rdata ;
  assign near_mem$nmio_master_rid = nmio_master_rid ;
  assign near_mem$nmio_master_rlast = nmio_master_rlast ;
  assign near_mem$nmio_master_rresp = nmio_master_rresp ;
  assign near_mem$nmio_master_rvalid = nmio_master_rvalid ;
  assign near_mem$nmio_master_wready = nmio_master_wready ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$set_watch_tohost_tohost_addr =
	     set_watch_tohost_tohost_addr ;
  assign near_mem$set_watch_tohost_watch_tohost =
	     set_watch_tohost_watch_tohost ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1626 ;
  assign near_mem$EN_server_fence_i_request_put =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ;
  assign near_mem$EN_server_fence_i_response_get =
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = CAN_FIRE_RL_rl_stage1_FENCE ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_set_watch_tohost = EN_set_watch_tohost ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign soc_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign soc_map$m_is_itcm_addr_addr = 32'h0 ;
  assign soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign soc_map$m_is_nmio_addr_addr = 32'h0 ;
  assign soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = MUX_rg_trap_instr$write_1__VAL_2[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 =
	     !MUX_rg_trap_instr$write_1__VAL_2[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h9514 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h9515 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1640 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageD_f_reset_reqs
  assign stageD_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageD_f_reset_reqs$DEQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageD_f_reset_rsps
  assign stageD_f_reset_rsps$ENQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stageD_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageF_branch_predictor
  assign stageF_branch_predictor$bp_train_cf_info =
	     (stage1_rg_full &&
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219) ?
	       { CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q18,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[151:145] != 7'b1100011 ||
		 IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297,
		 x_out_cf_info_fallthru_PC__h12981,
		 alu_outputs_cf_info_taken_PC__h12974 } :
	       99'h6AAAAAAAAAAAAAAAAAAAAAAAA ;
  assign stageF_branch_predictor$bp_train_instr = d_instr__h19358 ;
  assign stageF_branch_predictor$bp_train_is_i32_not_i16 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign stageF_branch_predictor$bp_train_pc = imem_rg_pc ;
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  rg_next_pc or WILL_FIRE_RL_rl_debug_run or csr_regfile$read_dpc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  stageF_branch_predictor$predict_req_pc =
	      soc_map$m_pc_reset_value[31:0];
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  stageF_branch_predictor$predict_req_pc =
	      stageF_branch_predictor$predict_rsp;
      MUX_imem_rg_pc$write_1__SEL_3:
	  stageF_branch_predictor$predict_req_pc = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run:
	  stageF_branch_predictor$predict_req_pc = csr_regfile$read_dpc;
      default: stageF_branch_predictor$predict_req_pc =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign stageF_branch_predictor$predict_rsp_instr = d_instr__h19358 ;
  assign stageF_branch_predictor$predict_rsp_is_i32_not_i16 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign stageF_branch_predictor$EN_reset = 1'b0 ;
  assign stageF_branch_predictor$EN_predict_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign stageF_branch_predictor$EN_bp_train =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 ;

  // submodule stageF_f_reset_reqs
  assign stageF_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageF_f_reset_reqs$DEQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageF_f_reset_rsps
  assign stageF_f_reset_rsps$ENQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stageF_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 =
	     next_pc__h9297 == stage1_rg_stage_input[183:152] ;
  assign IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d1296 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1293 ?
	       { 16'b0,
		 imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ?
		   near_mem$imem_instr[31:16] :
		   imem_rg_cache_b16 } :
	       near_mem$imem_instr ;
  assign IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1561 =
	     !IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 &&
	     stageF_rg_full &&
	     (!near_mem$imem_valid ||
	      NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319) ;
  assign IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 =
	     IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 ||
	     !stageF_rg_full ||
	     near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326 ;
  assign IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1624 =
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 &&
	     stage1_rg_stage_input[151:145] != 7'b0010011 &&
	     stage1_rg_stage_input[151:145] != 7'b0110011 &&
	     stage1_rg_stage_input[151:145] != 7'b0110111 &&
	     stage1_rg_stage_input[151:145] != 7'b0010111 ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_852_BITS_ETC___d1900 =
	     csr_regfile$read_csr[31:0] | rs1_val__h27971 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1148 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:42] == 6'b100011 &&
	      stageD_rg_data[38:37] == 2'b0) ?
	       instr__h18735 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b10 &&
		 stageD_rg_data[47:44] == 4'b1001 &&
		 stageD_rg_data[43:39] == 5'd0 &&
		 stageD_rg_data[38:34] == 5'd0) ?
		  instr__h19073 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1150 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:42] == 6'b100011 &&
	      stageD_rg_data[38:37] == 2'b10) ?
	       instr__h18463 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
		 stageD_rg_data[47:42] == 6'b100011 &&
		 stageD_rg_data[38:37] == 2'b01) ?
		  instr__h18599 :
		  IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1148) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1152 =
	     (csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1019 &&
	      stageD_rg_data[38:34] != 5'd0) ?
	       instr__h18232 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
		 stageD_rg_data[47:42] == 6'b100011 &&
		 stageD_rg_data[38:37] == 2'b11) ?
		  instr__h18327 :
		  IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1150) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1153 =
	     (csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1013 &&
	      stageD_rg_data[38:34] != 5'd0) ?
	       instr__h18113 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1152 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1155 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b100 &&
	      stageD_rg_data[43:42] == 2'b01 &&
	      imm6__h16259 != 6'd0 &&
	      !stageD_rg_data[44]) ?
	       instr__h17818 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
		 stageD_rg_data[47:45] == 3'b100 &&
		 stageD_rg_data[43:42] == 2'b10) ?
		  instr__h17935 :
		  IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1153) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1156 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b100 &&
	      stageD_rg_data[43:42] == 2'b0 &&
	      imm6__h16259 != 6'd0 &&
	      !stageD_rg_data[44]) ?
	       instr__h17625 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1155 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1157 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b10 &&
	      stageD_rg_data[47:45] == 3'b0 &&
	      stageD_rg_data[43:39] != 5'd0 &&
	      imm6__h16259 != 6'd0 &&
	      !stageD_rg_data[44]) ?
	       instr__h17432 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1156 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1159 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b011 &&
	      stageD_rg_data[43:39] == 5'd2 &&
	      nzimm10__h16883 != 10'd0) ?
	       instr__h17087 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b0 &&
		 stageD_rg_data[47:45] == 3'b0 &&
		 nzimm10__h17098 != 10'd0) ?
		  instr__h17259 :
		  IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1157) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1160 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b0 &&
	      stageD_rg_data[43:39] != 5'd0 &&
	      imm6__h16259 != 6'd0 ||
	      csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b0 &&
	      stageD_rg_data[43:39] == 5'd0 &&
	      imm6__h16259 == 6'd0) ?
	       instr__h16650 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1159 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1161 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b011 &&
	      stageD_rg_data[43:39] != 5'd0 &&
	      stageD_rg_data[43:39] != 5'd2 &&
	      imm6__h16259 != 6'd0) ?
	       instr__h16521 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1160 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1163 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b111) ?
	       instr__h15999 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
		 stageD_rg_data[47:45] == 3'b010 &&
		 stageD_rg_data[43:39] != 5'd0) ?
		  instr__h16337 :
		  IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1161) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1164 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b110) ?
	       instr__h15682 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1163 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1165 =
	     (csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1019 &&
	      stageD_rg_data[38:34] == 5'd0) ?
	       instr__h15617 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1164 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1166 =
	     (csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1013 &&
	      stageD_rg_data[38:34] == 5'd0) ?
	       instr__h15501 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1165 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1167 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b001) ?
	       instr__h15111 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1166 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1168 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b01 &&
	      stageD_rg_data[47:45] == 3'b101) ?
	       instr__h14769 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1167 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1169 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b0 &&
	      stageD_rg_data[47:45] == 3'b110) ?
	       instr__h14540 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1168 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1170 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b0 &&
	      stageD_rg_data[47:45] == 3'b010) ?
	       instr__h14345 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1169 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1171 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b10 &&
	      stageD_rg_data[47:45] == 3'b110) ?
	       instr__h14153 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1170 ;
  assign IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d1297 =
	     (imem_rg_pc[1:0] == 2'b0 &&
	      imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h19382 :
	       IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d1296 ;
  assign IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d1813 =
	     (stage1_rg_stage_input[112:110] == 3'd0) ?
	       stage1_rg_stage_input[144:140] != 5'd0 ||
	       stage1_rg_stage_input[139:135] != 5'd0 ||
	       stage1_rg_stage_input[87:76] == 12'b0 ||
	       stage1_rg_stage_input[87:76] == 12'b000000000001 ||
	       (rg_cur_priv != 2'b11 ||
		stage1_rg_stage_input[87:76] != 12'b001100000010) &&
	       NOT_rg_cur_priv_6_EQ_0b11_63_32_AND_NOT_rg_cur_ETC___d648 :
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b010 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b011 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ;
  assign IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286 =
	     rs1_val_bypassed__h5273 == rs2_val_bypassed__h5279 ;
  assign IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288 =
	     (rs1_val_bypassed__h5273 ^ 32'h80000000) <
	     (rs2_val_bypassed__h5279 ^ 32'h80000000) ;
  assign IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290 =
	     rs1_val_bypassed__h5273 < rs2_val_bypassed__h5279 ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1820 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       stage1_rg_stage_input[231] ||
	       stage1_rg_stage_input[229:226] != 4'b0 ||
	       stage1_rg_stage_input[151:145] == 7'b0010011 &&
	       stage1_rg_stage_input[225] :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1857 =
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d398 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       stage1_rg_stage_input[231] ||
	       stage1_rg_stage_input[229:226] != 4'b0 ||
	       stage1_rg_stage_input[151:145] == 7'b0010011 &&
	       stage1_rg_stage_input[225] :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q8 ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'd0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 ||
	       (stage1_rg_stage_input[151:145] != 7'b0110011 ||
		stage1_rg_stage_input[104:98] != 7'b0000001) &&
	       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d398 ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'd0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       (stage1_rg_stage_input[151:145] != 7'b1100111 ||
		stage1_rg_stage_input[112:110] != 3'd0) ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'd0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 :
	       stage1_rg_stage_input[151:145] == 7'b0110011 &&
	       stage1_rg_stage_input[104:98] == 7'b0000001 ||
	       (((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		  stage1_rg_stage_input[151:145] == 7'b0110011) &&
		 (stage1_rg_stage_input[112:110] == 3'b001 ||
		  stage1_rg_stage_input[112:110] == 3'b101)) ?
		  !stage1_rg_stage_input[231] &&
		  stage1_rg_stage_input[229:226] == 4'b0 &&
		  (stage1_rg_stage_input[151:145] != 7'b0010011 ||
		   !stage1_rg_stage_input[225]) :
		  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11) ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'd0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 &&
	       stage1_rg_stage_input[112:110] == 3'd0 ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d849 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       alu_outputs___1_val1__h9823 :
	       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848 ;
  assign IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d850 =
	     (stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[104:98] == 7'b0000001) ?
	       rs1_val_bypassed__h5273 :
	       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d849 ;
  assign IF_stage1_rg_stage_input_17_BITS_271_TO_270_18_ETC___d1608 =
	     { stage1_rg_stage_input[231:200],
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16,
	       data_to_stage2_rd__h9502,
	       data_to_stage2_addr__h9503,
	       x_out_data_to_stage2_val1__h9514,
	       data_to_stage2_val2__h9505 } ;
  assign IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1517 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1513 ?
	       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	       !IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 &&
	       stageF_rg_full &&
	       (!near_mem$imem_valid ||
		NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319) :
	       stage1_rg_full ;
  assign IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1537 =
	     IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1517 &&
	     stageD_rg_full ||
	     !stageF_rg_full ||
	     NOT_near_mem_imem_valid_302_OR_NOT_imem_rg_pc__ETC___d1522 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1532 ||
	     imem_rg_pc[1:0] == 2'b0 ||
	     near_mem$imem_exc ||
	     !imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	     near_mem$imem_instr[17:16] != 2'b11 ;
  assign IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1673 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1513 ?
	       !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	       IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 ||
	       !stageF_rg_full ||
	       near_mem$imem_valid &&
	       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326 :
	       !stage1_rg_full ;
  assign IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 =
	     (IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1673 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326 ;
  assign IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1770 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1513 ?
	       stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	       IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1561 :
	       stage1_rg_full ;
  assign IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d222 =
	     x_out_bypass_rd__h9011 == stage1_rg_stage_input[139:135] ;
  assign IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d224 =
	     x_out_bypass_rd__h9011 == stage1_rg_stage_input[134:130] ;
  assign NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 =
	     cur_verbosity__h3823 > 4'd1 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1504 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 ||
	      !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1555 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1551 ||
	      !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1800 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ;
  assign NOT_csr_regfile_read_dpc__013_BITS_1_TO_0_014__ETC___d2021 =
	     csr_regfile$read_dpc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h36635 == near_mem$imem_pc ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 &&
	     near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_273___d1274 &&
	     imem_rg_cache_b16[1:0] == 2'b11 ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1293 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     (imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	      near_mem$imem_instr[17:16] != 2'b11 ||
	      imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 &&
	      imem_rg_cache_b16[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1312 =
	     !near_mem$imem_exc &&
	     (imem_rg_pc[1:0] == 2'b0 ||
	      !imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 ||
	      !near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_273___d1274 ||
	      imem_rg_cache_b16[1:0] != 2'b11) &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319 =
	     NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1312 &&
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1316 &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_near_mem_imem_valid_302_OR_NOT_imem_rg_pc__ETC___d1522 =
	     !near_mem$imem_valid ||
	     (!imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 ||
	      !near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_273___d1274 ||
	      imem_rg_cache_b16[1:0] != 2'b11) &&
	     (!imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 ||
	      imem_rg_cache_b16[1:0] == 2'b11) ;
  assign NOT_rg_cur_priv_6_EQ_0b11_63_32_AND_NOT_rg_cur_ETC___d648 =
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[21]) &&
	     (rg_cur_priv != 2'b0 || !csr_regfile$read_misa[13]) ||
	     stage1_rg_stage_input[87:76] != 12'b000100000101 ;
  assign NOT_rg_next_pc_911_BITS_1_TO_0_912_EQ_0b0_913__ETC___d1919 =
	     rg_next_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h34503 == near_mem$imem_pc ;
  assign NOT_soc_map_m_pc_reset_value__469_BITS_1_TO_0__ETC___d1484 =
	     soc_map$m_pc_reset_value[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h21244 == near_mem$imem_pc ;
  assign NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1551 =
	     !stage1_rg_full || stage1_rg_stage_input[268] ||
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414 ;
  assign NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1554 =
	     (NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1551 ||
	      !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1560 =
	     NOT_stage1_rg_full_16_83_OR_stage1_rg_stage_in_ETC___d1554 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1555 ||
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546) ;
  assign NOT_stage1_rg_stage_input_17_BITS_109_TO_105_5_ETC___d392 =
	     (stage1_rg_stage_input[109:105] != 5'b00010 ||
	      stage1_rg_stage_input[134:130] != 5'd0) &&
	     stage1_rg_stage_input[109:105] != 5'b00011 &&
	     stage1_rg_stage_input[109:105] != 5'b0 &&
	     stage1_rg_stage_input[109:105] != 5'b00001 &&
	     stage1_rg_stage_input[109:105] != 5'b01100 &&
	     stage1_rg_stage_input[109:105] != 5'b01000 &&
	     stage1_rg_stage_input[109:105] != 5'b00100 &&
	     stage1_rg_stage_input[109:105] != 5'b10000 &&
	     stage1_rg_stage_input[109:105] != 5'b11000 &&
	     stage1_rg_stage_input[109:105] != 5'b10100 &&
	     stage1_rg_stage_input[109:105] != 5'b11100 ||
	     stage1_rg_stage_input[112:110] != 3'b010 ;
  assign NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d340 =
	     (stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[230]) &&
	     (stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[230]) &&
	     CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q6 ;
  assign NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d620 =
	     stage1_rg_stage_input[112:110] != 3'd0 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[231:228] != 4'b0 &&
	     stage1_rg_stage_input[231:228] != 4'b1000 ;
  assign NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d627 =
	     stage1_rg_stage_input[112:110] != 3'b001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[87:76] != 12'b0 ;
  assign NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546 =
	     !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ;
  assign NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1968 =
	     !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476 ||
	     stage1_rg_stage_input[268] ||
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414 ;
  assign NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1982 =
	     (NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546 &&
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557) &&
	     (rg_stop_req || rg_step_count) ;
  assign NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1986 =
	     (NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1982 ||
	      csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1983) &&
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1968 &&
	     !stage2_rg_full ;
  assign NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1991 =
	     NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1986 &&
	     !stage3_rg_full &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      (stage1_rg_stage_input[268] ||
	       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 &&
	       IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414 ||
	       !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219) &&
	      NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546) ;
  assign NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d674 =
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) &&
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 ;
  assign NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d1799 =
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d506 =
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     (stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101) ;
  assign NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d521 =
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     (stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b011 ||
	      stage1_rg_stage_input[112:110] == 3'b111) ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1724 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     (rg_stop_req || rg_step_count) ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1731 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1724 ||
	     csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1726 ||
	     stage2_rg_stage2[103:101] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728 &&
	     stage2_rg_full ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1731 ||
	     !stage1_rg_full ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 ||
	     !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	     IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1784 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1724 ||
	     csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1726 ||
	     stage2_rg_stage2[103:101] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728 &&
	     stage2_rg_full ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1788 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1784 ||
	     !stage1_rg_full ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 ||
	     !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	     IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 =
	     !stage2_rg_full || stage2_rg_stage2[103:101] == 3'd0 ||
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210 ||
	     !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d222 &&
	     !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d224 ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     (stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 &&
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 =
	     !stage2_rg_full || stage2_rg_stage2[103:101] == 3'd0 ||
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210 ||
	     !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d222 ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 =
	     !stage2_rg_full || stage2_rg_stage2[103:101] == 3'd0 ||
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210 ||
	     !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d224 ;
  assign NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d738 =
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     (stage1_rg_stage_input[151:145] == 7'b1100011 ||
	      stage1_rg_stage_input[151:145] == 7'b1101111 ||
	      stage1_rg_stage_input[151:145] == 7'b1100111 ||
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       stage1_rg_stage_input[104:98] != 7'b0000001) &&
	      (stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110111 ||
	       stage1_rg_stage_input[151:145] == 7'b0010111)) ;
  assign NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137 =
	     (stage2_rg_stage2[103:101] == 3'd1 ||
	      stage2_rg_stage2[103:101] == 3'd4 ||
	      stage2_rg_stage2[103:101] == 3'd2) &&
	     near_mem$dmem_valid &&
	     near_mem$dmem_exc ;
  assign NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d157 =
	     (stage2_rg_stage2[103:101] != 3'd1 &&
	      stage2_rg_stage2[103:101] != 3'd4 &&
	      stage2_rg_stage2[103:101] != 3'd2 ||
	      !near_mem$dmem_valid ||
	      !near_mem$dmem_exc) &&
	     stage2_rg_stage2[103:101] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d155 ;
  assign NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d1749 =
	     stageF_branch_predictor$predict_rsp[1:0] != 2'b0 &&
	     near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h25135 == near_mem$imem_pc ;
  assign SEXT_stage1_rg_stage_input_17_BITS_87_TO_76_50___d703 =
	     { {20{stage1_rg_stage_input_BITS_87_TO_76__q12[11]}},
	       stage1_rg_stage_input_BITS_87_TO_76__q12 } ;
  assign SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028 =
	     { {4{offset__h15626[8]}}, offset__h15626 } ;
  assign SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999 =
	     { {9{offset__h14716[11]}}, offset__h14716 } ;
  assign _dand2rg_step_count$EN_write =
	     (WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap) &&
	     stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1772 &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ;
  assign _theResult_____1_fst__h10732 =
	     (stage1_rg_stage_input[112:110] == 3'd0 &&
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[230]) ?
	       rd_val___1__h10728 :
	       _theResult_____1_fst__h10739 ;
  assign _theResult_____1_fst__h10767 =
	     rs1_val_bypassed__h5273 & _theResult___snd_snd__h13386 ;
  assign _theResult____h35741 =
	     (delta_CPI_instrs__h35740 == 64'd0) ?
	       delta_CPI_instrs___1__h35785 :
	       delta_CPI_instrs__h35740 ;
  assign _theResult____h5541 = x_out_data_to_stage1_instr__h13769 ;
  assign _theResult___snd_snd__h13386 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       SEXT_stage1_rg_stage_input_17_BITS_87_TO_76_50___d703 :
	       rs2_val_bypassed__h5279 ;
  assign addr_of_b32___1__h21372 = addr_of_b32__h21244 + 32'd4 ;
  assign addr_of_b32___1__h25263 = addr_of_b32__h25135 + 32'd4 ;
  assign addr_of_b32___1__h34631 = addr_of_b32__h34503 + 32'd4 ;
  assign addr_of_b32___1__h36763 = addr_of_b32__h36635 + 32'd4 ;
  assign addr_of_b32__h21244 = { soc_map$m_pc_reset_value[31:2], 2'd0 } ;
  assign addr_of_b32__h25135 =
	     { stageF_branch_predictor$predict_rsp[31:2], 2'd0 } ;
  assign addr_of_b32__h34503 = { rg_next_pc[31:2], 2'd0 } ;
  assign addr_of_b32__h36635 = { csr_regfile$read_dpc[31:2], 2'd0 } ;
  assign alu_outputs___1_addr__h9705 =
	     IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 ?
	       branch_target__h9682 :
	       x_out_cf_info_fallthru_PC__h12981 ;
  assign alu_outputs___1_addr__h9928 =
	     rs1_val_bypassed__h5273 +
	     { {20{stage1_rg_stage_input_BITS_75_TO_64__q5[11]}},
	       stage1_rg_stage_input_BITS_75_TO_64__q5 } ;
  assign alu_outputs___1_exc_code__h10116 =
	     (stage1_rg_stage_input[112:110] == 3'd0) ?
	       ((stage1_rg_stage_input[144:140] == 5'd0 &&
		 stage1_rg_stage_input[139:135] == 5'd0) ?
		  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val1__h10120 =
	     stage1_rg_stage_input[112] ?
	       { 27'd0, stage1_rg_stage_input[139:135] } :
	       rs1_val_bypassed__h5273 ;
  assign alu_outputs___1_val1__h10141 =
	     { 25'd0, stage1_rg_stage_input[104:98] } ;
  assign alu_outputs___1_val1__h9823 =
	     (stage1_rg_stage_input[112:110] == 3'b001) ?
	       rd_val__h13287 :
	       (stage1_rg_stage_input[230] ?
		  rd_val__h13360 :
		  rd_val__h13338) ;
  assign alu_outputs___1_val1__h9861 =
	     (stage1_rg_stage_input[112:110] == 3'd0 &&
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       !stage1_rg_stage_input[230])) ?
	       rd_val___1__h10647 :
	       _theResult_____1_fst__h10732 ;
  assign alu_outputs_cf_info_taken_PC__h12974 =
	     x_out_cf_info_taken_PC__h12982 ;
  assign branch_target__h9682 =
	     stage1_rg_stage_input[305:274] +
	     { {19{stage1_rg_stage_input_BITS_63_TO_51__q1[12]}},
	       stage1_rg_stage_input_BITS_63_TO_51__q1 } ;
  assign cpi__h35743 = x__h35742 / 64'd10 ;
  assign cpifrac__h35744 = x__h35742 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_request_put__425__ETC___d1437 =
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stageF_f_reset_reqs$FULL_N &&
	     stageD_f_reset_reqs$FULL_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1726 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_6_49_ETC___d1983 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546 &&
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557) ;
  assign csr_regfile_read_csr_mcycle__5_MINUS_rg_start__ETC___d1996 =
	     delta_CPI_cycles__h35739 * 64'd10 ;
  assign csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1013 =
	     csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b10 &&
	     stageD_rg_data[47:44] == 4'b1000 &&
	     stageD_rg_data[43:39] != 5'd0 ;
  assign csr_regfile_read_misa__4_BIT_2_35_AND_stageD_r_ETC___d1019 =
	     csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b10 &&
	     stageD_rg_data[47:44] == 4'b1001 &&
	     stageD_rg_data[43:39] != 5'd0 ;
  assign cur_verbosity__h3823 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign d_instr__h19358 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279 ?
	       instr_out___1__h19360 :
	       IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d1297 ;
  assign data_to_stage2_addr__h9503 = x_out_data_to_stage2_addr__h9513 ;
  assign data_to_stage2_rd__h9502 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       5'd0 :
	       stage1_rg_stage_input[144:140] ;
  assign data_to_stage2_val2__h9505 = x_out_data_to_stage2_val2__h9515 ;
  assign decoded_instr_funct10__h23678 =
	     { _theResult____h5541[31:25], _theResult____h5541[14:12] } ;
  assign decoded_instr_imm12_S__h23680 =
	     { _theResult____h5541[31:25], _theResult____h5541[11:7] } ;
  assign decoded_instr_imm13_SB__h23681 =
	     { _theResult____h5541[31],
	       _theResult____h5541[7],
	       _theResult____h5541[30:25],
	       _theResult____h5541[11:8],
	       1'b0 } ;
  assign decoded_instr_imm21_UJ__h23683 =
	     { _theResult____h5541[31],
	       _theResult____h5541[19:12],
	       _theResult____h5541[20],
	       _theResult____h5541[30:21],
	       1'b0 } ;
  assign delta_CPI_cycles__h35739 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h35785 = delta_CPI_instrs__h35740 + 64'd1 ;
  assign delta_CPI_instrs__h35740 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr__h9898 =
	     rs1_val_bypassed__h5273 +
	     SEXT_stage1_rg_stage_input_17_BITS_87_TO_76_50___d703 ;
  assign fall_through_pc__h9296 =
	     stage1_rg_stage_input[305:274] +
	     (stage1_rg_stage_input[269] ? 32'd4 : 32'd2) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1316 =
	     imem_rg_pc[1:0] == 2'b0 ||
	     (!imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 ||
	      imem_rg_cache_b16[1:0] == 2'b11) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 =
	     imem_rg_pc[1:0] == 2'b0 || !near_mem$imem_valid ||
	     near_mem$imem_exc ||
	     !imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ;
  assign imem_rg_pc_BITS_31_TO_2_4_EQ_imem_rg_cache_add_ETC___d1271 =
	     imem_rg_pc[31:2] == imem_rg_cache_addr[31:2] ;
  assign imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 =
	     imem_rg_pc[31:2] == near_mem$imem_pc[31:2] ;
  assign imm12__h14009 = { 4'd0, offset__h13881 } ;
  assign imm12__h14346 = { 5'd0, offset__h14288 } ;
  assign imm12__h16261 = { {6{imm6__h16259[5]}}, imm6__h16259 } ;
  assign imm12__h16885 = { {2{nzimm10__h16883[9]}}, nzimm10__h16883 } ;
  assign imm12__h17100 = { 2'd0, nzimm10__h17098 } ;
  assign imm12__h17296 = { 7'b0, stageD_rg_data[38:34] } ;
  assign imm12__h17641 = { 7'b0100000, stageD_rg_data[38:34] } ;
  assign imm20__h16389 = { {14{imm6__h16259[5]}}, imm6__h16259 } ;
  assign imm6__h16259 = { stageD_rg_data[44], stageD_rg_data[38:34] } ;
  assign instr___1__h13843 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[33:32] == 2'b10 &&
	      stageD_rg_data[43:39] != 5'd0 &&
	      stageD_rg_data[47:45] == 3'b010) ?
	       instr__h14008 :
	       IF_csr_regfile_read_misa__4_BIT_2_35_AND_stage_ETC___d1171 ;
  assign instr__h14008 =
	     { imm12__h14009, 8'd18, stageD_rg_data[43:39], 7'b0000011 } ;
  assign instr__h14153 =
	     { 4'd0,
	       stageD_rg_data[40:39],
	       stageD_rg_data[44],
	       stageD_rg_data[38:34],
	       8'd18,
	       offset_BITS_4_TO_0___h14277,
	       7'b0100011 } ;
  assign instr__h14345 =
	     { imm12__h14346, rs1__h14347, 3'b010, rd__h14348, 7'b0000011 } ;
  assign instr__h14540 =
	     { 5'd0,
	       stageD_rg_data[37],
	       stageD_rg_data[44],
	       rd__h14348,
	       rs1__h14347,
	       3'b010,
	       offset_BITS_4_TO_0___h14708,
	       7'b0100011 } ;
  assign instr__h14769 =
	     { SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[20],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[10:1],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[11],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[19:12],
	       12'd111 } ;
  assign instr__h15111 =
	     { SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[20],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[10:1],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[11],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d999[19:12],
	       12'd239 } ;
  assign instr__h15501 = { 12'd0, stageD_rg_data[43:39], 15'd103 } ;
  assign instr__h15617 = { 12'd0, stageD_rg_data[43:39], 15'd231 } ;
  assign instr__h15682 =
	     { SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[12],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[10:5],
	       5'd0,
	       rs1__h14347,
	       3'b0,
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[4:1],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[11],
	       7'b1100011 } ;
  assign instr__h15999 =
	     { SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[12],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[10:5],
	       5'd0,
	       rs1__h14347,
	       3'b001,
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[4:1],
	       SEXT_stageD_rg_data_30_BIT_44_47_CONCAT_stageD_ETC___d1028[11],
	       7'b1100011 } ;
  assign instr__h16337 =
	     { imm12__h16261, 8'd0, stageD_rg_data[43:39], 7'b0010011 } ;
  assign instr__h16521 =
	     { imm20__h16389, stageD_rg_data[43:39], 7'b0110111 } ;
  assign instr__h16650 =
	     { imm12__h16261,
	       stageD_rg_data[43:39],
	       3'b0,
	       stageD_rg_data[43:39],
	       7'b0010011 } ;
  assign instr__h17087 =
	     { imm12__h16885,
	       stageD_rg_data[43:39],
	       3'b0,
	       stageD_rg_data[43:39],
	       7'b0010011 } ;
  assign instr__h17259 = { imm12__h17100, 8'd16, rd__h14348, 7'b0010011 } ;
  assign instr__h17432 =
	     { imm12__h17296,
	       stageD_rg_data[43:39],
	       3'b001,
	       stageD_rg_data[43:39],
	       7'b0010011 } ;
  assign instr__h17625 =
	     { imm12__h17296, rs1__h14347, 3'b101, rs1__h14347, 7'b0010011 } ;
  assign instr__h17818 =
	     { imm12__h17641, rs1__h14347, 3'b101, rs1__h14347, 7'b0010011 } ;
  assign instr__h17935 =
	     { imm12__h16261, rs1__h14347, 3'b111, rs1__h14347, 7'b0010011 } ;
  assign instr__h18113 =
	     { 7'b0,
	       stageD_rg_data[38:34],
	       8'd0,
	       stageD_rg_data[43:39],
	       7'b0110011 } ;
  assign instr__h18232 =
	     { 7'b0,
	       stageD_rg_data[38:34],
	       stageD_rg_data[43:39],
	       3'b0,
	       stageD_rg_data[43:39],
	       7'b0110011 } ;
  assign instr__h18327 =
	     { 7'b0,
	       rd__h14348,
	       rs1__h14347,
	       3'b111,
	       rs1__h14347,
	       7'b0110011 } ;
  assign instr__h18463 =
	     { 7'b0,
	       rd__h14348,
	       rs1__h14347,
	       3'b110,
	       rs1__h14347,
	       7'b0110011 } ;
  assign instr__h18599 =
	     { 7'b0,
	       rd__h14348,
	       rs1__h14347,
	       3'b100,
	       rs1__h14347,
	       7'b0110011 } ;
  assign instr__h18735 =
	     { 7'b0100000,
	       rd__h14348,
	       rs1__h14347,
	       3'b0,
	       rs1__h14347,
	       7'b0110011 } ;
  assign instr__h19073 =
	     { 12'b000000000001,
	       stageD_rg_data[43:39],
	       3'b0,
	       stageD_rg_data[43:39],
	       7'b1110011 } ;
  assign instr_out___1__h19360 =
	     { near_mem$imem_instr[15:0], imem_rg_cache_b16 } ;
  assign instr_out___1__h19382 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1324 =
	     near_mem$imem_exc ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1279 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326 =
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1324 ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d1293 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_273___d1274 =
	     near_mem$imem_pc == imem_rg_pc + 32'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d1421 =
	     near_mem$imem_valid && near_mem$imem_exc &&
	     near_mem$imem_exc_code != 4'd0 &&
	     near_mem$imem_exc_code != 4'd1 &&
	     near_mem$imem_exc_code != 4'd2 &&
	     near_mem$imem_exc_code != 4'd3 &&
	     near_mem$imem_exc_code != 4'd4 &&
	     near_mem$imem_exc_code != 4'd5 &&
	     near_mem$imem_exc_code != 4'd6 &&
	     near_mem$imem_exc_code != 4'd7 &&
	     near_mem$imem_exc_code != 4'd8 &&
	     near_mem$imem_exc_code != 4'd9 &&
	     near_mem$imem_exc_code != 4'd11 &&
	     near_mem$imem_exc_code != 4'd12 &&
	     near_mem$imem_exc_code != 4'd13 &&
	     near_mem$imem_exc_code != 4'd15 ;
  assign new_epoch__h20813 = rg_epoch + 2'd1 ;
  assign next_pc___1__h11201 = stage1_rg_stage_input[305:274] + 32'd2 ;
  assign next_pc__h11198 = stage1_rg_stage_input[305:274] + 32'd4 ;
  assign next_pc__h9297 = x_out_next_pc__h9313 ;
  assign next_pc__h9711 =
	     stage1_rg_stage_input[305:274] +
	     { {11{stage1_rg_stage_input_BITS_30_TO_10__q2[20]}},
	       stage1_rg_stage_input_BITS_30_TO_10__q2 } ;
  assign next_pc__h9739 = { eaddr__h9898[31:1], 1'd0 } ;
  assign nzimm10__h16883 =
	     { stageD_rg_data[44],
	       stageD_rg_data[36:35],
	       stageD_rg_data[37],
	       stageD_rg_data[34],
	       stageD_rg_data[38],
	       4'b0 } ;
  assign nzimm10__h17098 =
	     { stageD_rg_data[42:39],
	       stageD_rg_data[44:43],
	       stageD_rg_data[37],
	       stageD_rg_data[38],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h14277 = { stageD_rg_data[43:41], 2'b0 } ;
  assign offset_BITS_4_TO_0___h14708 =
	     { stageD_rg_data[43:42], stageD_rg_data[38], 2'b0 } ;
  assign offset__h13881 =
	     { stageD_rg_data[35:34],
	       stageD_rg_data[44],
	       stageD_rg_data[38:36],
	       2'b0 } ;
  assign offset__h14288 =
	     { stageD_rg_data[37],
	       stageD_rg_data[44:42],
	       stageD_rg_data[38],
	       2'b0 } ;
  assign offset__h14716 =
	     { stageD_rg_data[44],
	       stageD_rg_data[40],
	       stageD_rg_data[42:41],
	       stageD_rg_data[38],
	       stageD_rg_data[39],
	       stageD_rg_data[34],
	       stageD_rg_data[43],
	       stageD_rg_data[37:35],
	       1'b0 } ;
  assign offset__h15626 =
	     { stageD_rg_data[44],
	       stageD_rg_data[38:37],
	       stageD_rg_data[34],
	       stageD_rg_data[43:42],
	       stageD_rg_data[36:35],
	       1'b0 } ;
  assign rd__h14348 = { 2'b01, stageD_rg_data[36:34] } ;
  assign rd_val___1__h10647 =
	     rs1_val_bypassed__h5273 + _theResult___snd_snd__h13386 ;
  assign rd_val___1__h10728 =
	     rs1_val_bypassed__h5273 - _theResult___snd_snd__h13386 ;
  assign rd_val___1__h10735 =
	     ((rs1_val_bypassed__h5273 ^ 32'h80000000) <
	      (_theResult___snd_snd__h13386 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h10742 =
	     (rs1_val_bypassed__h5273 < _theResult___snd_snd__h13386) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h10749 =
	     rs1_val_bypassed__h5273 ^ _theResult___snd_snd__h13386 ;
  assign rd_val___1__h10756 =
	     rs1_val_bypassed__h5273 | _theResult___snd_snd__h13386 ;
  assign rd_val__h13287 = rs1_val_bypassed__h5273 << shamt__h9810 ;
  assign rd_val__h13338 = rs1_val_bypassed__h5273 >> shamt__h9810 ;
  assign rd_val__h13360 =
	     rs1_val_bypassed__h5273 >> shamt__h9810 |
	     ~(32'hFFFFFFFF >> shamt__h9810) &
	     {32{rs1_val_bypassed__h5273[31]}} ;
  assign rd_val__h9184 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == stage1_rg_stage_input[139:135]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h9265 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == stage1_rg_stage_input[134:130]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h9868 = { stage1_rg_stage_input[50:31], 12'h0 } ;
  assign rd_val__h9882 = stage1_rg_stage_input[305:274] + rd_val__h9868 ;
  assign rg_cur_priv_6_EQ_0b11_63_OR_rg_cur_priv_6_EQ_0_ETC___d586 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     stage1_rg_stage_input[87:76] == 12'b000100000101 ;
  assign rg_state_9_EQ_13_2_AND_csr_regfile_wfi_resume__ETC___d1952 =
	     rg_state == 4'd13 &&
	     (csr_regfile$wfi_resume || rg_stop_req || rg_step_count) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860 =
	     rg_state == 4'd4 &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1857 &&
	     !stage3_rg_full &&
	     !stage2_rg_full ;
  assign rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1935 =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d552 ;
  assign rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1940 =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d538 ;
  assign rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1941 =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1940 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1947 =
	     rg_state_9_EQ_4_538_AND_IF_stage1_rg_stage_inp_ETC___d1860 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d588 ;
  assign rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1803 =
	     rg_state == 4'd4 &&
	     NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d1799 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1800 &&
	     !stage3_rg_full ;
  assign rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1826 =
	     rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1803 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     (stage1_rg_stage_input[268] ||
	      ((stage1_rg_stage_input[151:145] == 7'b1100011) ?
		 stage1_rg_stage_input[112:110] != 3'd0 &&
		 stage1_rg_stage_input[112:110] != 3'b001 &&
		 stage1_rg_stage_input[112:110] != 3'b100 &&
		 stage1_rg_stage_input[112:110] != 3'b101 &&
		 stage1_rg_stage_input[112:110] != 3'b110 &&
		 stage1_rg_stage_input[112:110] != 3'b111 :
		 stage1_rg_stage_input[151:145] != 7'b1101111 &&
		 ((stage1_rg_stage_input[151:145] == 7'b1100111) ?
		    stage1_rg_stage_input[112:110] != 3'd0 :
		    (stage1_rg_stage_input[151:145] != 7'b0110011 ||
		     stage1_rg_stage_input[104:98] != 7'b0000001) &&
		    IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1820))) ;
  assign rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1927 =
	     rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1803 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1925 ;
  assign rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1960 =
	     rg_state_9_EQ_4_538_AND_NOT_stage1_rg_stage_in_ETC___d1826 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign rg_state_9_EQ_4_538_AND_stage3_rg_full_2_OR_st_ETC___d1550 =
	     rg_state == 4'd4 &&
	     (stage3_rg_full || stage2_rg_full || stage1_rg_full ||
	      stageD_rg_full ||
	      stageF_rg_full) &&
	     stage3_rg_full_2_OR_NOT_stage2_rg_full_01_52_O_ETC___d1549 ;
  assign rg_state_9_EQ_6_956_AND_NOT_stageF_rg_full_301_ETC___d1957 =
	     rg_state == 4'd6 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign rg_state_9_EQ_9_908_AND_NOT_stageF_rg_full_301_ETC___d1909 =
	     rg_state == 4'd9 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326) ;
  assign rs1__h14347 = { 2'b01, stageD_rg_data[41:39] } ;
  assign rs1_val__h27157 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 27'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed__h5273 =
	     (stage1_rg_stage_input[139:135] == 5'd0) ? 32'd0 : val__h9186 ;
  assign rs2_val_bypassed__h5279 =
	     (stage1_rg_stage_input[134:130] == 5'd0) ? 32'd0 : val__h9267 ;
  assign shamt__h9810 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       stage1_rg_stage_input[80:76] :
	       rs2_val_bypassed__h5279[4:0] ;
  assign stage1_f_reset_rsps_i_notEmpty__447_AND_stage2_ETC___d1461 =
	     stage1_f_reset_rsps$EMPTY_N && stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset ||
	      imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1455 ||
	      near_mem$imem_instr[17:16] != 2'b11) ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1772 =
	     stage1_rg_full &&
	     (NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417) ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1776 =
	     stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1772 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d1974 =
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1968 &&
	     !stage2_rg_full &&
	     !stage3_rg_full &&
	     (NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546 &&
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557) ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d683 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) &&
	     stage1_rg_stage_input[151:145] == 7'b1100011 ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d688 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) &&
	     (stage1_rg_stage_input[151:145] == 7'b1101111 ||
	      stage1_rg_stage_input[151:145] == 7'b1100111) ;
  assign stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d694 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) &&
	     stage1_rg_stage_input[151:145] == 7'b1101111 ;
  assign stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d747 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     stage1_rg_stage_input[151:145] == 7'b0000011 ;
  assign stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d752 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     stage1_rg_stage_input[151:145] == 7'b0100011 ;
  assign stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d757 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ;
  assign stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d443 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[230]) ||
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[230] ||
	     CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q9 ;
  assign stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d538 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     (stage1_rg_stage_input[231:228] == 4'b0 ||
	      stage1_rg_stage_input[231:228] == 4'b1000) ;
  assign stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d552 =
	     stage1_rg_stage_input[112:110] == 3'b001 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     stage1_rg_stage_input[87:76] == 12'b0 ;
  assign stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d567 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     stage1_rg_stage_input[87:76] == 12'b001100000010 ;
  assign stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d588 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     rg_cur_priv_6_EQ_0b11_63_OR_rg_cur_priv_6_EQ_0_ETC___d586 ;
  assign stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1557 =
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     (stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 &&
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) ;
  assign stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d1925 =
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d567 ;
  assign stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 =
	     stage1_rg_stage_input[271:270] == rg_epoch ;
  assign stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d489 =
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ;
  assign stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d861 =
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ;
  assign stage1_rg_stage_input_BITS_30_TO_10__q2 =
	     stage1_rg_stage_input[30:10] ;
  assign stage1_rg_stage_input_BITS_63_TO_51__q1 =
	     stage1_rg_stage_input[63:51] ;
  assign stage1_rg_stage_input_BITS_75_TO_64__q5 =
	     stage1_rg_stage_input[75:64] ;
  assign stage1_rg_stage_input_BITS_87_TO_76__q12 =
	     stage1_rg_stage_input[87:76] ;
  assign stage2_rg_full_01_AND_IF_stage2_rg_stage2_02_B_ETC___d1576 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_stage2[103:101] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d155 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131 =
	     stage2_rg_full && stage2_rg_stage2[103:101] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_103_TO_101_1_NOT_ne_ETC__q17 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	     stage1_rg_stage_input[268] ||
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402 &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1497 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 ||
	      !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219) &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) ||
	     !rg_stop_req && !rg_step_count ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1509 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1497 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1504 &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 ||
	      !stage2_rg_full) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1513 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1509 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	      NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1527 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1532 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1527 &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 ||
	      !stage2_rg_full) &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     !IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1591 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 &&
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1489 &&
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1591 &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 ||
	      !stage2_rg_full) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1598 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1626 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1624 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1640 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1649 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d738 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1653 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     stage1_rg_stage_input[151:145] == 7'b0000011 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1657 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     stage1_rg_stage_input[151:145] == 7'b0100011 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1661 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1666 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d764 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d772 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1669 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1592 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1510 &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     IF_NOT_stage1_rg_full_16_83_OR_NOT_stage1_rg_s_ETC___d1596 &&
	     !IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 =
	     stage2_rg_full && stage2_rg_stage2[103:101] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d206 &&
	     (IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d222 ||
	      IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d224) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d496 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d508 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d506 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d509 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d508 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d511 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d509 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d523 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     NOT_stage1_rg_stage_input_17_BIT_268_45_22_AND_ETC___d521 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d524 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d523 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d526 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d524 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d542 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d538 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d543 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d542 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d545 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d543 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d556 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d552 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d557 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d556 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d559 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d557 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d571 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d567 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d572 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d571 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d574 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d572 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d592 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d484 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d485 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d588 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d593 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d592 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d595 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d593 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d656 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      stage1_rg_stage_input[151:145] != 7'b0001111 ||
	      NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d620) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      stage1_rg_stage_input[151:145] != 7'b0001111 ||
	      NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d627) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[144:140] != 5'd0 ||
	      stage1_rg_stage_input[139:135] != 5'd0 ||
	      rg_cur_priv != 2'b11 ||
	      stage1_rg_stage_input[87:76] != 12'b001100000010) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[144:140] != 5'd0 ||
	      stage1_rg_stage_input[139:135] != 5'd0 ||
	      NOT_rg_cur_priv_6_EQ_0b11_63_32_AND_NOT_rg_cur_ETC___d648) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d658 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011 &&
	      stage1_rg_stage_input[112:110] != 3'b111) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d656 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d660 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d402) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d414) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d658 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d722 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d472 ||
	      IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476) &&
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	     NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	     !stage1_rg_stage_input[268] &&
	     stage1_rg_stage_input[151:145] == 7'b1100111 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d764 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 &&
	     (stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[104:98] == 7'b0000001 ||
	      stage1_rg_stage_input[151:145] != 7'b0010011 &&
	      stage1_rg_stage_input[151:145] != 7'b0110011 &&
	      stage1_rg_stage_input[151:145] != 7'b0110111 &&
	      stage1_rg_stage_input[151:145] != 7'b0010111) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d772 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[151:145] != 7'b0000011) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[151:145] != 7'b0100011) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226 ||
	      stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      stage1_rg_stage_input[104:98] != 7'b0000001) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133) &&
	     stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_0_04_ETC___d149 ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506) &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1578 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506) &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d163) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1584 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506) &&
	     (cur_verbosity__h3823 != 4'd0 ||
	      csr_regfile$read_csr_minstret[19:0] == 20'd0) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d270 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[103:101] == 3'd0 ||
	      stage2_rg_stage2[103:101] != 3'd1 &&
	      stage2_rg_stage2[103:101] != 3'd4 &&
	      stage2_rg_stage2[103:101] != 3'd2 &&
	      stage2_mbox$valid) ;
  assign stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_0_04_ETC___d149 =
	     stage2_rg_stage2[103:101] != 3'd1 &&
	     stage2_rg_stage2[103:101] != 3'd4 &&
	     stage2_rg_stage2[103:101] != 3'd2 ||
	     !near_mem$dmem_valid ||
	     !near_mem$dmem_exc ;
  assign stage3_rg_full_2_OR_NOT_stage2_rg_full_01_52_O_ETC___d1549 =
	     (stage3_rg_full || !stage2_rg_full ||
	      stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_0_04_ETC___d149) &&
	     (stage3_rg_full || stage2_rg_full || !stage1_rg_full ||
	      NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d1546) ;
  assign stageF_rg_full_301_AND_near_mem_imem_valid_AND_ETC___d1333 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326 &&
	     !near_mem$imem_exc ;
  assign trap_info_tval__h12083 =
	     (stage1_rg_stage_input[151:145] != 7'b1101111 &&
	      stage1_rg_stage_input[151:145] != 7'b1100111 &&
	      (stage1_rg_stage_input[151:145] != 7'b1110011 ||
	       stage1_rg_stage_input[112:110] != 3'd0 ||
	       stage1_rg_stage_input[144:140] != 5'd0 ||
	       stage1_rg_stage_input[139:135] != 5'd0 ||
	       stage1_rg_stage_input[87:76] != 12'b0 &&
	       stage1_rg_stage_input[87:76] != 12'b000000000001)) ?
	       (stage1_rg_stage_input[269] ?
		  stage1_rg_stage_input[231:200] :
		  { 16'd0, stage1_rg_stage_input[199:184] }) :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 ;
  assign val__h9186 =
	     (stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d270 &&
	      IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d222) ?
	       x_out_bypass_rd_val__h9012 :
	       rd_val__h9184 ;
  assign val__h9267 =
	     (stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d270 &&
	      IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d224) ?
	       x_out_bypass_rd_val__h9012 :
	       rd_val__h9265 ;
  assign value__h12149 =
	     stage1_rg_stage_input[268] ?
	       stage1_rg_stage_input[263:232] :
	       trap_info_tval__h12083 ;
  assign x__h35742 =
	     csr_regfile_read_csr_mcycle__5_MINUS_rg_start__ETC___d1996[63:0] /
	     _theResult____h35741 ;
  assign x_exc_code__h35443 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_cf_info_fallthru_PC__h12981 =
	     stage1_rg_stage_input[269] ?
	       next_pc__h11198 :
	       next_pc___1__h11201 ;
  assign x_out_data_to_stage1_instr__h13769 =
	     stageD_rg_data[101] ? stageD_rg_data[63:32] : instr___1__h13843 ;
  assign x_out_data_to_stage2_rd__h9512 =
	     stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ?
	       data_to_stage2_rd__h9502 :
	       5'd0 ;
  assign x_out_data_to_stage2_val2__h9515 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       branch_target__h9682 :
	       rs2_val_bypassed__h5279 ;
  assign x_out_next_pc__h9313 =
	     IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d476 ?
	       data_to_stage2_addr__h9503 :
	       fall_through_pc__h9296 ;
  assign x_out_trap_info_exc_code__h12088 =
	     stage1_rg_stage_input[268] ?
	       stage1_rg_stage_input[267:264] :
	       alu_outputs_exc_code__h10158 ;
  assign y__h28249 = ~rs1_val__h27971 ;
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word32)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h8362 = stage2_rg_stage2[63:32];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h8362 = near_mem$dmem_word32;
      default: x_out_data_to_stage3_rd_val__h8362 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h8361 = stage2_rg_stage2[100:96];
      3'd2: x_out_data_to_stage3_rd__h8361 = 5'd0;
      default: x_out_data_to_stage3_rd__h8361 = stage2_rg_stage2[100:96];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h9011 = stage2_rg_stage2[100:96];
      default: x_out_bypass_rd__h9011 = stage2_rg_stage2[100:96];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd_val__h9012 = stage2_rg_stage2[63:32];
      default: x_out_bypass_rd_val__h9012 = stage2_mbox$word;
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h27971 = rg_csr_val1;
      default: rs1_val__h27971 = { 27'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'd11;
    endcase
  end
  always@(stage1_rg_stage_input or CASE_rg_cur_priv_0b0_8_0b1_9_11__q3)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q3;
      12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 = 4'd3;
      default: CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or alu_outputs___1_exc_code__h10116)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b1100011:
	  alu_outputs_exc_code__h10158 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h10158 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h10158 = alu_outputs___1_exc_code__h10116;
      default: alu_outputs_exc_code__h10158 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$valid or near_mem$dmem_valid)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 =
	      near_mem$dmem_valid;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d155 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d155 =
		   stage2_rg_stage2[103:101] == 3'd3 && !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d163 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d163 =
		   stage2_rg_stage2[103:101] != 3'd3 || stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d193 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[100:96] == 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d193 =
		   stage2_rg_stage2[103:101] == 3'd2;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d198 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[100:96] != 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d198 =
		   stage2_rg_stage2[103:101] != 3'd2;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d206 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[100:96] != 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d206 =
		   stage2_rg_stage2[103:101] != 3'd2 && !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[100:96] == 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210 =
		   stage2_rg_stage2[103:101] == 3'd2 || stage2_mbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290 or
	  IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286 or
	  IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 =
	      !IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286;
      3'b001:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 =
	      IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286;
      3'b100:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 =
	      !IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288;
      3'b101:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 =
	      IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288;
      3'b110:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 =
	      !IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290;
      default: IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d408 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290 or
	  IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286 or
	  IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 =
	      IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286;
      3'b001:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 =
	      !IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d286;
      3'b100:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 =
	      IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288;
      3'b101:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 =
	      !IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d288;
      3'b110:
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 =
	      IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290;
      default: IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   !IF_stage1_rg_stage_input_17_BITS_139_TO_135_21_ETC___d290;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q6 =
	      stage1_rg_stage_input[151:145] != 7'b0010011 &&
	      stage1_rg_stage_input[231] &&
	      stage1_rg_stage_input[230] &&
	      stage1_rg_stage_input[229:225] != 5'b0;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q6 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   stage1_rg_stage_input[151:145] != 7'b0010011 &&
		   stage1_rg_stage_input[231] &&
		   stage1_rg_stage_input[230] &&
		   stage1_rg_stage_input[229:225] != 5'b0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_stage1_rg_stage_input_17_BITS_109_TO_105_5_ETC___d392)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q7 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q7 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q7 =
		   stage1_rg_stage_input[151:145] != 7'b0101111 ||
		   NOT_stage1_rg_stage_input_17_BITS_109_TO_105_5_ETC___d392;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q7 or
	  NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d340)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q8 =
	      NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d340;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q8 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q7;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q9 =
	      stage1_rg_stage_input[151:145] == 7'b0010011 ||
	      !stage1_rg_stage_input[231] ||
	      !stage1_rg_stage_input[230] ||
	      stage1_rg_stage_input[229:225] == 5'b0;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q9 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   (stage1_rg_stage_input[151:145] == 7'b0010011 ||
		    !stage1_rg_stage_input[231] ||
		    !stage1_rg_stage_input[230] ||
		    stage1_rg_stage_input[229:225] == 5'b0);
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q10 =
	      stage1_rg_stage_input[112:110] == 3'd0 ||
	      stage1_rg_stage_input[112:110] == 3'b100 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101 ||
	      stage1_rg_stage_input[112:110] == 3'b010;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q10 =
	      stage1_rg_stage_input[112:110] == 3'd0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b010;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q10 =
		   stage1_rg_stage_input[151:145] == 7'b0101111 &&
		   (stage1_rg_stage_input[109:105] == 5'b00010 &&
		    stage1_rg_stage_input[134:130] == 5'd0 ||
		    stage1_rg_stage_input[109:105] == 5'b00011 ||
		    stage1_rg_stage_input[109:105] == 5'b0 ||
		    stage1_rg_stage_input[109:105] == 5'b00001 ||
		    stage1_rg_stage_input[109:105] == 5'b01100 ||
		    stage1_rg_stage_input[109:105] == 5'b01000 ||
		    stage1_rg_stage_input[109:105] == 5'b00100 ||
		    stage1_rg_stage_input[109:105] == 5'b10000 ||
		    stage1_rg_stage_input[109:105] == 5'b11000 ||
		    stage1_rg_stage_input[109:105] == 5'b10100 ||
		    stage1_rg_stage_input[109:105] == 5'b11100) &&
		   stage1_rg_stage_input[112:110] == 3'b010;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q10 or
	  stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d443)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 =
	      stage1_rg_stage_input_17_BITS_112_TO_110_48_EQ_ETC___d443;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 =
		   stage1_rg_stage_input[151:145] == 7'b0110111 ||
		   stage1_rg_stage_input[151:145] == 7'b0010111 ||
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q10;
    endcase
  end
  always@(stage1_rg_stage_input or
	  next_pc__h9739 or branch_target__h9682 or next_pc__h9711)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011: x_out_cf_info_taken_PC__h12982 = branch_target__h9682;
      7'b1101111: x_out_cf_info_taken_PC__h12982 = next_pc__h9711;
      default: x_out_cf_info_taken_PC__h12982 = next_pc__h9739;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rs1_val_bypassed__h5273 or
	  eaddr__h9898 or
	  alu_outputs___1_addr__h9928 or
	  alu_outputs___1_addr__h9705 or next_pc__h9739 or next_pc__h9711)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011: x_out_data_to_stage2_addr__h9513 = eaddr__h9898;
      7'b0100011:
	  x_out_data_to_stage2_addr__h9513 = alu_outputs___1_addr__h9928;
      7'b1100011:
	  x_out_data_to_stage2_addr__h9513 = alu_outputs___1_addr__h9705;
      7'b1100111: x_out_data_to_stage2_addr__h9513 = next_pc__h9739;
      7'b1101111: x_out_data_to_stage2_addr__h9513 = next_pc__h9711;
      default: x_out_data_to_stage2_addr__h9513 = rs1_val_bypassed__h5273;
    endcase
  end
  always@(stage1_rg_stage_input or data_to_stage2_addr__h9503)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
	      data_to_stage2_addr__h9503;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
		   (stage1_rg_stage_input[151:145] == 7'b1110011 &&
		    stage1_rg_stage_input[112:110] == 3'd0 &&
		    stage1_rg_stage_input[144:140] == 5'd0 &&
		    stage1_rg_stage_input[139:135] == 5'd0 &&
		    stage1_rg_stage_input[87:76] == 12'b000000000001) ?
		     stage1_rg_stage_input[305:274] :
		     32'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult_____1_fst__h10767 or
	  rd_val___1__h10735 or
	  rd_val___1__h10742 or rd_val___1__h10749 or rd_val___1__h10756)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010: _theResult_____1_fst__h10739 = rd_val___1__h10735;
      3'b011: _theResult_____1_fst__h10739 = rd_val___1__h10742;
      3'b100: _theResult_____1_fst__h10739 = rd_val___1__h10749;
      3'b110: _theResult_____1_fst__h10739 = rd_val___1__h10756;
      default: _theResult_____1_fst__h10739 = _theResult_____1_fst__h10767;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_val1__h10141 or
	  alu_outputs___1_val1__h9861 or
	  rd_val__h9882 or rd_val__h9868 or alu_outputs___1_val1__h10120)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848 =
	      alu_outputs___1_val1__h9861;
      7'b0010111:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848 =
	      rd_val__h9882;
      7'b0110111:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848 =
	      rd_val__h9868;
      7'b1110011:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848 =
	      alu_outputs___1_val1__h10120;
      default: IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d848 =
		   alu_outputs___1_val1__h10141;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d850 or
	  x_out_cf_info_fallthru_PC__h12981)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h9514 =
	      x_out_cf_info_fallthru_PC__h12981;
      default: x_out_data_to_stage2_val1__h9514 =
		   IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d850;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1728 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_stage1_rg_stage_input_17_BITS_109_TO_105_5_ETC___d392 or
	  NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d627 or
	  NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d620 or
	  IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d1813)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010;
      7'b0001111:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817 =
	      NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d627 &&
	      NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d620;
      7'b0100011:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010;
      7'b1110011:
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817 =
	      IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d1813;
      default: IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817 =
		   stage1_rg_stage_input[151:145] != 7'b0101111 ||
		   NOT_stage1_rg_stage_input_17_BITS_109_TO_105_5_ETC___d392;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817 or
	  NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d340)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      NOT_stage1_rg_stage_input_17_BITS_112_TO_110_4_ETC___d340;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   IF_stage1_rg_stage_input_17_BITS_151_TO_145_46_ETC___d1817;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 = 3'd0;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 = 3'd2;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 = 3'd4;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 = 3'd0;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 =
		   (stage1_rg_stage_input[151:145] == 7'b0110011 &&
		    stage1_rg_stage_input[104:98] == 7'b0000001) ?
		     3'd3 :
		     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$valid or near_mem$dmem_valid)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_103_TO_101_1_NOT_ne_ETC__q17 =
	      !near_mem$dmem_valid;
      default: CASE_stage2_rg_stage2_BITS_103_TO_101_1_NOT_ne_ETC__q17 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q18 = 2'd0;
      7'b1100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q18 = 2'd2;
      7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q18 = 2'd1;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q18 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd1;
	imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_step_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stop_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageD_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stageF_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_rg_cache_addr$EN)
	  imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_addr$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_step_count$EN)
	  rg_step_count <= `BSV_ASSIGNMENT_DELAY rg_step_count$D_IN;
	if (rg_stop_req$EN)
	  rg_stop_req <= `BSV_ASSIGNMENT_DELAY rg_stop_req$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (stageD_rg_full$EN)
	  stageD_rg_full <= `BSV_ASSIGNMENT_DELAY stageD_rg_full$D_IN;
	if (stageF_rg_epoch$EN)
	  stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY stageF_rg_epoch$D_IN;
	if (stageF_rg_full$EN)
	  stageF_rg_full <= `BSV_ASSIGNMENT_DELAY stageF_rg_full$D_IN;
      end
    if (imem_rg_cache_b16$EN)
      imem_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_b16$D_IN;
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_epoch$EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (stage1_rg_stage_input$EN)
      stage1_rg_stage_input <= `BSV_ASSIGNMENT_DELAY
	  stage1_rg_stage_input$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
    if (stageD_rg_data$EN)
      stageD_rg_data <= `BSV_ASSIGNMENT_DELAY stageD_rg_data$D_IN;
    if (stageF_rg_priv$EN)
      stageF_rg_priv <= `BSV_ASSIGNMENT_DELAY stageF_rg_priv$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_cache_addr = 32'hAAAAAAAA;
    imem_rg_cache_b16 = 16'hAAAA;
    imem_rg_f3 = 3'h2;
    imem_rg_pc = 32'hAAAAAAAA;
    imem_rg_tval = 32'hAAAAAAAA;
    rg_csr_pc = 32'hAAAAAAAA;
    rg_csr_val1 = 32'hAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_epoch = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_step_count = 1'h0;
    rg_stop_req = 1'h0;
    rg_trap_info = 68'hAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    stage1_rg_full = 1'h0;
    stage1_rg_stage_input =
	306'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 = 170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_data = 138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_full = 1'h0;
    stageF_rg_epoch = 2'h2;
    stageF_rg_full = 1'h0;
    stageF_rg_priv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus,
		 rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[37]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[37])
	$write("Rd %0d ",
	       stage3_rg_stage3[36:32],
	       "rd_val:%h",
	       stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[167:136],
	       stage2_rg_stage2[135:104],
	       stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d157)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133) &&
	  stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_0_04_ETC___d149 &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d163))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h8361,
	       x_out_data_to_stage3_rd_val__h8362);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("'h%h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("'h%h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d131)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d133 &&
	  NOT_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ__ETC___d137)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d151)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[103:101] != 3'd0 &&
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d193))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d198))
	$write("Rd %0d ", x_out_bypass_rd__h9011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[103:101] != 3'd0 &&
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d193))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d198 &&
	  stage2_rg_stage2[103:101] != 3'd0 &&
	  IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d206)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d198) &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d210))
	$write("rd_val:%h", x_out_bypass_rd_val__h9012);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("Output_Stage1",
	       " BUSY pc:%h",
	       stage1_rg_stage_input[305:274]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("Output_Stage1",
	       " NONPIPE: pc:%h",
	       stage1_rg_stage_input[305:274]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d489)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d496)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d511)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d526)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d545)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d559)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d574)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d595)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d660)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d674)
	$write("{", "CF_None");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d683)
	$write("{", "BR ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d688)
	$write("{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d674)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d683)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d694)
	$write("JAL [%h->%h/%h]",
	       stage1_rg_stage_input[305:274],
	       x_out_cf_info_taken_PC__h12982,
	       x_out_cf_info_fallthru_PC__h12981);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d722)
	$write("JALR [%h->%h/%h]",
	       stage1_rg_stage_input[305:274],
	       x_out_cf_info_taken_PC__h12982,
	       x_out_cf_info_fallthru_PC__h12981);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d674)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d683)
	if (stage1_rg_stage_input[151:145] != 7'b1100011 ||
	    IF_stage1_rg_stage_input_17_BITS_112_TO_110_48_ETC___d297)
	  $write("taken ");
	else
	  $write("fallthru ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d688)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_17_BITS_271_TO_270_1_ETC___d674)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d683)
	$write("[%h->%h %h]",
	       stage1_rg_stage_input[305:274],
	       x_out_cf_info_fallthru_PC__h12981,
	       x_out_cf_info_taken_PC__h12982);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d688)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[231:200],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	   NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	  (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	   stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479) &&
	  (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	   NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d738))
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d747)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d752)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage2_rg_full_01_52_ETC___d757)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d479 &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d764 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d772)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h9512);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h9513,
	       x_out_data_to_stage2_val1__h9514,
	       x_out_data_to_stage2_val2__h9515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d861)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d496)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d509)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d524)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d543)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d557)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d572)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d593)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d660)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("'h%h", stage1_rg_stage_input[305:274]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("'h%h", x_out_trap_info_exc_code__h12088);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d417)
	$write("'h%h", value__h12149, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_16_AND_NOT_stage1_rg_stage_inpu_ETC___d482)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d226)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	   NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	  !IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920)
	$write("\n        redirect next_pc:%h", x_out_next_pc__h9313);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 ||
	   NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d244) &&
	  IF_IF_stage1_rg_stage_input_17_BITS_151_TO_145_ETC___d920)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageD: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 stageD_rg_data[137:106],
		 x_out_data_to_stage1_instr__h13769,
		 stageD_rg_data[103:102],
		 stageD_rg_data[105:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[137:106],
	       stageD_rg_data[103:102],
	       stageD_rg_data[105:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[137:106],
	       stageD_rg_data[103:102],
	       stageD_rg_data[105:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[100] &&
	  stageD_rg_data[101])
	$write("  instr_C:%0h", stageD_rg_data[47:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[100] &&
	  !stageD_rg_data[101])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("  instr:%0h  pred_pc:%0h",
	       x_out_data_to_stage1_instr__h13769,
	       stageD_rg_data[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] != 4'd0 &&
	  stageD_rg_data[99:96] != 4'd1 &&
	  stageD_rg_data[99:96] != 4'd2 &&
	  stageD_rg_data[99:96] != 4'd3 &&
	  stageD_rg_data[99:96] != 4'd4 &&
	  stageD_rg_data[99:96] != 4'd5 &&
	  stageD_rg_data[99:96] != 4'd6 &&
	  stageD_rg_data[99:96] != 4'd7 &&
	  stageD_rg_data[99:96] != 4'd8 &&
	  stageD_rg_data[99:96] != 4'd9 &&
	  stageD_rg_data[99:96] != 4'd11 &&
	  stageD_rg_data[99:96] != 4'd12 &&
	  stageD_rg_data[99:96] != 4'd13 &&
	  stageD_rg_data[99:96] != 4'd15)
	$write("unknown trap Exc_Code %d", stageD_rg_data[99:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write(" tval %0h", stageD_rg_data[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageF: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 imem_rg_pc,
		 d_instr__h19358,
		 stageF_rg_priv,
		 stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319))
	$write(" BUSY: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326)
	$write("data_to_StageD {pc:%h  priv:%0d  epoch:%0d",
	       imem_rg_pc,
	       stageF_rg_priv,
	       stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_301_AND_near_mem_imem_valid_AND_ETC___d1333)
	$write("  instr:%h  pred_pc:%h",
	       d_instr__h19358,
	       stageF_branch_predictor$predict_rsp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d1421)
	$write("unknown trap Exc_Code %d", near_mem$imem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_301_AND_near_mem_imem_valid_AND_ETC___d1333)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d1319))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d1326)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_run_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant)
	$display("%0d: %m.debug_run_redundant: CPU already running.",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_halt_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant)
	$display("%0d: %m.rl_debug_halt_redundant: CPU already halted.",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("    state = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd3)
	$write("CPU_DEBUG_MODE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd3 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_read_gpr: reg %0d => 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_gpr_reqs$D_OUT[36:32],
		 gpr_regfile$read_rs1_port2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_write_gpr: reg %0d <= 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_gpr_reqs$D_OUT[36:32],
		 f_gpr_reqs$D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_gpr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_read_csr: csr %0d => 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_csr_reqs$D_OUT[43:32],
		 csr_regfile$read_csr_port2[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_run", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       csr_regfile$read_dpc,
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 csr_regfile$read_dpc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_write_csr: csr 0x%0h 0x%0h <= 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_csr_reqs$D_OUT[43:32],
		 f_csr_reqs$D_OUT[31:0],
		 csr_regfile$mav_csr_write);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_debug_csr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage2_nonpipe -> CPU_TRAP",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)", rg_trap_info[67:36], rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 rg_trap_info[67:36],
		 rg_trap_info[31:0],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)", rg_csr_pc, rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h27157,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h27157,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)", rg_csr_pc, rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h27971,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h27971,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_restart_after_csrrx",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)",
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)",
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)",
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  (cur_verbosity__h3823 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("%8h (0x%8h)",
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode: PC 0x%08h instr 0x%08h",
		 csr_regfile$read_csr_mcycle,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    Flushing caches");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_Debug_Module)
	$display("%0d: %m.rl_reset_from_Debug_Module",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_BREAK_cache_flush_finish",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_stop", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("%0d: %m.rl_stage1_stop: Stop for debugger. minstret %0d priv %0d PC 0x%0h instr 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h35743,
		 cpifrac__h35744,
		 delta_CPI_cycles__h35739,
		 _theResult____h35741);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && !rg_stop_req)
	$display("%0d: %m.rl_stage1_stop: Stop after single-step. PC = 0x%08h",
		 csr_regfile$read_csr_mcycle,
		 stage1_rg_stage_input[305:274]);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      begin
        v__h2562 = $stime;
	#0;
      end
    v__h2556 = v__h2562 / 32'd10;
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("%0d: ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False",
	       v__h2556);
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       soc_map$m_pc_reset_value[31:0],
	       new_epoch__h20813,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 soc_map$m_pc_reset_value[31:0],
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h20813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[36:32],
		 stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[167:136],
	       stage2_rg_stage2[135:104],
	       stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_IF_stage2_rg_stage2_02_B_ETC___d1576)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1578)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h8361,
	       x_out_data_to_stage3_rd_val__h8362);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1573)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1584)
	$display("%8h (0x%8h)",
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_103_TO_101_03_EQ_1_ETC___d1506 ||
	   !stage2_rg_full) &&
	  stage1_rg_full &&
	  !stage1_rg_stage_input_17_BITS_271_TO_270_18_EQ_ETC___d219 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    rl_pipe: Discarding stage1 due to redirection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[231:200],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1649)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1653)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1657)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1661)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1666)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h9512);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h9513,
	       x_out_data_to_stage2_val1__h9514,
	       x_out_data_to_stage2_val2__h9515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1645)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1673 &&
	  stageD_rg_full &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", stageD_rg_data[137:106]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_StageD.enq (Data_StageF_to_StageD)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       stageF_branch_predictor$predict_rsp,
	       stageF_rg_epoch,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_01_AND_NOT_stage2_rg_stage2__ETC___d1714 &&
	  NOT_stage2_rg_full_01_52_OR_stage2_rg_stage2_0_ETC___d1735 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Flute  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
  end
  // synopsys translate_on
endmodule  // mkCPU

