//
// Generated by Bluespec Compiler, version 2021.07-22-g61dc0ebb (build 61dc0ebb)
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// RDY_predict_req                O     1 const
// predict_rsp                    O    32
// RDY_bp_train                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 unused
// predict_req_pc                 I    32 reg
// predict_rsp_is_i32_not_i16     I     1
// predict_rsp_instr              I    32 unused
// bp_train_pc                    I    32 unused
// bp_train_is_i32_not_i16        I     1 unused
// bp_train_instr                 I    32 unused
// bp_train_cf_info               I    99 unused
// EN_reset                       I     1 unused
// EN_predict_req                 I     1
// EN_bp_train                    I     1 unused
//
// Combinational paths from inputs to outputs:
//   predict_rsp_is_i32_not_i16 -> predict_rsp
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBranch_Predictor(CLK,
			  RST_N,

			  EN_reset,
			  RDY_reset,

			  predict_req_pc,
			  EN_predict_req,
			  RDY_predict_req,

			  predict_rsp_is_i32_not_i16,
			  predict_rsp_instr,
			  predict_rsp,

			  bp_train_pc,
			  bp_train_is_i32_not_i16,
			  bp_train_instr,
			  bp_train_cf_info,
			  EN_bp_train,
			  RDY_bp_train);
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method predict_req
  input  [31 : 0] predict_req_pc;
  input  EN_predict_req;
  output RDY_predict_req;

  // value method predict_rsp
  input  predict_rsp_is_i32_not_i16;
  input  [31 : 0] predict_rsp_instr;
  output [31 : 0] predict_rsp;

  // action method bp_train
  input  [31 : 0] bp_train_pc;
  input  bp_train_is_i32_not_i16;
  input  [31 : 0] bp_train_instr;
  input  [98 : 0] bp_train_cf_info;
  input  EN_bp_train;
  output RDY_bp_train;

  // signals for module outputs
  wire [31 : 0] predict_rsp;
  wire RDY_bp_train, RDY_predict_req, RDY_reset;

  // register rg_pc
  reg [31 : 0] rg_pc;
  wire [31 : 0] rg_pc$D_IN;
  wire rg_pc$EN;

  // rule scheduling signals
  wire CAN_FIRE_bp_train,
       CAN_FIRE_predict_req,
       CAN_FIRE_reset,
       WILL_FIRE_bp_train,
       WILL_FIRE_predict_req,
       WILL_FIRE_reset;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method predict_req
  assign RDY_predict_req = 1'd1 ;
  assign CAN_FIRE_predict_req = 1'd1 ;
  assign WILL_FIRE_predict_req = EN_predict_req ;

  // value method predict_rsp
  assign predict_rsp = rg_pc + (predict_rsp_is_i32_not_i16 ? 32'd4 : 32'd2) ;

  // action method bp_train
  assign RDY_bp_train = 1'd1 ;
  assign CAN_FIRE_bp_train = 1'd1 ;
  assign WILL_FIRE_bp_train = EN_bp_train ;

  // register rg_pc
  assign rg_pc$D_IN = predict_req_pc ;
  assign rg_pc$EN = EN_predict_req ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (rg_pc$EN) rg_pc <= `BSV_ASSIGNMENT_DELAY rg_pc$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_pc = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBranch_Predictor

