//
// Generated by Bluespec Compiler, version 2021.07-22-g61dc0ebb (build 61dc0ebb)
//
//
// Ports:
// Name                         I/O  size props
// toCore_awvalid                 O     1 reg
// toCore_awid                    O     4 reg
// toCore_awaddr                  O    32 reg
// toCore_awlen                   O     8 reg
// toCore_awsize                  O     3 reg
// toCore_awburst                 O     2 reg
// toCore_awlock                  O     1 reg
// toCore_awcache                 O     4 reg
// toCore_awprot                  O     3 reg
// toCore_awqos                   O     4 reg
// toCore_awregion                O     4 reg
// toCore_wvalid                  O     1 reg
// toCore_wdata                   O    32 reg
// toCore_wstrb                   O     4 reg
// toCore_wlast                   O     1 reg
// toCore_bready                  O     1 reg
// toCore_arvalid                 O     1 reg
// toCore_arid                    O     4 reg
// toCore_araddr                  O    32 reg
// toCore_arlen                   O     8 reg
// toCore_arsize                  O     3 reg
// toCore_arburst                 O     2 reg
// toCore_arlock                  O     1 reg
// toCore_arcache                 O     4 reg
// toCore_arprot                  O     3 reg
// toCore_arqos                   O     4 reg
// toCore_arregion                O     4 reg
// toCore_rready                  O     1 reg
// jtag_tdo                       O     1
// CLK_jtag_tclk_out              O     1 clock
// CLK_GATE_jtag_tclk_out         O     1 const
// RST_N_ndm_resetn               O     1 reset
// dmi_reset                      I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// toCore_awready                 I     1
// toCore_wready                  I     1
// toCore_bvalid                  I     1
// toCore_bid                     I     4 reg
// toCore_bresp                   I     2 reg
// toCore_arready                 I     1
// toCore_rvalid                  I     1
// toCore_rid                     I     4 reg
// toCore_rdata                   I    32 reg
// toCore_rresp                   I     2 reg
// toCore_rlast                   I     1 reg
// jtag_tdi                       I     1
// jtag_tms                       I     1
// jtag_tclk                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBSDebug(dmi_reset,
		 CLK,
		 RST_N,

		 toCore_awvalid,

		 toCore_awid,

		 toCore_awaddr,

		 toCore_awlen,

		 toCore_awsize,

		 toCore_awburst,

		 toCore_awlock,

		 toCore_awcache,

		 toCore_awprot,

		 toCore_awqos,

		 toCore_awregion,

		 toCore_awready,

		 toCore_wvalid,

		 toCore_wdata,

		 toCore_wstrb,

		 toCore_wlast,

		 toCore_wready,

		 toCore_bvalid,
		 toCore_bid,
		 toCore_bresp,

		 toCore_bready,

		 toCore_arvalid,

		 toCore_arid,

		 toCore_araddr,

		 toCore_arlen,

		 toCore_arsize,

		 toCore_arburst,

		 toCore_arlock,

		 toCore_arcache,

		 toCore_arprot,

		 toCore_arqos,

		 toCore_arregion,

		 toCore_arready,

		 toCore_rvalid,
		 toCore_rid,
		 toCore_rdata,
		 toCore_rresp,
		 toCore_rlast,

		 toCore_rready,

		 jtag_tdi,

		 jtag_tms,

		 jtag_tclk,

		 jtag_tdo,

		 CLK_jtag_tclk_out,
		 CLK_GATE_jtag_tclk_out,

		 RST_N_ndm_resetn);
  input  dmi_reset;
  input  CLK;
  input  RST_N;

  // value method toCore_m_awvalid
  output toCore_awvalid;

  // value method toCore_m_awid
  output [3 : 0] toCore_awid;

  // value method toCore_m_awaddr
  output [31 : 0] toCore_awaddr;

  // value method toCore_m_awlen
  output [7 : 0] toCore_awlen;

  // value method toCore_m_awsize
  output [2 : 0] toCore_awsize;

  // value method toCore_m_awburst
  output [1 : 0] toCore_awburst;

  // value method toCore_m_awlock
  output toCore_awlock;

  // value method toCore_m_awcache
  output [3 : 0] toCore_awcache;

  // value method toCore_m_awprot
  output [2 : 0] toCore_awprot;

  // value method toCore_m_awqos
  output [3 : 0] toCore_awqos;

  // value method toCore_m_awregion
  output [3 : 0] toCore_awregion;

  // value method toCore_m_awuser

  // action method toCore_m_awready
  input  toCore_awready;

  // value method toCore_m_wvalid
  output toCore_wvalid;

  // value method toCore_m_wdata
  output [31 : 0] toCore_wdata;

  // value method toCore_m_wstrb
  output [3 : 0] toCore_wstrb;

  // value method toCore_m_wlast
  output toCore_wlast;

  // value method toCore_m_wuser

  // action method toCore_m_wready
  input  toCore_wready;

  // action method toCore_m_bvalid
  input  toCore_bvalid;
  input  [3 : 0] toCore_bid;
  input  [1 : 0] toCore_bresp;

  // value method toCore_m_bready
  output toCore_bready;

  // value method toCore_m_arvalid
  output toCore_arvalid;

  // value method toCore_m_arid
  output [3 : 0] toCore_arid;

  // value method toCore_m_araddr
  output [31 : 0] toCore_araddr;

  // value method toCore_m_arlen
  output [7 : 0] toCore_arlen;

  // value method toCore_m_arsize
  output [2 : 0] toCore_arsize;

  // value method toCore_m_arburst
  output [1 : 0] toCore_arburst;

  // value method toCore_m_arlock
  output toCore_arlock;

  // value method toCore_m_arcache
  output [3 : 0] toCore_arcache;

  // value method toCore_m_arprot
  output [2 : 0] toCore_arprot;

  // value method toCore_m_arqos
  output [3 : 0] toCore_arqos;

  // value method toCore_m_arregion
  output [3 : 0] toCore_arregion;

  // value method toCore_m_aruser

  // action method toCore_m_arready
  input  toCore_arready;

  // action method toCore_m_rvalid
  input  toCore_rvalid;
  input  [3 : 0] toCore_rid;
  input  [31 : 0] toCore_rdata;
  input  [1 : 0] toCore_rresp;
  input  toCore_rlast;

  // value method toCore_m_rready
  output toCore_rready;

  // action method jtag_tdi
  input  jtag_tdi;

  // action method jtag_tms
  input  jtag_tms;

  // action method jtag_tclk
  input  jtag_tclk;

  // value method jtag_tdo
  output jtag_tdo;

  // oscillator and gates for output clock CLK_jtag_tclk_out
  output CLK_jtag_tclk_out;
  output CLK_GATE_jtag_tclk_out;

  // output resets
  output RST_N_ndm_resetn;

  // signals for module outputs
  wire [31 : 0] toCore_araddr, toCore_awaddr, toCore_wdata;
  wire [7 : 0] toCore_arlen, toCore_awlen;
  wire [3 : 0] toCore_arcache,
	       toCore_arid,
	       toCore_arqos,
	       toCore_arregion,
	       toCore_awcache,
	       toCore_awid,
	       toCore_awqos,
	       toCore_awregion,
	       toCore_wstrb;
  wire [2 : 0] toCore_arprot, toCore_arsize, toCore_awprot, toCore_awsize;
  wire [1 : 0] toCore_arburst, toCore_awburst;
  wire CLK_GATE_jtag_tclk_out,
       CLK_jtag_tclk_out,
       RST_N_ndm_resetn,
       jtag_tdo,
       toCore_arlock,
       toCore_arvalid,
       toCore_awlock,
       toCore_awvalid,
       toCore_bready,
       toCore_rready,
       toCore_wlast,
       toCore_wvalid;

  // inlined wires
  wire [40 : 0] bus_dmi_req_data_wire$wget;
  wire bus_dmi_rsp_fifof_enqueueing$whas;

  // register bus_dmi_rsp_fifof_cntr_r
  reg [1 : 0] bus_dmi_rsp_fifof_cntr_r;
  wire [1 : 0] bus_dmi_rsp_fifof_cntr_r$D_IN;
  wire bus_dmi_rsp_fifof_cntr_r$EN;

  // register bus_dmi_rsp_fifof_q_0
  reg [33 : 0] bus_dmi_rsp_fifof_q_0;
  reg [33 : 0] bus_dmi_rsp_fifof_q_0$D_IN;
  wire bus_dmi_rsp_fifof_q_0$EN;

  // register bus_dmi_rsp_fifof_q_1
  reg [33 : 0] bus_dmi_rsp_fifof_q_1;
  reg [33 : 0] bus_dmi_rsp_fifof_q_1$D_IN;
  wire bus_dmi_rsp_fifof_q_1$EN;

  // register rg_bursting
  reg rg_bursting;
  wire rg_bursting$D_IN, rg_bursting$EN;

  // register rg_busy
  reg rg_busy;
  wire rg_busy$D_IN, rg_busy$EN;

  // ports of submodule bus_dmi_req_fifof
  wire [40 : 0] bus_dmi_req_fifof$D_IN, bus_dmi_req_fifof$D_OUT;
  wire bus_dmi_req_fifof$CLR,
       bus_dmi_req_fifof$DEQ,
       bus_dmi_req_fifof$EMPTY_N,
       bus_dmi_req_fifof$ENQ,
       bus_dmi_req_fifof$FULL_N;

  // ports of submodule coreXactor_f_rd_addr
  reg [64 : 0] coreXactor_f_rd_addr$D_IN;
  wire [64 : 0] coreXactor_f_rd_addr$D_OUT;
  wire coreXactor_f_rd_addr$CLR,
       coreXactor_f_rd_addr$DEQ,
       coreXactor_f_rd_addr$EMPTY_N,
       coreXactor_f_rd_addr$ENQ,
       coreXactor_f_rd_addr$FULL_N;

  // ports of submodule coreXactor_f_rd_data
  wire [38 : 0] coreXactor_f_rd_data$D_IN, coreXactor_f_rd_data$D_OUT;
  wire coreXactor_f_rd_data$CLR,
       coreXactor_f_rd_data$DEQ,
       coreXactor_f_rd_data$EMPTY_N,
       coreXactor_f_rd_data$ENQ,
       coreXactor_f_rd_data$FULL_N;

  // ports of submodule coreXactor_f_wr_addr
  reg [64 : 0] coreXactor_f_wr_addr$D_IN;
  wire [64 : 0] coreXactor_f_wr_addr$D_OUT;
  wire coreXactor_f_wr_addr$CLR,
       coreXactor_f_wr_addr$DEQ,
       coreXactor_f_wr_addr$EMPTY_N,
       coreXactor_f_wr_addr$ENQ,
       coreXactor_f_wr_addr$FULL_N;

  // ports of submodule coreXactor_f_wr_data
  reg [36 : 0] coreXactor_f_wr_data$D_IN;
  wire [36 : 0] coreXactor_f_wr_data$D_OUT;
  wire coreXactor_f_wr_data$CLR,
       coreXactor_f_wr_data$DEQ,
       coreXactor_f_wr_data$EMPTY_N,
       coreXactor_f_wr_data$ENQ,
       coreXactor_f_wr_data$FULL_N;

  // ports of submodule coreXactor_f_wr_resp
  wire [5 : 0] coreXactor_f_wr_resp$D_IN, coreXactor_f_wr_resp$D_OUT;
  wire coreXactor_f_wr_resp$CLR,
       coreXactor_f_wr_resp$DEQ,
       coreXactor_f_wr_resp$EMPTY_N,
       coreXactor_f_wr_resp$ENQ,
       coreXactor_f_wr_resp$FULL_N;

  // ports of submodule debug_module
  wire [44 : 0] debug_module$hart0_hart_csr_mem_client_request_get;
  wire [37 : 0] debug_module$hart0_hart_gpr_mem_client_request_get;
  wire [32 : 0] debug_module$hart0_hart_csr_mem_client_response_put,
		debug_module$hart0_hart_gpr_mem_client_response_put;
  wire [31 : 0] debug_module$dmi_read_data,
		debug_module$dmi_write_dm_word,
		debug_module$master_araddr,
		debug_module$master_awaddr,
		debug_module$master_rdata,
		debug_module$master_wdata;
  wire [7 : 0] debug_module$master_arlen, debug_module$master_awlen;
  wire [6 : 0] debug_module$dmi_read_addr_dm_addr,
	       debug_module$dmi_write_dm_addr;
  wire [3 : 0] debug_module$master_arcache,
	       debug_module$master_arid,
	       debug_module$master_arqos,
	       debug_module$master_arregion,
	       debug_module$master_awcache,
	       debug_module$master_awid,
	       debug_module$master_awqos,
	       debug_module$master_awregion,
	       debug_module$master_bid,
	       debug_module$master_rid,
	       debug_module$master_wstrb;
  wire [2 : 0] debug_module$master_arprot,
	       debug_module$master_arsize,
	       debug_module$master_awprot,
	       debug_module$master_awsize;
  wire [1 : 0] debug_module$master_arburst,
	       debug_module$master_awburst,
	       debug_module$master_bresp,
	       debug_module$master_rresp;
  wire debug_module$EN_dmi_read_addr,
       debug_module$EN_dmi_read_data,
       debug_module$EN_dmi_write,
       debug_module$EN_hart0_hart_client_run_halt_request_get,
       debug_module$EN_hart0_hart_client_run_halt_response_put,
       debug_module$EN_hart0_hart_csr_mem_client_request_get,
       debug_module$EN_hart0_hart_csr_mem_client_response_put,
       debug_module$EN_hart0_hart_get_other_req_get,
       debug_module$EN_hart0_hart_gpr_mem_client_request_get,
       debug_module$EN_hart0_hart_gpr_mem_client_response_put,
       debug_module$EN_hart0_hart_reset_client_request_get,
       debug_module$EN_hart0_hart_reset_client_response_put,
       debug_module$EN_ndm_reset_client_request_get,
       debug_module$EN_ndm_reset_client_response_put,
       debug_module$RDY_dmi_read_addr,
       debug_module$RDY_dmi_read_data,
       debug_module$RDY_dmi_write,
       debug_module$RDY_hart0_hart_client_run_halt_request_get,
       debug_module$RDY_hart0_hart_client_run_halt_response_put,
       debug_module$RDY_hart0_hart_csr_mem_client_request_get,
       debug_module$RDY_hart0_hart_csr_mem_client_response_put,
       debug_module$RDY_hart0_hart_gpr_mem_client_request_get,
       debug_module$RDY_hart0_hart_gpr_mem_client_response_put,
       debug_module$RDY_hart0_hart_reset_client_request_get,
       debug_module$RDY_hart0_hart_reset_client_response_put,
       debug_module$RDY_ndm_reset_client_request_get,
       debug_module$RDY_ndm_reset_client_response_put,
       debug_module$hart0_hart_client_run_halt_request_get,
       debug_module$hart0_hart_client_run_halt_response_put,
       debug_module$hart0_hart_reset_client_request_get,
       debug_module$hart0_hart_reset_client_response_put,
       debug_module$master_arlock,
       debug_module$master_arready,
       debug_module$master_arvalid,
       debug_module$master_awlock,
       debug_module$master_awready,
       debug_module$master_awvalid,
       debug_module$master_bready,
       debug_module$master_bvalid,
       debug_module$master_rlast,
       debug_module$master_rready,
       debug_module$master_rvalid,
       debug_module$master_wlast,
       debug_module$master_wready,
       debug_module$master_wvalid,
       debug_module$ndm_reset_client_request_get,
       debug_module$ndm_reset_client_response_put;

  // ports of submodule dmXactor_f_rd_addr
  wire [64 : 0] dmXactor_f_rd_addr$D_IN, dmXactor_f_rd_addr$D_OUT;
  wire dmXactor_f_rd_addr$CLR,
       dmXactor_f_rd_addr$DEQ,
       dmXactor_f_rd_addr$EMPTY_N,
       dmXactor_f_rd_addr$ENQ,
       dmXactor_f_rd_addr$FULL_N;

  // ports of submodule dmXactor_f_rd_data
  wire [38 : 0] dmXactor_f_rd_data$D_IN, dmXactor_f_rd_data$D_OUT;
  wire dmXactor_f_rd_data$CLR,
       dmXactor_f_rd_data$DEQ,
       dmXactor_f_rd_data$EMPTY_N,
       dmXactor_f_rd_data$ENQ,
       dmXactor_f_rd_data$FULL_N;

  // ports of submodule dmXactor_f_wr_addr
  wire [64 : 0] dmXactor_f_wr_addr$D_IN, dmXactor_f_wr_addr$D_OUT;
  wire dmXactor_f_wr_addr$CLR,
       dmXactor_f_wr_addr$DEQ,
       dmXactor_f_wr_addr$EMPTY_N,
       dmXactor_f_wr_addr$ENQ,
       dmXactor_f_wr_addr$FULL_N;

  // ports of submodule dmXactor_f_wr_data
  wire [36 : 0] dmXactor_f_wr_data$D_IN, dmXactor_f_wr_data$D_OUT;
  wire dmXactor_f_wr_data$CLR,
       dmXactor_f_wr_data$DEQ,
       dmXactor_f_wr_data$EMPTY_N,
       dmXactor_f_wr_data$ENQ,
       dmXactor_f_wr_data$FULL_N;

  // ports of submodule dmXactor_f_wr_resp
  wire [5 : 0] dmXactor_f_wr_resp$D_IN, dmXactor_f_wr_resp$D_OUT;
  wire dmXactor_f_wr_resp$CLR,
       dmXactor_f_wr_resp$DEQ,
       dmXactor_f_wr_resp$EMPTY_N,
       dmXactor_f_wr_resp$ENQ,
       dmXactor_f_wr_resp$FULL_N;

  // ports of submodule jtagtap
  wire [31 : 0] jtagtap$dmi_req_data, jtagtap$dmi_rsp_data;
  wire [6 : 0] jtagtap$dmi_req_addr;
  wire [1 : 0] jtagtap$dmi_req_op, jtagtap$dmi_rsp_response;
  wire jtagtap$CLK_jtag_tclk_out,
       jtagtap$dmi_req_ready,
       jtagtap$dmi_req_valid,
       jtagtap$dmi_rsp_ready,
       jtagtap$dmi_rsp_valid,
       jtagtap$jtag_tclk,
       jtagtap$jtag_tdi,
       jtagtap$jtag_tdo,
       jtagtap$jtag_tms;

  // ports of submodule req_FF
  wire req_FF$CLR,
       req_FF$DEQ,
       req_FF$D_IN,
       req_FF$D_OUT,
       req_FF$EMPTY_N,
       req_FF$ENQ,
       req_FF$FULL_N;

  // ports of submodule resetIfc
  wire resetIfc$ASSERT_IN, resetIfc$OUT_RST;

  // ports of submodule rsp_FF
  wire rsp_FF$CLR,
       rsp_FF$DEQ,
       rsp_FF$D_IN,
       rsp_FF$D_OUT,
       rsp_FF$EMPTY_N,
       rsp_FF$ENQ,
       rsp_FF$FULL_N;

  // ports of submodule which_FF
  wire which_FF$CLR,
       which_FF$DEQ,
       which_FF$D_IN,
       which_FF$D_OUT,
       which_FF$EMPTY_N,
       which_FF$ENQ,
       which_FF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf,
       CAN_FIRE_RL_bus_dmi_req_do_enq,
       CAN_FIRE_RL_bus_dmi_rsp_do_deq,
       CAN_FIRE_RL_bus_dmi_rsp_fifof_both,
       CAN_FIRE_RL_bus_dmi_rsp_fifof_decCtr,
       CAN_FIRE_RL_bus_dmi_rsp_fifof_incCtr,
       CAN_FIRE_RL_csr_req_rl,
       CAN_FIRE_RL_gpr_req_rl,
       CAN_FIRE_RL_hart_reset_rl,
       CAN_FIRE_RL_ndm_reset_rl,
       CAN_FIRE_RL_rd_responses_rl,
       CAN_FIRE_RL_reset_req_rl,
       CAN_FIRE_RL_reset_rsp_rl,
       CAN_FIRE_RL_rl_dmi_req,
       CAN_FIRE_RL_rl_dmi_req_cpu,
       CAN_FIRE_RL_rl_dmi_rsp,
       CAN_FIRE_RL_rl_dmi_rsp_cpu,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_runhalt_req_rl,
       CAN_FIRE_RL_sbus_aradd_rl,
       CAN_FIRE_RL_sbus_awadd_rl,
       CAN_FIRE_RL_sbus_wdata_rl,
       CAN_FIRE_RL_wr_responses_rl,
       CAN_FIRE_jtag_tclk,
       CAN_FIRE_jtag_tdi,
       CAN_FIRE_jtag_tms,
       CAN_FIRE_toCore_m_arready,
       CAN_FIRE_toCore_m_awready,
       CAN_FIRE_toCore_m_bvalid,
       CAN_FIRE_toCore_m_rvalid,
       CAN_FIRE_toCore_m_wready,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf,
       WILL_FIRE_RL_bus_dmi_req_do_enq,
       WILL_FIRE_RL_bus_dmi_rsp_do_deq,
       WILL_FIRE_RL_bus_dmi_rsp_fifof_both,
       WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr,
       WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr,
       WILL_FIRE_RL_csr_req_rl,
       WILL_FIRE_RL_gpr_req_rl,
       WILL_FIRE_RL_hart_reset_rl,
       WILL_FIRE_RL_ndm_reset_rl,
       WILL_FIRE_RL_rd_responses_rl,
       WILL_FIRE_RL_reset_req_rl,
       WILL_FIRE_RL_reset_rsp_rl,
       WILL_FIRE_RL_rl_dmi_req,
       WILL_FIRE_RL_rl_dmi_req_cpu,
       WILL_FIRE_RL_rl_dmi_rsp,
       WILL_FIRE_RL_rl_dmi_rsp_cpu,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_runhalt_req_rl,
       WILL_FIRE_RL_sbus_aradd_rl,
       WILL_FIRE_RL_sbus_awadd_rl,
       WILL_FIRE_RL_sbus_wdata_rl,
       WILL_FIRE_RL_wr_responses_rl,
       WILL_FIRE_jtag_tclk,
       WILL_FIRE_jtag_tdi,
       WILL_FIRE_jtag_tms,
       WILL_FIRE_toCore_m_arready,
       WILL_FIRE_toCore_m_awready,
       WILL_FIRE_toCore_m_bvalid,
       WILL_FIRE_toCore_m_rvalid,
       WILL_FIRE_toCore_m_wready;

  // inputs to muxes for submodule ports
  wire [64 : 0] MUX_coreXactor_f_rd_addr$enq_1__VAL_1,
		MUX_coreXactor_f_rd_addr$enq_1__VAL_2,
		MUX_coreXactor_f_rd_addr$enq_1__VAL_4,
		MUX_coreXactor_f_rd_addr$enq_1__VAL_5;
  wire [36 : 0] MUX_coreXactor_f_wr_data$enq_1__VAL_1,
		MUX_coreXactor_f_wr_data$enq_1__VAL_2;
  wire [33 : 0] MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1,
		MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2,
		MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_1,
		MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_1,
		MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_2;
  wire [32 : 0] MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_1,
		MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_2;
  wire [1 : 0] MUX_bus_dmi_rsp_fifof_cntr_r$write_1__VAL_2;
  wire MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1,
       MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2,
       MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1,
       MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2,
       MUX_bus_dmi_rsp_fifof_x_wire$wset_1__SEL_1,
       MUX_coreXactor_f_rd_addr$enq_1__SEL_1,
       MUX_coreXactor_f_rd_addr$enq_1__SEL_2,
       MUX_coreXactor_f_wr_addr$enq_1__SEL_1,
       MUX_coreXactor_f_wr_addr$enq_1__SEL_2,
       MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__SEL_1,
       MUX_debug_module$hart0_hart_gpr_mem_client_response_put_1__SEL_1;

  // remaining internal signals
  reg CASE_coreXactor_f_wr_respD_OUT_BITS_5_TO_2_0__ETC__q1,
      IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233;
  wire [31 : 0] x_araddr__h5727,
		x_araddr__h5814,
		x_awaddr__h5941,
		x_awaddr__h6117;
  wire [1 : 0] bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21;
  wire IF_bus_dmi_req_fifof_first__0_BITS_1_TO_0_1_EQ_ETC___d71,
       _dfoo1,
       _dfoo3,
       which_FF_i_notEmpty__2_AND_IF_which_FF_first___ETC___d97;

  // oscillator and gates for output clock CLK_jtag_tclk_out
  assign CLK_jtag_tclk_out = jtagtap$CLK_jtag_tclk_out ;
  assign CLK_GATE_jtag_tclk_out = 1'b1 ;

  // output resets
  assign RST_N_ndm_resetn = resetIfc$OUT_RST ;

  // value method toCore_m_awvalid
  assign toCore_awvalid = coreXactor_f_wr_addr$EMPTY_N ;

  // value method toCore_m_awid
  assign toCore_awid = coreXactor_f_wr_addr$D_OUT[64:61] ;

  // value method toCore_m_awaddr
  assign toCore_awaddr = coreXactor_f_wr_addr$D_OUT[60:29] ;

  // value method toCore_m_awlen
  assign toCore_awlen = coreXactor_f_wr_addr$D_OUT[28:21] ;

  // value method toCore_m_awsize
  assign toCore_awsize = coreXactor_f_wr_addr$D_OUT[20:18] ;

  // value method toCore_m_awburst
  assign toCore_awburst = coreXactor_f_wr_addr$D_OUT[17:16] ;

  // value method toCore_m_awlock
  assign toCore_awlock = coreXactor_f_wr_addr$D_OUT[15] ;

  // value method toCore_m_awcache
  assign toCore_awcache = coreXactor_f_wr_addr$D_OUT[14:11] ;

  // value method toCore_m_awprot
  assign toCore_awprot = coreXactor_f_wr_addr$D_OUT[10:8] ;

  // value method toCore_m_awqos
  assign toCore_awqos = coreXactor_f_wr_addr$D_OUT[7:4] ;

  // value method toCore_m_awregion
  assign toCore_awregion = coreXactor_f_wr_addr$D_OUT[3:0] ;

  // action method toCore_m_awready
  assign CAN_FIRE_toCore_m_awready = 1'd1 ;
  assign WILL_FIRE_toCore_m_awready = 1'd1 ;

  // value method toCore_m_wvalid
  assign toCore_wvalid = coreXactor_f_wr_data$EMPTY_N ;

  // value method toCore_m_wdata
  assign toCore_wdata = coreXactor_f_wr_data$D_OUT[36:5] ;

  // value method toCore_m_wstrb
  assign toCore_wstrb = coreXactor_f_wr_data$D_OUT[4:1] ;

  // value method toCore_m_wlast
  assign toCore_wlast = coreXactor_f_wr_data$D_OUT[0] ;

  // action method toCore_m_wready
  assign CAN_FIRE_toCore_m_wready = 1'd1 ;
  assign WILL_FIRE_toCore_m_wready = 1'd1 ;

  // action method toCore_m_bvalid
  assign CAN_FIRE_toCore_m_bvalid = 1'd1 ;
  assign WILL_FIRE_toCore_m_bvalid = 1'd1 ;

  // value method toCore_m_bready
  assign toCore_bready = coreXactor_f_wr_resp$FULL_N ;

  // value method toCore_m_arvalid
  assign toCore_arvalid = coreXactor_f_rd_addr$EMPTY_N ;

  // value method toCore_m_arid
  assign toCore_arid = coreXactor_f_rd_addr$D_OUT[64:61] ;

  // value method toCore_m_araddr
  assign toCore_araddr = coreXactor_f_rd_addr$D_OUT[60:29] ;

  // value method toCore_m_arlen
  assign toCore_arlen = coreXactor_f_rd_addr$D_OUT[28:21] ;

  // value method toCore_m_arsize
  assign toCore_arsize = coreXactor_f_rd_addr$D_OUT[20:18] ;

  // value method toCore_m_arburst
  assign toCore_arburst = coreXactor_f_rd_addr$D_OUT[17:16] ;

  // value method toCore_m_arlock
  assign toCore_arlock = coreXactor_f_rd_addr$D_OUT[15] ;

  // value method toCore_m_arcache
  assign toCore_arcache = coreXactor_f_rd_addr$D_OUT[14:11] ;

  // value method toCore_m_arprot
  assign toCore_arprot = coreXactor_f_rd_addr$D_OUT[10:8] ;

  // value method toCore_m_arqos
  assign toCore_arqos = coreXactor_f_rd_addr$D_OUT[7:4] ;

  // value method toCore_m_arregion
  assign toCore_arregion = coreXactor_f_rd_addr$D_OUT[3:0] ;

  // action method toCore_m_arready
  assign CAN_FIRE_toCore_m_arready = 1'd1 ;
  assign WILL_FIRE_toCore_m_arready = 1'd1 ;

  // action method toCore_m_rvalid
  assign CAN_FIRE_toCore_m_rvalid = 1'd1 ;
  assign WILL_FIRE_toCore_m_rvalid = 1'd1 ;

  // value method toCore_m_rready
  assign toCore_rready = coreXactor_f_rd_data$FULL_N ;

  // action method jtag_tdi
  assign CAN_FIRE_jtag_tdi = 1'd1 ;
  assign WILL_FIRE_jtag_tdi = 1'd1 ;

  // action method jtag_tms
  assign CAN_FIRE_jtag_tms = 1'd1 ;
  assign WILL_FIRE_jtag_tms = 1'd1 ;

  // action method jtag_tclk
  assign CAN_FIRE_jtag_tclk = 1'd1 ;
  assign WILL_FIRE_jtag_tclk = 1'd1 ;

  // value method jtag_tdo
  assign jtag_tdo = jtagtap$jtag_tdo ;

  // submodule bus_dmi_req_fifof
  FIFO2 #(.width(32'd41), .guarded(1'd1)) bus_dmi_req_fifof(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(bus_dmi_req_fifof$D_IN),
							    .ENQ(bus_dmi_req_fifof$ENQ),
							    .DEQ(bus_dmi_req_fifof$DEQ),
							    .CLR(bus_dmi_req_fifof$CLR),
							    .D_OUT(bus_dmi_req_fifof$D_OUT),
							    .FULL_N(bus_dmi_req_fifof$FULL_N),
							    .EMPTY_N(bus_dmi_req_fifof$EMPTY_N));

  // submodule coreXactor_f_rd_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) coreXactor_f_rd_addr(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coreXactor_f_rd_addr$D_IN),
							       .ENQ(coreXactor_f_rd_addr$ENQ),
							       .DEQ(coreXactor_f_rd_addr$DEQ),
							       .CLR(coreXactor_f_rd_addr$CLR),
							       .D_OUT(coreXactor_f_rd_addr$D_OUT),
							       .FULL_N(coreXactor_f_rd_addr$FULL_N),
							       .EMPTY_N(coreXactor_f_rd_addr$EMPTY_N));

  // submodule coreXactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) coreXactor_f_rd_data(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coreXactor_f_rd_data$D_IN),
							       .ENQ(coreXactor_f_rd_data$ENQ),
							       .DEQ(coreXactor_f_rd_data$DEQ),
							       .CLR(coreXactor_f_rd_data$CLR),
							       .D_OUT(coreXactor_f_rd_data$D_OUT),
							       .FULL_N(coreXactor_f_rd_data$FULL_N),
							       .EMPTY_N(coreXactor_f_rd_data$EMPTY_N));

  // submodule coreXactor_f_wr_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) coreXactor_f_wr_addr(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coreXactor_f_wr_addr$D_IN),
							       .ENQ(coreXactor_f_wr_addr$ENQ),
							       .DEQ(coreXactor_f_wr_addr$DEQ),
							       .CLR(coreXactor_f_wr_addr$CLR),
							       .D_OUT(coreXactor_f_wr_addr$D_OUT),
							       .FULL_N(coreXactor_f_wr_addr$FULL_N),
							       .EMPTY_N(coreXactor_f_wr_addr$EMPTY_N));

  // submodule coreXactor_f_wr_data
  FIFO2 #(.width(32'd37), .guarded(1'd1)) coreXactor_f_wr_data(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coreXactor_f_wr_data$D_IN),
							       .ENQ(coreXactor_f_wr_data$ENQ),
							       .DEQ(coreXactor_f_wr_data$DEQ),
							       .CLR(coreXactor_f_wr_data$CLR),
							       .D_OUT(coreXactor_f_wr_data$D_OUT),
							       .FULL_N(coreXactor_f_wr_data$FULL_N),
							       .EMPTY_N(coreXactor_f_wr_data$EMPTY_N));

  // submodule coreXactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) coreXactor_f_wr_resp(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(coreXactor_f_wr_resp$D_IN),
							      .ENQ(coreXactor_f_wr_resp$ENQ),
							      .DEQ(coreXactor_f_wr_resp$DEQ),
							      .CLR(coreXactor_f_wr_resp$CLR),
							      .D_OUT(coreXactor_f_wr_resp$D_OUT),
							      .FULL_N(coreXactor_f_wr_resp$FULL_N),
							      .EMPTY_N(coreXactor_f_wr_resp$EMPTY_N));

  // submodule debug_module
  mkDebug_Module debug_module(.CLK(CLK),
			      .RST_N(RST_N),
			      .dmi_read_addr_dm_addr(debug_module$dmi_read_addr_dm_addr),
			      .dmi_write_dm_addr(debug_module$dmi_write_dm_addr),
			      .dmi_write_dm_word(debug_module$dmi_write_dm_word),
			      .hart0_hart_client_run_halt_response_put(debug_module$hart0_hart_client_run_halt_response_put),
			      .hart0_hart_csr_mem_client_response_put(debug_module$hart0_hart_csr_mem_client_response_put),
			      .hart0_hart_gpr_mem_client_response_put(debug_module$hart0_hart_gpr_mem_client_response_put),
			      .hart0_hart_reset_client_response_put(debug_module$hart0_hart_reset_client_response_put),
			      .master_arready(debug_module$master_arready),
			      .master_awready(debug_module$master_awready),
			      .master_bid(debug_module$master_bid),
			      .master_bresp(debug_module$master_bresp),
			      .master_bvalid(debug_module$master_bvalid),
			      .master_rdata(debug_module$master_rdata),
			      .master_rid(debug_module$master_rid),
			      .master_rlast(debug_module$master_rlast),
			      .master_rresp(debug_module$master_rresp),
			      .master_rvalid(debug_module$master_rvalid),
			      .master_wready(debug_module$master_wready),
			      .ndm_reset_client_response_put(debug_module$ndm_reset_client_response_put),
			      .EN_dmi_read_addr(debug_module$EN_dmi_read_addr),
			      .EN_dmi_read_data(debug_module$EN_dmi_read_data),
			      .EN_dmi_write(debug_module$EN_dmi_write),
			      .EN_hart0_hart_reset_client_request_get(debug_module$EN_hart0_hart_reset_client_request_get),
			      .EN_hart0_hart_reset_client_response_put(debug_module$EN_hart0_hart_reset_client_response_put),
			      .EN_hart0_hart_client_run_halt_request_get(debug_module$EN_hart0_hart_client_run_halt_request_get),
			      .EN_hart0_hart_client_run_halt_response_put(debug_module$EN_hart0_hart_client_run_halt_response_put),
			      .EN_hart0_hart_get_other_req_get(debug_module$EN_hart0_hart_get_other_req_get),
			      .EN_hart0_hart_gpr_mem_client_request_get(debug_module$EN_hart0_hart_gpr_mem_client_request_get),
			      .EN_hart0_hart_gpr_mem_client_response_put(debug_module$EN_hart0_hart_gpr_mem_client_response_put),
			      .EN_hart0_hart_csr_mem_client_request_get(debug_module$EN_hart0_hart_csr_mem_client_request_get),
			      .EN_hart0_hart_csr_mem_client_response_put(debug_module$EN_hart0_hart_csr_mem_client_response_put),
			      .EN_ndm_reset_client_request_get(debug_module$EN_ndm_reset_client_request_get),
			      .EN_ndm_reset_client_response_put(debug_module$EN_ndm_reset_client_response_put),
			      .RDY_dmi_read_addr(debug_module$RDY_dmi_read_addr),
			      .dmi_read_data(debug_module$dmi_read_data),
			      .RDY_dmi_read_data(debug_module$RDY_dmi_read_data),
			      .RDY_dmi_write(debug_module$RDY_dmi_write),
			      .hart0_hart_reset_client_request_get(debug_module$hart0_hart_reset_client_request_get),
			      .RDY_hart0_hart_reset_client_request_get(debug_module$RDY_hart0_hart_reset_client_request_get),
			      .RDY_hart0_hart_reset_client_response_put(debug_module$RDY_hart0_hart_reset_client_response_put),
			      .hart0_hart_client_run_halt_request_get(debug_module$hart0_hart_client_run_halt_request_get),
			      .RDY_hart0_hart_client_run_halt_request_get(debug_module$RDY_hart0_hart_client_run_halt_request_get),
			      .RDY_hart0_hart_client_run_halt_response_put(debug_module$RDY_hart0_hart_client_run_halt_response_put),
			      .hart0_hart_get_other_req_get(),
			      .RDY_hart0_hart_get_other_req_get(),
			      .hart0_hart_gpr_mem_client_request_get(debug_module$hart0_hart_gpr_mem_client_request_get),
			      .RDY_hart0_hart_gpr_mem_client_request_get(debug_module$RDY_hart0_hart_gpr_mem_client_request_get),
			      .RDY_hart0_hart_gpr_mem_client_response_put(debug_module$RDY_hart0_hart_gpr_mem_client_response_put),
			      .hart0_hart_csr_mem_client_request_get(debug_module$hart0_hart_csr_mem_client_request_get),
			      .RDY_hart0_hart_csr_mem_client_request_get(debug_module$RDY_hart0_hart_csr_mem_client_request_get),
			      .RDY_hart0_hart_csr_mem_client_response_put(debug_module$RDY_hart0_hart_csr_mem_client_response_put),
			      .ndm_reset_client_request_get(debug_module$ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_request_get(debug_module$RDY_ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_response_put(debug_module$RDY_ndm_reset_client_response_put),
			      .master_awvalid(debug_module$master_awvalid),
			      .master_awid(debug_module$master_awid),
			      .master_awaddr(debug_module$master_awaddr),
			      .master_awlen(debug_module$master_awlen),
			      .master_awsize(debug_module$master_awsize),
			      .master_awburst(debug_module$master_awburst),
			      .master_awlock(debug_module$master_awlock),
			      .master_awcache(debug_module$master_awcache),
			      .master_awprot(debug_module$master_awprot),
			      .master_awqos(debug_module$master_awqos),
			      .master_awregion(debug_module$master_awregion),
			      .master_wvalid(debug_module$master_wvalid),
			      .master_wdata(debug_module$master_wdata),
			      .master_wstrb(debug_module$master_wstrb),
			      .master_wlast(debug_module$master_wlast),
			      .master_bready(debug_module$master_bready),
			      .master_arvalid(debug_module$master_arvalid),
			      .master_arid(debug_module$master_arid),
			      .master_araddr(debug_module$master_araddr),
			      .master_arlen(debug_module$master_arlen),
			      .master_arsize(debug_module$master_arsize),
			      .master_arburst(debug_module$master_arburst),
			      .master_arlock(debug_module$master_arlock),
			      .master_arcache(debug_module$master_arcache),
			      .master_arprot(debug_module$master_arprot),
			      .master_arqos(debug_module$master_arqos),
			      .master_arregion(debug_module$master_arregion),
			      .master_rready(debug_module$master_rready));

  // submodule dmXactor_f_rd_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) dmXactor_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dmXactor_f_rd_addr$D_IN),
							     .ENQ(dmXactor_f_rd_addr$ENQ),
							     .DEQ(dmXactor_f_rd_addr$DEQ),
							     .CLR(dmXactor_f_rd_addr$CLR),
							     .D_OUT(dmXactor_f_rd_addr$D_OUT),
							     .FULL_N(dmXactor_f_rd_addr$FULL_N),
							     .EMPTY_N(dmXactor_f_rd_addr$EMPTY_N));

  // submodule dmXactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) dmXactor_f_rd_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dmXactor_f_rd_data$D_IN),
							     .ENQ(dmXactor_f_rd_data$ENQ),
							     .DEQ(dmXactor_f_rd_data$DEQ),
							     .CLR(dmXactor_f_rd_data$CLR),
							     .D_OUT(dmXactor_f_rd_data$D_OUT),
							     .FULL_N(dmXactor_f_rd_data$FULL_N),
							     .EMPTY_N(dmXactor_f_rd_data$EMPTY_N));

  // submodule dmXactor_f_wr_addr
  FIFO2 #(.width(32'd65), .guarded(1'd1)) dmXactor_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dmXactor_f_wr_addr$D_IN),
							     .ENQ(dmXactor_f_wr_addr$ENQ),
							     .DEQ(dmXactor_f_wr_addr$DEQ),
							     .CLR(dmXactor_f_wr_addr$CLR),
							     .D_OUT(dmXactor_f_wr_addr$D_OUT),
							     .FULL_N(dmXactor_f_wr_addr$FULL_N),
							     .EMPTY_N(dmXactor_f_wr_addr$EMPTY_N));

  // submodule dmXactor_f_wr_data
  FIFO2 #(.width(32'd37), .guarded(1'd1)) dmXactor_f_wr_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dmXactor_f_wr_data$D_IN),
							     .ENQ(dmXactor_f_wr_data$ENQ),
							     .DEQ(dmXactor_f_wr_data$DEQ),
							     .CLR(dmXactor_f_wr_data$CLR),
							     .D_OUT(dmXactor_f_wr_data$D_OUT),
							     .FULL_N(dmXactor_f_wr_data$FULL_N),
							     .EMPTY_N(dmXactor_f_wr_data$EMPTY_N));

  // submodule dmXactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) dmXactor_f_wr_resp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(dmXactor_f_wr_resp$D_IN),
							    .ENQ(dmXactor_f_wr_resp$ENQ),
							    .DEQ(dmXactor_f_wr_resp$DEQ),
							    .CLR(dmXactor_f_wr_resp$CLR),
							    .D_OUT(dmXactor_f_wr_resp$D_OUT),
							    .FULL_N(dmXactor_f_wr_resp$FULL_N),
							    .EMPTY_N(dmXactor_f_wr_resp$EMPTY_N));

  // submodule jtagtap
  mkJtagTap jtagtap(.CLK(CLK),
		    .RST_N(RST_N),
		    .dmi_req_ready(jtagtap$dmi_req_ready),
		    .dmi_rsp_data(jtagtap$dmi_rsp_data),
		    .dmi_rsp_response(jtagtap$dmi_rsp_response),
		    .dmi_rsp_valid(jtagtap$dmi_rsp_valid),
		    .jtag_tclk(jtagtap$jtag_tclk),
		    .jtag_tdi(jtagtap$jtag_tdi),
		    .jtag_tms(jtagtap$jtag_tms),
		    .jtag_tdo(jtagtap$jtag_tdo),
		    .dmi_req_valid(jtagtap$dmi_req_valid),
		    .dmi_req_addr(jtagtap$dmi_req_addr),
		    .dmi_req_data(jtagtap$dmi_req_data),
		    .dmi_req_op(jtagtap$dmi_req_op),
		    .dmi_rsp_ready(jtagtap$dmi_rsp_ready),
		    .CLK_jtag_tclk_out(jtagtap$CLK_jtag_tclk_out),
		    .CLK_GATE_jtag_tclk_out());

  // submodule req_FF
  FIFO1 #(.width(32'd1), .guarded(1'd1)) req_FF(.RST(RST_N),
						.CLK(CLK),
						.D_IN(req_FF$D_IN),
						.ENQ(req_FF$ENQ),
						.DEQ(req_FF$DEQ),
						.CLR(req_FF$CLR),
						.D_OUT(req_FF$D_OUT),
						.FULL_N(req_FF$FULL_N),
						.EMPTY_N(req_FF$EMPTY_N));

  // submodule resetIfc
  MakeResetA #(.RSTDELAY(32'd2), .init(1'd0)) resetIfc(.CLK(CLK),
						       .RST(RST_N),
						       .DST_CLK(CLK),
						       .ASSERT_IN(resetIfc$ASSERT_IN),
						       .ASSERT_OUT(),
						       .OUT_RST(resetIfc$OUT_RST));

  // submodule rsp_FF
  FIFO1 #(.width(32'd1), .guarded(1'd1)) rsp_FF(.RST(RST_N),
						.CLK(CLK),
						.D_IN(rsp_FF$D_IN),
						.ENQ(rsp_FF$ENQ),
						.DEQ(rsp_FF$DEQ),
						.CLR(rsp_FF$CLR),
						.D_OUT(rsp_FF$D_OUT),
						.FULL_N(rsp_FF$FULL_N),
						.EMPTY_N(rsp_FF$EMPTY_N));

  // submodule which_FF
  FIFO1 #(.width(32'd1), .guarded(1'd1)) which_FF(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(which_FF$D_IN),
						  .ENQ(which_FF$ENQ),
						  .DEQ(which_FF$DEQ),
						  .CLR(which_FF$CLR),
						  .D_OUT(which_FF$D_OUT),
						  .FULL_N(which_FF$FULL_N),
						  .EMPTY_N(which_FF$EMPTY_N));

  // rule RL_rl_dmi_rsp
  assign CAN_FIRE_RL_rl_dmi_rsp = 1'd1 ;
  assign WILL_FIRE_RL_rl_dmi_rsp = 1'd1 ;

  // rule RL_hart_reset_rl
  assign CAN_FIRE_RL_hart_reset_rl =
	     debug_module$RDY_hart0_hart_reset_client_request_get &&
	     req_FF$FULL_N &&
	     which_FF$FULL_N ;
  assign WILL_FIRE_RL_hart_reset_rl = CAN_FIRE_RL_hart_reset_rl ;

  // rule RL_ndm_reset_rl
  assign CAN_FIRE_RL_ndm_reset_rl =
	     debug_module$RDY_ndm_reset_client_request_get && req_FF$FULL_N &&
	     which_FF$FULL_N ;
  assign WILL_FIRE_RL_ndm_reset_rl =
	     CAN_FIRE_RL_ndm_reset_rl && !WILL_FIRE_RL_hart_reset_rl ;

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_sbus_aradd_rl
  assign CAN_FIRE_RL_sbus_aradd_rl =
	     dmXactor_f_rd_addr$EMPTY_N && coreXactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_sbus_aradd_rl = CAN_FIRE_RL_sbus_aradd_rl ;

  // rule RL_sbus_wdata_rl
  assign CAN_FIRE_RL_sbus_wdata_rl =
	     dmXactor_f_wr_data$EMPTY_N && coreXactor_f_wr_data$FULL_N &&
	     rg_bursting ;
  assign WILL_FIRE_RL_sbus_wdata_rl = CAN_FIRE_RL_sbus_wdata_rl ;

  // rule RL_reset_req_rl
  assign CAN_FIRE_RL_reset_req_rl =
	     coreXactor_f_rd_addr$FULL_N && req_FF$EMPTY_N && !rg_busy ;
  assign WILL_FIRE_RL_reset_req_rl =
	     CAN_FIRE_RL_reset_req_rl && !WILL_FIRE_RL_sbus_awadd_rl &&
	     !WILL_FIRE_RL_sbus_aradd_rl ;

  // rule RL_runhalt_req_rl
  assign CAN_FIRE_RL_runhalt_req_rl =
	     debug_module$RDY_hart0_hart_client_run_halt_request_get &&
	     coreXactor_f_rd_addr$FULL_N &&
	     !rg_busy ;
  assign WILL_FIRE_RL_runhalt_req_rl =
	     CAN_FIRE_RL_runhalt_req_rl && !WILL_FIRE_RL_reset_req_rl &&
	     !WILL_FIRE_RL_sbus_aradd_rl ;

  // rule RL_sbus_awadd_rl
  assign CAN_FIRE_RL_sbus_awadd_rl =
	     dmXactor_f_wr_addr$EMPTY_N && coreXactor_f_wr_addr$FULL_N &&
	     !rg_bursting &&
	     !rg_busy ;
  assign WILL_FIRE_RL_sbus_awadd_rl = CAN_FIRE_RL_sbus_awadd_rl ;

  // rule RL_gpr_req_rl
  assign CAN_FIRE_RL_gpr_req_rl =
	     debug_module$RDY_hart0_hart_gpr_mem_client_request_get &&
	     coreXactor_f_wr_addr$FULL_N &&
	     coreXactor_f_wr_data$FULL_N &&
	     coreXactor_f_rd_addr$FULL_N &&
	     !rg_bursting &&
	     !rg_busy ;
  assign WILL_FIRE_RL_gpr_req_rl =
	     CAN_FIRE_RL_gpr_req_rl && !WILL_FIRE_RL_runhalt_req_rl &&
	     !WILL_FIRE_RL_reset_req_rl &&
	     !WILL_FIRE_RL_sbus_awadd_rl &&
	     !WILL_FIRE_RL_sbus_aradd_rl ;

  // rule RL_csr_req_rl
  assign CAN_FIRE_RL_csr_req_rl =
	     debug_module$RDY_hart0_hart_csr_mem_client_request_get &&
	     coreXactor_f_wr_addr$FULL_N &&
	     coreXactor_f_wr_data$FULL_N &&
	     coreXactor_f_rd_addr$FULL_N &&
	     !rg_bursting &&
	     !rg_busy ;
  assign WILL_FIRE_RL_csr_req_rl =
	     CAN_FIRE_RL_csr_req_rl && !WILL_FIRE_RL_gpr_req_rl &&
	     !WILL_FIRE_RL_runhalt_req_rl &&
	     !WILL_FIRE_RL_reset_req_rl &&
	     !WILL_FIRE_RL_sbus_awadd_rl &&
	     !WILL_FIRE_RL_sbus_aradd_rl ;

  // rule RL_rd_responses_rl
  assign CAN_FIRE_RL_rd_responses_rl =
	     coreXactor_f_rd_data$EMPTY_N &&
	     IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233 ;
  assign WILL_FIRE_RL_rd_responses_rl = CAN_FIRE_RL_rd_responses_rl ;

  // rule RL_wr_responses_rl
  assign CAN_FIRE_RL_wr_responses_rl =
	     coreXactor_f_wr_resp$EMPTY_N &&
	     CASE_coreXactor_f_wr_respD_OUT_BITS_5_TO_2_0__ETC__q1 ;
  assign WILL_FIRE_RL_wr_responses_rl =
	     CAN_FIRE_RL_wr_responses_rl && !WILL_FIRE_RL_rd_responses_rl ;

  // rule RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_rl_dmi_req_cpu
  assign CAN_FIRE_RL_rl_dmi_req_cpu =
	     bus_dmi_req_fifof$EMPTY_N &&
	     IF_bus_dmi_req_fifof_first__0_BITS_1_TO_0_1_EQ_ETC___d71 ;
  assign WILL_FIRE_RL_rl_dmi_req_cpu = CAN_FIRE_RL_rl_dmi_req_cpu ;

  // rule RL_rl_dmi_rsp_cpu
  assign CAN_FIRE_RL_rl_dmi_rsp_cpu =
	     bus_dmi_rsp_fifof_cntr_r != 2'd2 &&
	     debug_module$RDY_dmi_read_data ;
  assign WILL_FIRE_RL_rl_dmi_rsp_cpu =
	     CAN_FIRE_RL_rl_dmi_rsp_cpu && !WILL_FIRE_RL_rl_dmi_req_cpu ;

  // rule RL_reset_rsp_rl
  assign CAN_FIRE_RL_reset_rsp_rl =
	     rsp_FF$EMPTY_N &&
	     which_FF_i_notEmpty__2_AND_IF_which_FF_first___ETC___d97 ;
  assign WILL_FIRE_RL_reset_rsp_rl = CAN_FIRE_RL_reset_rsp_rl ;

  // rule RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_rl_dmi_req
  assign CAN_FIRE_RL_rl_dmi_req = 1'd1 ;
  assign WILL_FIRE_RL_rl_dmi_req = 1'd1 ;

  // rule RL_bus_dmi_req_do_enq
  assign CAN_FIRE_RL_bus_dmi_req_do_enq =
	     bus_dmi_req_fifof$FULL_N && jtagtap$dmi_req_valid ;
  assign WILL_FIRE_RL_bus_dmi_req_do_enq = CAN_FIRE_RL_bus_dmi_req_do_enq ;

  // rule RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_6_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_bus_dmi_rsp_do_deq
  assign CAN_FIRE_RL_bus_dmi_rsp_do_deq =
	     bus_dmi_rsp_fifof_cntr_r != 2'd0 && jtagtap$dmi_rsp_ready ;
  assign WILL_FIRE_RL_bus_dmi_rsp_do_deq = CAN_FIRE_RL_bus_dmi_rsp_do_deq ;

  // rule RL_bus_dmi_rsp_fifof_incCtr
  assign CAN_FIRE_RL_bus_dmi_rsp_fifof_incCtr =
	     bus_dmi_rsp_fifof_enqueueing$whas &&
	     bus_dmi_rsp_fifof_enqueueing$whas &&
	     !CAN_FIRE_RL_bus_dmi_rsp_do_deq ;
  assign WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr =
	     CAN_FIRE_RL_bus_dmi_rsp_fifof_incCtr ;

  // rule RL_bus_dmi_rsp_fifof_decCtr
  assign CAN_FIRE_RL_bus_dmi_rsp_fifof_decCtr =
	     CAN_FIRE_RL_bus_dmi_rsp_do_deq &&
	     !bus_dmi_rsp_fifof_enqueueing$whas ;
  assign WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr =
	     CAN_FIRE_RL_bus_dmi_rsp_fifof_decCtr ;

  // rule RL_bus_dmi_rsp_fifof_both
  assign CAN_FIRE_RL_bus_dmi_rsp_fifof_both =
	     bus_dmi_rsp_fifof_enqueueing$whas &&
	     CAN_FIRE_RL_bus_dmi_rsp_do_deq &&
	     bus_dmi_rsp_fifof_enqueueing$whas ;
  assign WILL_FIRE_RL_bus_dmi_rsp_fifof_both =
	     CAN_FIRE_RL_bus_dmi_rsp_fifof_both ;

  // rule RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_7_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_8_mkConnectionVtoAf =
	     1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo3 ;
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd0 ;
  assign MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo1 ;
  assign MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd1 ;
  assign MUX_bus_dmi_rsp_fifof_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] != 2'd1 ;
  assign MUX_coreXactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_gpr_req_rl &&
	     !debug_module$hart0_hart_gpr_mem_client_request_get[37] ;
  assign MUX_coreXactor_f_rd_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_csr_req_rl &&
	     !debug_module$hart0_hart_csr_mem_client_request_get[44] ;
  assign MUX_coreXactor_f_wr_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_gpr_req_rl &&
	     debug_module$hart0_hart_gpr_mem_client_request_get[37] ;
  assign MUX_coreXactor_f_wr_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_csr_req_rl &&
	     debug_module$hart0_hart_csr_mem_client_request_get[44] ;
  assign MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__SEL_1 =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd4 ;
  assign MUX_debug_module$hart0_hart_gpr_mem_client_response_put_1__SEL_1 =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd3 ;
  assign MUX_bus_dmi_rsp_fifof_cntr_r$write_1__VAL_2 =
	     bus_dmi_rsp_fifof_cntr_r + 2'd1 ;
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 =
	     (bus_dmi_rsp_fifof_cntr_r == 2'd1) ?
	       MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 :
	       bus_dmi_rsp_fifof_q_1 ;
  assign MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 =
	     MUX_bus_dmi_rsp_fifof_x_wire$wset_1__SEL_1 ?
	       MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_1 :
	       MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_2 ;
  assign MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_1 =
	     (bus_dmi_rsp_fifof_cntr_r == 2'd2) ?
	       MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 :
	       34'd0 ;
  assign MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_1 =
	     { 32'hAAAAAAAA,
	       (bus_dmi_req_fifof$D_OUT[1:0] == 2'd2) ? 2'd0 : 2'd2 } ;
  assign MUX_bus_dmi_rsp_fifof_x_wire$wset_1__VAL_2 =
	     { debug_module$dmi_read_data, 2'd0 } ;
  assign MUX_coreXactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd3, x_awaddr__h5941, 29'd589824 } ;
  assign MUX_coreXactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd4, x_awaddr__h6117, 29'd589824 } ;
  assign MUX_coreXactor_f_rd_addr$enq_1__VAL_4 =
	     { 4'd1, x_araddr__h5727, 29'd589824 } ;
  assign MUX_coreXactor_f_rd_addr$enq_1__VAL_5 =
	     { 4'd2, x_araddr__h5814, 29'd589824 } ;
  assign MUX_coreXactor_f_wr_data$enq_1__VAL_1 =
	     { debug_module$hart0_hart_gpr_mem_client_request_get[31:0],
	       5'd31 } ;
  assign MUX_coreXactor_f_wr_data$enq_1__VAL_2 =
	     { debug_module$hart0_hart_csr_mem_client_request_get[31:0],
	       5'd31 } ;
  assign MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_1 =
	     { coreXactor_f_rd_data$D_OUT[2:1] == 2'b0,
	       coreXactor_f_rd_data$D_OUT[34:3] } ;
  assign MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_2 =
	     { coreXactor_f_wr_resp$D_OUT[1:0] == 2'b0, 32'hAAAAAAAA } ;

  // inlined wires
  assign bus_dmi_rsp_fifof_enqueueing$whas =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] != 2'd1 ||
	     WILL_FIRE_RL_rl_dmi_rsp_cpu ;
  assign bus_dmi_req_data_wire$wget =
	     { jtagtap$dmi_req_addr,
	       jtagtap$dmi_req_data,
	       jtagtap$dmi_req_op } ;

  // register bus_dmi_rsp_fifof_cntr_r
  assign bus_dmi_rsp_fifof_cntr_r$D_IN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ?
	       bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 :
	       MUX_bus_dmi_rsp_fifof_cntr_r$write_1__VAL_2 ;
  assign bus_dmi_rsp_fifof_cntr_r$EN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr ;

  // register bus_dmi_rsp_fifof_q_0
  always@(MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr or bus_dmi_rsp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_1:
	  bus_dmi_rsp_fifof_q_0$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_1;
      MUX_bus_dmi_rsp_fifof_q_0$write_1__SEL_2:
	  bus_dmi_rsp_fifof_q_0$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr:
	  bus_dmi_rsp_fifof_q_0$D_IN = bus_dmi_rsp_fifof_q_1;
      default: bus_dmi_rsp_fifof_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_dmi_rsp_fifof_q_0$EN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ;

  // register bus_dmi_rsp_fifof_q_1
  always@(MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1 or
	  MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_1 or
	  MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2 or
	  MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_1:
	  bus_dmi_rsp_fifof_q_1$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_1$write_1__VAL_1;
      MUX_bus_dmi_rsp_fifof_q_1$write_1__SEL_2:
	  bus_dmi_rsp_fifof_q_1$D_IN =
	      MUX_bus_dmi_rsp_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr:
	  bus_dmi_rsp_fifof_q_1$D_IN = 34'd0;
      default: bus_dmi_rsp_fifof_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_dmi_rsp_fifof_q_1$EN =
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_incCtr &&
	     bus_dmi_rsp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_bus_dmi_rsp_fifof_decCtr ;

  // register rg_bursting
  assign rg_bursting$D_IN =
	     !WILL_FIRE_RL_sbus_wdata_rl || !dmXactor_f_wr_data$D_OUT[0] ;
  assign rg_bursting$EN =
	     WILL_FIRE_RL_sbus_wdata_rl || WILL_FIRE_RL_sbus_awadd_rl ;

  // register rg_busy
  assign rg_busy$D_IN =
	     !WILL_FIRE_RL_wr_responses_rl && !WILL_FIRE_RL_rd_responses_rl ;
  assign rg_busy$EN =
	     WILL_FIRE_RL_wr_responses_rl || WILL_FIRE_RL_rd_responses_rl ||
	     WILL_FIRE_RL_reset_req_rl ||
	     WILL_FIRE_RL_sbus_awadd_rl ;

  // submodule bus_dmi_req_fifof
  assign bus_dmi_req_fifof$D_IN = bus_dmi_req_data_wire$wget ;
  assign bus_dmi_req_fifof$ENQ = CAN_FIRE_RL_bus_dmi_req_do_enq ;
  assign bus_dmi_req_fifof$DEQ = CAN_FIRE_RL_rl_dmi_req_cpu ;
  assign bus_dmi_req_fifof$CLR = 1'b0 ;

  // submodule coreXactor_f_rd_addr
  always@(MUX_coreXactor_f_rd_addr$enq_1__SEL_1 or
	  MUX_coreXactor_f_rd_addr$enq_1__VAL_1 or
	  MUX_coreXactor_f_rd_addr$enq_1__SEL_2 or
	  MUX_coreXactor_f_rd_addr$enq_1__VAL_2 or
	  WILL_FIRE_RL_sbus_aradd_rl or
	  dmXactor_f_rd_addr$D_OUT or
	  WILL_FIRE_RL_reset_req_rl or
	  MUX_coreXactor_f_rd_addr$enq_1__VAL_4 or
	  WILL_FIRE_RL_runhalt_req_rl or
	  MUX_coreXactor_f_rd_addr$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coreXactor_f_rd_addr$enq_1__SEL_1:
	  coreXactor_f_rd_addr$D_IN = MUX_coreXactor_f_rd_addr$enq_1__VAL_1;
      MUX_coreXactor_f_rd_addr$enq_1__SEL_2:
	  coreXactor_f_rd_addr$D_IN = MUX_coreXactor_f_rd_addr$enq_1__VAL_2;
      WILL_FIRE_RL_sbus_aradd_rl:
	  coreXactor_f_rd_addr$D_IN = dmXactor_f_rd_addr$D_OUT;
      WILL_FIRE_RL_reset_req_rl:
	  coreXactor_f_rd_addr$D_IN = MUX_coreXactor_f_rd_addr$enq_1__VAL_4;
      WILL_FIRE_RL_runhalt_req_rl:
	  coreXactor_f_rd_addr$D_IN = MUX_coreXactor_f_rd_addr$enq_1__VAL_5;
      default: coreXactor_f_rd_addr$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign coreXactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_gpr_req_rl &&
	     !debug_module$hart0_hart_gpr_mem_client_request_get[37] ||
	     WILL_FIRE_RL_csr_req_rl &&
	     !debug_module$hart0_hart_csr_mem_client_request_get[44] ||
	     WILL_FIRE_RL_sbus_aradd_rl ||
	     WILL_FIRE_RL_reset_req_rl ||
	     WILL_FIRE_RL_runhalt_req_rl ;
  assign coreXactor_f_rd_addr$DEQ =
	     coreXactor_f_rd_addr$EMPTY_N && toCore_arready ;
  assign coreXactor_f_rd_addr$CLR = 1'b0 ;

  // submodule coreXactor_f_rd_data
  assign coreXactor_f_rd_data$D_IN =
	     { toCore_rid, toCore_rdata, toCore_rresp, toCore_rlast } ;
  assign coreXactor_f_rd_data$ENQ =
	     toCore_rvalid && coreXactor_f_rd_data$FULL_N ;
  assign coreXactor_f_rd_data$DEQ = CAN_FIRE_RL_rd_responses_rl ;
  assign coreXactor_f_rd_data$CLR = 1'b0 ;

  // submodule coreXactor_f_wr_addr
  always@(MUX_coreXactor_f_wr_addr$enq_1__SEL_1 or
	  MUX_coreXactor_f_rd_addr$enq_1__VAL_1 or
	  MUX_coreXactor_f_wr_addr$enq_1__SEL_2 or
	  MUX_coreXactor_f_rd_addr$enq_1__VAL_2 or
	  WILL_FIRE_RL_sbus_awadd_rl or dmXactor_f_wr_addr$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coreXactor_f_wr_addr$enq_1__SEL_1:
	  coreXactor_f_wr_addr$D_IN = MUX_coreXactor_f_rd_addr$enq_1__VAL_1;
      MUX_coreXactor_f_wr_addr$enq_1__SEL_2:
	  coreXactor_f_wr_addr$D_IN = MUX_coreXactor_f_rd_addr$enq_1__VAL_2;
      WILL_FIRE_RL_sbus_awadd_rl:
	  coreXactor_f_wr_addr$D_IN = dmXactor_f_wr_addr$D_OUT;
      default: coreXactor_f_wr_addr$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign coreXactor_f_wr_addr$ENQ =
	     WILL_FIRE_RL_gpr_req_rl &&
	     debug_module$hart0_hart_gpr_mem_client_request_get[37] ||
	     WILL_FIRE_RL_csr_req_rl &&
	     debug_module$hart0_hart_csr_mem_client_request_get[44] ||
	     WILL_FIRE_RL_sbus_awadd_rl ;
  assign coreXactor_f_wr_addr$DEQ =
	     coreXactor_f_wr_addr$EMPTY_N && toCore_awready ;
  assign coreXactor_f_wr_addr$CLR = 1'b0 ;

  // submodule coreXactor_f_wr_data
  always@(MUX_coreXactor_f_wr_addr$enq_1__SEL_1 or
	  MUX_coreXactor_f_wr_data$enq_1__VAL_1 or
	  MUX_coreXactor_f_wr_addr$enq_1__SEL_2 or
	  MUX_coreXactor_f_wr_data$enq_1__VAL_2 or
	  WILL_FIRE_RL_sbus_wdata_rl or dmXactor_f_wr_data$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coreXactor_f_wr_addr$enq_1__SEL_1:
	  coreXactor_f_wr_data$D_IN = MUX_coreXactor_f_wr_data$enq_1__VAL_1;
      MUX_coreXactor_f_wr_addr$enq_1__SEL_2:
	  coreXactor_f_wr_data$D_IN = MUX_coreXactor_f_wr_data$enq_1__VAL_2;
      WILL_FIRE_RL_sbus_wdata_rl:
	  coreXactor_f_wr_data$D_IN = dmXactor_f_wr_data$D_OUT;
      default: coreXactor_f_wr_data$D_IN =
		   37'h0AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign coreXactor_f_wr_data$ENQ =
	     WILL_FIRE_RL_gpr_req_rl &&
	     debug_module$hart0_hart_gpr_mem_client_request_get[37] ||
	     WILL_FIRE_RL_csr_req_rl &&
	     debug_module$hart0_hart_csr_mem_client_request_get[44] ||
	     WILL_FIRE_RL_sbus_wdata_rl ;
  assign coreXactor_f_wr_data$DEQ =
	     coreXactor_f_wr_data$EMPTY_N && toCore_wready ;
  assign coreXactor_f_wr_data$CLR = 1'b0 ;

  // submodule coreXactor_f_wr_resp
  assign coreXactor_f_wr_resp$D_IN = { toCore_bid, toCore_bresp } ;
  assign coreXactor_f_wr_resp$ENQ =
	     toCore_bvalid && coreXactor_f_wr_resp$FULL_N ;
  assign coreXactor_f_wr_resp$DEQ = WILL_FIRE_RL_wr_responses_rl ;
  assign coreXactor_f_wr_resp$CLR = 1'b0 ;

  // submodule debug_module
  assign debug_module$dmi_read_addr_dm_addr = bus_dmi_req_fifof$D_OUT[40:34] ;
  assign debug_module$dmi_write_dm_addr = bus_dmi_req_fifof$D_OUT[40:34] ;
  assign debug_module$dmi_write_dm_word = bus_dmi_req_fifof$D_OUT[33:2] ;
  assign debug_module$hart0_hart_client_run_halt_response_put =
	     coreXactor_f_rd_data$D_OUT[3] ;
  assign debug_module$hart0_hart_csr_mem_client_response_put =
	     MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__SEL_1 ?
	       MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_1 :
	       MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_2 ;
  assign debug_module$hart0_hart_gpr_mem_client_response_put =
	     MUX_debug_module$hart0_hart_gpr_mem_client_response_put_1__SEL_1 ?
	       MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_1 :
	       MUX_debug_module$hart0_hart_csr_mem_client_response_put_1__VAL_2 ;
  assign debug_module$hart0_hart_reset_client_response_put = rsp_FF$D_OUT ;
  assign debug_module$master_arready = dmXactor_f_rd_addr$FULL_N ;
  assign debug_module$master_awready = dmXactor_f_wr_addr$FULL_N ;
  assign debug_module$master_bid = dmXactor_f_wr_resp$D_OUT[5:2] ;
  assign debug_module$master_bresp = dmXactor_f_wr_resp$D_OUT[1:0] ;
  assign debug_module$master_bvalid = dmXactor_f_wr_resp$EMPTY_N ;
  assign debug_module$master_rdata = dmXactor_f_rd_data$D_OUT[34:3] ;
  assign debug_module$master_rid = dmXactor_f_rd_data$D_OUT[38:35] ;
  assign debug_module$master_rlast = dmXactor_f_rd_data$D_OUT[0] ;
  assign debug_module$master_rresp = dmXactor_f_rd_data$D_OUT[2:1] ;
  assign debug_module$master_rvalid = dmXactor_f_rd_data$EMPTY_N ;
  assign debug_module$master_wready = dmXactor_f_wr_data$FULL_N ;
  assign debug_module$ndm_reset_client_response_put = rsp_FF$D_OUT ;
  assign debug_module$EN_dmi_read_addr =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] == 2'd1 ;
  assign debug_module$EN_dmi_read_data = WILL_FIRE_RL_rl_dmi_rsp_cpu ;
  assign debug_module$EN_dmi_write =
	     WILL_FIRE_RL_rl_dmi_req_cpu &&
	     bus_dmi_req_fifof$D_OUT[1:0] == 2'd2 ;
  assign debug_module$EN_hart0_hart_reset_client_request_get =
	     CAN_FIRE_RL_hart_reset_rl ;
  assign debug_module$EN_hart0_hart_reset_client_response_put =
	     WILL_FIRE_RL_reset_rsp_rl && !which_FF$D_OUT ;
  assign debug_module$EN_hart0_hart_client_run_halt_request_get =
	     WILL_FIRE_RL_runhalt_req_rl ;
  assign debug_module$EN_hart0_hart_client_run_halt_response_put =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd2 ;
  assign debug_module$EN_hart0_hart_get_other_req_get = 1'b0 ;
  assign debug_module$EN_hart0_hart_gpr_mem_client_request_get =
	     WILL_FIRE_RL_gpr_req_rl ;
  assign debug_module$EN_hart0_hart_gpr_mem_client_response_put =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd3 ||
	     WILL_FIRE_RL_wr_responses_rl &&
	     coreXactor_f_wr_resp$D_OUT[5:2] == 4'd3 ;
  assign debug_module$EN_hart0_hart_csr_mem_client_request_get =
	     WILL_FIRE_RL_csr_req_rl ;
  assign debug_module$EN_hart0_hart_csr_mem_client_response_put =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd4 ||
	     WILL_FIRE_RL_wr_responses_rl &&
	     coreXactor_f_wr_resp$D_OUT[5:2] == 4'd4 ;
  assign debug_module$EN_ndm_reset_client_request_get =
	     WILL_FIRE_RL_ndm_reset_rl ;
  assign debug_module$EN_ndm_reset_client_response_put =
	     WILL_FIRE_RL_reset_rsp_rl && which_FF$D_OUT ;

  // submodule dmXactor_f_rd_addr
  assign dmXactor_f_rd_addr$D_IN =
	     { debug_module$master_arid,
	       debug_module$master_araddr,
	       debug_module$master_arlen,
	       debug_module$master_arsize,
	       debug_module$master_arburst,
	       debug_module$master_arlock,
	       debug_module$master_arcache,
	       debug_module$master_arprot,
	       debug_module$master_arqos,
	       debug_module$master_arregion } ;
  assign dmXactor_f_rd_addr$ENQ =
	     debug_module$master_arvalid && dmXactor_f_rd_addr$FULL_N ;
  assign dmXactor_f_rd_addr$DEQ = CAN_FIRE_RL_sbus_aradd_rl ;
  assign dmXactor_f_rd_addr$CLR = 1'b0 ;

  // submodule dmXactor_f_rd_data
  assign dmXactor_f_rd_data$D_IN = coreXactor_f_rd_data$D_OUT ;
  assign dmXactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd0 ;
  assign dmXactor_f_rd_data$DEQ =
	     debug_module$master_rready && dmXactor_f_rd_data$EMPTY_N ;
  assign dmXactor_f_rd_data$CLR = 1'b0 ;

  // submodule dmXactor_f_wr_addr
  assign dmXactor_f_wr_addr$D_IN =
	     { debug_module$master_awid,
	       debug_module$master_awaddr,
	       debug_module$master_awlen,
	       debug_module$master_awsize,
	       debug_module$master_awburst,
	       debug_module$master_awlock,
	       debug_module$master_awcache,
	       debug_module$master_awprot,
	       debug_module$master_awqos,
	       debug_module$master_awregion } ;
  assign dmXactor_f_wr_addr$ENQ =
	     debug_module$master_awvalid && dmXactor_f_wr_addr$FULL_N ;
  assign dmXactor_f_wr_addr$DEQ = CAN_FIRE_RL_sbus_awadd_rl ;
  assign dmXactor_f_wr_addr$CLR = 1'b0 ;

  // submodule dmXactor_f_wr_data
  assign dmXactor_f_wr_data$D_IN =
	     { debug_module$master_wdata,
	       debug_module$master_wstrb,
	       debug_module$master_wlast } ;
  assign dmXactor_f_wr_data$ENQ =
	     debug_module$master_wvalid && dmXactor_f_wr_data$FULL_N ;
  assign dmXactor_f_wr_data$DEQ = CAN_FIRE_RL_sbus_wdata_rl ;
  assign dmXactor_f_wr_data$CLR = 1'b0 ;

  // submodule dmXactor_f_wr_resp
  assign dmXactor_f_wr_resp$D_IN = coreXactor_f_wr_resp$D_OUT ;
  assign dmXactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_wr_responses_rl &&
	     coreXactor_f_wr_resp$D_OUT[5:2] == 4'd0 ;
  assign dmXactor_f_wr_resp$DEQ =
	     debug_module$master_bready && dmXactor_f_wr_resp$EMPTY_N ;
  assign dmXactor_f_wr_resp$CLR = 1'b0 ;

  // submodule jtagtap
  assign jtagtap$dmi_req_ready = bus_dmi_req_fifof$FULL_N ;
  assign jtagtap$dmi_rsp_data = bus_dmi_rsp_fifof_q_0[33:2] ;
  assign jtagtap$dmi_rsp_response = bus_dmi_rsp_fifof_q_0[1:0] ;
  assign jtagtap$dmi_rsp_valid = bus_dmi_rsp_fifof_cntr_r != 2'd0 ;
  assign jtagtap$jtag_tclk = jtag_tclk ;
  assign jtagtap$jtag_tdi = jtag_tdi ;
  assign jtagtap$jtag_tms = jtag_tms ;

  // submodule req_FF
  assign req_FF$D_IN =
	     WILL_FIRE_RL_hart_reset_rl ?
	       debug_module$hart0_hart_reset_client_request_get :
	       debug_module$ndm_reset_client_request_get ;
  assign req_FF$ENQ =
	     WILL_FIRE_RL_hart_reset_rl || WILL_FIRE_RL_ndm_reset_rl ;
  assign req_FF$DEQ = WILL_FIRE_RL_reset_req_rl ;
  assign req_FF$CLR = 1'b0 ;

  // submodule resetIfc
  assign resetIfc$ASSERT_IN = WILL_FIRE_RL_ndm_reset_rl ;

  // submodule rsp_FF
  assign rsp_FF$D_IN = coreXactor_f_rd_data$D_OUT[3] ;
  assign rsp_FF$ENQ =
	     WILL_FIRE_RL_rd_responses_rl &&
	     coreXactor_f_rd_data$D_OUT[38:35] == 4'd1 ;
  assign rsp_FF$DEQ = CAN_FIRE_RL_reset_rsp_rl ;
  assign rsp_FF$CLR = 1'b0 ;

  // submodule which_FF
  assign which_FF$D_IN = !WILL_FIRE_RL_hart_reset_rl ;
  assign which_FF$ENQ =
	     WILL_FIRE_RL_hart_reset_rl || WILL_FIRE_RL_ndm_reset_rl ;
  assign which_FF$DEQ = CAN_FIRE_RL_reset_rsp_rl ;
  assign which_FF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_bus_dmi_req_fifof_first__0_BITS_1_TO_0_1_EQ_ETC___d71 =
	     (bus_dmi_req_fifof$D_OUT[1:0] == 2'd1) ?
	       debug_module$RDY_dmi_read_addr :
	       (bus_dmi_req_fifof$D_OUT[1:0] == 2'd2 ||
		bus_dmi_rsp_fifof_cntr_r != 2'd2) &&
	       (bus_dmi_req_fifof$D_OUT[1:0] != 2'd2 ||
		bus_dmi_rsp_fifof_cntr_r != 2'd2 &&
		debug_module$RDY_dmi_write) ;
  assign _dfoo1 =
	     bus_dmi_rsp_fifof_cntr_r != 2'd2 ||
	     bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 == 2'd1 ;
  assign _dfoo3 =
	     bus_dmi_rsp_fifof_cntr_r != 2'd1 ||
	     bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 == 2'd0 ;
  assign bus_dmi_rsp_fifof_cntr_r_3_MINUS_1___d21 =
	     bus_dmi_rsp_fifof_cntr_r - 2'd1 ;
  assign which_FF_i_notEmpty__2_AND_IF_which_FF_first___ETC___d97 =
	     which_FF$EMPTY_N &&
	     (which_FF$D_OUT ?
		debug_module$RDY_ndm_reset_client_response_put :
		debug_module$RDY_hart0_hart_reset_client_response_put) ;
  assign x_araddr__h5727 = { 31'd0, req_FF$D_OUT } ;
  assign x_araddr__h5814 =
	     { 31'd0, debug_module$hart0_hart_client_run_halt_request_get } ;
  assign x_awaddr__h5941 =
	     { 27'd0,
	       debug_module$hart0_hart_gpr_mem_client_request_get[36:32] } ;
  assign x_awaddr__h6117 =
	     { 20'd0,
	       debug_module$hart0_hart_csr_mem_client_request_get[43:32] } ;
  always@(coreXactor_f_rd_data$D_OUT or
	  debug_module$RDY_hart0_hart_csr_mem_client_response_put or
	  dmXactor_f_rd_data$FULL_N or
	  rsp_FF$FULL_N or
	  debug_module$RDY_hart0_hart_client_run_halt_response_put or
	  debug_module$RDY_hart0_hart_gpr_mem_client_response_put)
  begin
    case (coreXactor_f_rd_data$D_OUT[38:35])
      4'd0:
	  IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233 =
	      dmXactor_f_rd_data$FULL_N;
      4'd1:
	  IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233 =
	      rsp_FF$FULL_N;
      4'd2:
	  IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233 =
	      debug_module$RDY_hart0_hart_client_run_halt_response_put;
      4'd3:
	  IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233 =
	      debug_module$RDY_hart0_hart_gpr_mem_client_response_put;
      default: IF_coreXactor_f_rd_data_first__16_BITS_38_TO_3_ETC___d233 =
		   coreXactor_f_rd_data$D_OUT[38:35] != 4'd4 ||
		   debug_module$RDY_hart0_hart_csr_mem_client_response_put;
    endcase
  end
  always@(coreXactor_f_wr_resp$D_OUT or
	  debug_module$RDY_hart0_hart_csr_mem_client_response_put or
	  dmXactor_f_wr_resp$FULL_N or
	  debug_module$RDY_hart0_hart_gpr_mem_client_response_put)
  begin
    case (coreXactor_f_wr_resp$D_OUT[5:2])
      4'd0:
	  CASE_coreXactor_f_wr_respD_OUT_BITS_5_TO_2_0__ETC__q1 =
	      dmXactor_f_wr_resp$FULL_N;
      4'd3:
	  CASE_coreXactor_f_wr_respD_OUT_BITS_5_TO_2_0__ETC__q1 =
	      debug_module$RDY_hart0_hart_gpr_mem_client_response_put;
      default: CASE_coreXactor_f_wr_respD_OUT_BITS_5_TO_2_0__ETC__q1 =
		   coreXactor_f_wr_resp$D_OUT[5:2] != 4'd4 ||
		   debug_module$RDY_hart0_hart_csr_mem_client_response_put;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bus_dmi_rsp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_dmi_rsp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	bus_dmi_rsp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	rg_bursting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (bus_dmi_rsp_fifof_cntr_r$EN)
	  bus_dmi_rsp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      bus_dmi_rsp_fifof_cntr_r$D_IN;
	if (bus_dmi_rsp_fifof_q_0$EN)
	  bus_dmi_rsp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      bus_dmi_rsp_fifof_q_0$D_IN;
	if (bus_dmi_rsp_fifof_q_1$EN)
	  bus_dmi_rsp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_dmi_rsp_fifof_q_1$D_IN;
	if (rg_bursting$EN)
	  rg_bursting <= `BSV_ASSIGNMENT_DELAY rg_bursting$D_IN;
	if (rg_busy$EN) rg_busy <= `BSV_ASSIGNMENT_DELAY rg_busy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bus_dmi_rsp_fifof_cntr_r = 2'h2;
    bus_dmi_rsp_fifof_q_0 = 34'h2AAAAAAAA;
    bus_dmi_rsp_fifof_q_1 = 34'h2AAAAAAAA;
    rg_bursting = 1'h0;
    rg_busy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rd_responses_rl &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd0 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd1 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd2 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd3 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd4)
	$display("rd_responses_rl: invalid response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rd_responses_rl &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd0 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd1 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd2 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd3 &&
	  coreXactor_f_rd_data$D_OUT[38:35] != 4'd4)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wr_responses_rl &&
	  coreXactor_f_wr_resp$D_OUT[5:2] != 4'd0 &&
	  coreXactor_f_wr_resp$D_OUT[5:2] != 4'd3 &&
	  coreXactor_f_wr_resp$D_OUT[5:2] != 4'd4)
	$display("wr_responses_rl: invalid response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wr_responses_rl &&
	  coreXactor_f_wr_resp$D_OUT[5:2] != 4'd0 &&
	  coreXactor_f_wr_resp$D_OUT[5:2] != 4'd3 &&
	  coreXactor_f_wr_resp$D_OUT[5:2] != 4'd4)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkBSDebug

