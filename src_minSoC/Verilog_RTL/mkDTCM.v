//
// Generated by Bluespec Compiler, version 2021.07-22-g61dc0ebb (build 61dc0ebb)
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1
// dmem_valid                     O     1
// dmem_word32                    O    32
// dmem_st_amo_val                O    32 const
// dmem_exc                       O     1
// dmem_exc_code                  O     4
// nmio_master_awvalid            O     1 reg
// nmio_master_awid               O     4 reg
// nmio_master_awaddr             O    32 reg
// nmio_master_awlen              O     8 reg
// nmio_master_awsize             O     3 reg
// nmio_master_awburst            O     2 reg
// nmio_master_awlock             O     1 reg
// nmio_master_awcache            O     4 reg
// nmio_master_awprot             O     3 reg
// nmio_master_awqos              O     4 reg
// nmio_master_awregion           O     4 reg
// nmio_master_wvalid             O     1 reg
// nmio_master_wdata              O    32 reg
// nmio_master_wstrb              O     4 reg
// nmio_master_wlast              O     1 reg
// nmio_master_bready             O     1 reg
// nmio_master_arvalid            O     1 reg
// nmio_master_arid               O     4 reg
// nmio_master_araddr             O    32 reg
// nmio_master_arlen              O     8 reg
// nmio_master_arsize             O     3 reg
// nmio_master_arburst            O     2 reg
// nmio_master_arlock             O     1 reg
// nmio_master_arcache            O     4 reg
// nmio_master_arprot             O     3 reg
// nmio_master_arqos              O     4 reg
// nmio_master_arregion           O     4 reg
// nmio_master_rready             O     1 reg
// mem_master_HADDR               O    32 reg
// mem_master_HBURST              O     3 const
// mem_master_HMASTLOCK           O     1 const
// mem_master_HPROT               O     4 const
// mem_master_HSIZE               O     3 reg
// mem_master_HTRANS              O     2 reg
// mem_master_HWDATA              O    32 reg
// mem_master_HWRITE              O     1 reg
// dma_server_awready             O     1 reg
// dma_server_wready              O     1 reg
// dma_server_bvalid              O     1 reg
// dma_server_bid                 O     4 reg
// dma_server_bresp               O     2 reg
// dma_server_arready             O     1 reg
// dma_server_rvalid              O     1 reg
// dma_server_rid                 O     4 reg
// dma_server_rdata               O    32 reg
// dma_server_rresp               O     2 reg
// dma_server_rlast               O     1 reg
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64
// RDY_mv_tohost_value            O     1 const
// verbosity                      I     2
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dmem_req_op                    I     2
// dmem_req_f3                    I     3
// dmem_req_amo_funct7            I     7
// dmem_req_addr                  I    32
// dmem_req_store_value           I    32
// nmio_master_awready            I     1
// nmio_master_wready             I     1
// nmio_master_bvalid             I     1
// nmio_master_bid                I     4 reg
// nmio_master_bresp              I     2 reg
// nmio_master_arready            I     1
// nmio_master_rvalid             I     1
// nmio_master_rid                I     4 reg
// nmio_master_rdata              I    32 reg
// nmio_master_rresp              I     2 reg
// nmio_master_rlast              I     1 reg
// mem_master_HRDATA              I    32
// mem_master_HREADY              I     1
// mem_master_HRESP               I     1
// dma_server_awvalid             I     1
// dma_server_awid                I     4 reg
// dma_server_awaddr              I    32 reg
// dma_server_awlen               I     8 reg
// dma_server_awsize              I     3 reg
// dma_server_awburst             I     2 reg
// dma_server_awlock              I     1 reg
// dma_server_awcache             I     4 reg
// dma_server_awprot              I     3 reg
// dma_server_awqos               I     4 reg
// dma_server_awregion            I     4 reg
// dma_server_wvalid              I     1
// dma_server_wdata               I    32 reg
// dma_server_wstrb               I     4 reg
// dma_server_wlast               I     1 reg
// dma_server_bready              I     1
// dma_server_arvalid             I     1
// dma_server_arid                I     4 reg
// dma_server_araddr              I    32 reg
// dma_server_arlen               I     8 reg
// dma_server_arsize              I     3 reg
// dma_server_arburst             I     2 reg
// dma_server_arlock              I     1 reg
// dma_server_arcache             I     4 reg
// dma_server_arprot              I     3 reg
// dma_server_arqos               I     4 reg
// dma_server_arregion            I     4 reg
// dma_server_rready              I     1
// set_watch_tohost_watch_tohost  I     1
// set_watch_tohost_tohost_addr   I    64
// EN_reset                       I     1
// EN_dmem_req                    I     1
// EN_set_watch_tohost            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDTCM(verbosity,
	      CLK,
	      RST_N,

	      EN_reset,
	      RDY_reset,

	      dmem_req_op,
	      dmem_req_f3,
	      dmem_req_amo_funct7,
	      dmem_req_addr,
	      dmem_req_store_value,
	      EN_dmem_req,

	      dmem_valid,

	      dmem_word32,

	      dmem_st_amo_val,

	      dmem_exc,

	      dmem_exc_code,

	      nmio_master_awvalid,

	      nmio_master_awid,

	      nmio_master_awaddr,

	      nmio_master_awlen,

	      nmio_master_awsize,

	      nmio_master_awburst,

	      nmio_master_awlock,

	      nmio_master_awcache,

	      nmio_master_awprot,

	      nmio_master_awqos,

	      nmio_master_awregion,

	      nmio_master_awready,

	      nmio_master_wvalid,

	      nmio_master_wdata,

	      nmio_master_wstrb,

	      nmio_master_wlast,

	      nmio_master_wready,

	      nmio_master_bvalid,
	      nmio_master_bid,
	      nmio_master_bresp,

	      nmio_master_bready,

	      nmio_master_arvalid,

	      nmio_master_arid,

	      nmio_master_araddr,

	      nmio_master_arlen,

	      nmio_master_arsize,

	      nmio_master_arburst,

	      nmio_master_arlock,

	      nmio_master_arcache,

	      nmio_master_arprot,

	      nmio_master_arqos,

	      nmio_master_arregion,

	      nmio_master_arready,

	      nmio_master_rvalid,
	      nmio_master_rid,
	      nmio_master_rdata,
	      nmio_master_rresp,
	      nmio_master_rlast,

	      nmio_master_rready,

	      mem_master_HADDR,

	      mem_master_HBURST,

	      mem_master_HMASTLOCK,

	      mem_master_HPROT,

	      mem_master_HSIZE,

	      mem_master_HTRANS,

	      mem_master_HWDATA,

	      mem_master_HWRITE,

	      mem_master_HRDATA,

	      mem_master_HREADY,

	      mem_master_HRESP,

	      dma_server_awvalid,
	      dma_server_awid,
	      dma_server_awaddr,
	      dma_server_awlen,
	      dma_server_awsize,
	      dma_server_awburst,
	      dma_server_awlock,
	      dma_server_awcache,
	      dma_server_awprot,
	      dma_server_awqos,
	      dma_server_awregion,

	      dma_server_awready,

	      dma_server_wvalid,
	      dma_server_wdata,
	      dma_server_wstrb,
	      dma_server_wlast,

	      dma_server_wready,

	      dma_server_bvalid,

	      dma_server_bid,

	      dma_server_bresp,

	      dma_server_bready,

	      dma_server_arvalid,
	      dma_server_arid,
	      dma_server_araddr,
	      dma_server_arlen,
	      dma_server_arsize,
	      dma_server_arburst,
	      dma_server_arlock,
	      dma_server_arcache,
	      dma_server_arprot,
	      dma_server_arqos,
	      dma_server_arregion,

	      dma_server_arready,

	      dma_server_rvalid,

	      dma_server_rid,

	      dma_server_rdata,

	      dma_server_rresp,

	      dma_server_rlast,

	      dma_server_rready,

	      set_watch_tohost_watch_tohost,
	      set_watch_tohost_tohost_addr,
	      EN_set_watch_tohost,
	      RDY_set_watch_tohost,

	      mv_tohost_value,
	      RDY_mv_tohost_value);
  input  [1 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method dmem_req
  input  [1 : 0] dmem_req_op;
  input  [2 : 0] dmem_req_f3;
  input  [6 : 0] dmem_req_amo_funct7;
  input  [31 : 0] dmem_req_addr;
  input  [31 : 0] dmem_req_store_value;
  input  EN_dmem_req;

  // value method dmem_valid
  output dmem_valid;

  // value method dmem_word32
  output [31 : 0] dmem_word32;

  // value method dmem_st_amo_val
  output [31 : 0] dmem_st_amo_val;

  // value method dmem_exc
  output dmem_exc;

  // value method dmem_exc_code
  output [3 : 0] dmem_exc_code;

  // value method nmio_master_m_awvalid
  output nmio_master_awvalid;

  // value method nmio_master_m_awid
  output [3 : 0] nmio_master_awid;

  // value method nmio_master_m_awaddr
  output [31 : 0] nmio_master_awaddr;

  // value method nmio_master_m_awlen
  output [7 : 0] nmio_master_awlen;

  // value method nmio_master_m_awsize
  output [2 : 0] nmio_master_awsize;

  // value method nmio_master_m_awburst
  output [1 : 0] nmio_master_awburst;

  // value method nmio_master_m_awlock
  output nmio_master_awlock;

  // value method nmio_master_m_awcache
  output [3 : 0] nmio_master_awcache;

  // value method nmio_master_m_awprot
  output [2 : 0] nmio_master_awprot;

  // value method nmio_master_m_awqos
  output [3 : 0] nmio_master_awqos;

  // value method nmio_master_m_awregion
  output [3 : 0] nmio_master_awregion;

  // value method nmio_master_m_awuser

  // action method nmio_master_m_awready
  input  nmio_master_awready;

  // value method nmio_master_m_wvalid
  output nmio_master_wvalid;

  // value method nmio_master_m_wdata
  output [31 : 0] nmio_master_wdata;

  // value method nmio_master_m_wstrb
  output [3 : 0] nmio_master_wstrb;

  // value method nmio_master_m_wlast
  output nmio_master_wlast;

  // value method nmio_master_m_wuser

  // action method nmio_master_m_wready
  input  nmio_master_wready;

  // action method nmio_master_m_bvalid
  input  nmio_master_bvalid;
  input  [3 : 0] nmio_master_bid;
  input  [1 : 0] nmio_master_bresp;

  // value method nmio_master_m_bready
  output nmio_master_bready;

  // value method nmio_master_m_arvalid
  output nmio_master_arvalid;

  // value method nmio_master_m_arid
  output [3 : 0] nmio_master_arid;

  // value method nmio_master_m_araddr
  output [31 : 0] nmio_master_araddr;

  // value method nmio_master_m_arlen
  output [7 : 0] nmio_master_arlen;

  // value method nmio_master_m_arsize
  output [2 : 0] nmio_master_arsize;

  // value method nmio_master_m_arburst
  output [1 : 0] nmio_master_arburst;

  // value method nmio_master_m_arlock
  output nmio_master_arlock;

  // value method nmio_master_m_arcache
  output [3 : 0] nmio_master_arcache;

  // value method nmio_master_m_arprot
  output [2 : 0] nmio_master_arprot;

  // value method nmio_master_m_arqos
  output [3 : 0] nmio_master_arqos;

  // value method nmio_master_m_arregion
  output [3 : 0] nmio_master_arregion;

  // value method nmio_master_m_aruser

  // action method nmio_master_m_arready
  input  nmio_master_arready;

  // action method nmio_master_m_rvalid
  input  nmio_master_rvalid;
  input  [3 : 0] nmio_master_rid;
  input  [31 : 0] nmio_master_rdata;
  input  [1 : 0] nmio_master_rresp;
  input  nmio_master_rlast;

  // value method nmio_master_m_rready
  output nmio_master_rready;

  // value method mem_master_haddr
  output [31 : 0] mem_master_HADDR;

  // value method mem_master_hburst
  output [2 : 0] mem_master_HBURST;

  // value method mem_master_hmastlock
  output mem_master_HMASTLOCK;

  // value method mem_master_hprot
  output [3 : 0] mem_master_HPROT;

  // value method mem_master_hsize
  output [2 : 0] mem_master_HSIZE;

  // value method mem_master_htrans
  output [1 : 0] mem_master_HTRANS;

  // value method mem_master_hwdata
  output [31 : 0] mem_master_HWDATA;

  // value method mem_master_hwrite
  output mem_master_HWRITE;

  // action method mem_master_hrdata
  input  [31 : 0] mem_master_HRDATA;

  // action method mem_master_hready
  input  mem_master_HREADY;

  // action method mem_master_hresp
  input  mem_master_HRESP;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [3 : 0] dma_server_awid;
  input  [31 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [31 : 0] dma_server_wdata;
  input  [3 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [3 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [3 : 0] dma_server_arid;
  input  [31 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [3 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [31 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [63 : 0] mv_tohost_value;
  wire [31 : 0] dma_server_rdata,
		dmem_st_amo_val,
		dmem_word32,
		mem_master_HADDR,
		mem_master_HWDATA,
		nmio_master_araddr,
		nmio_master_awaddr,
		nmio_master_wdata;
  wire [7 : 0] nmio_master_arlen, nmio_master_awlen;
  wire [3 : 0] dma_server_bid,
	       dma_server_rid,
	       dmem_exc_code,
	       mem_master_HPROT,
	       nmio_master_arcache,
	       nmio_master_arid,
	       nmio_master_arqos,
	       nmio_master_arregion,
	       nmio_master_awcache,
	       nmio_master_awid,
	       nmio_master_awqos,
	       nmio_master_awregion,
	       nmio_master_wstrb;
  wire [2 : 0] mem_master_HBURST,
	       mem_master_HSIZE,
	       nmio_master_arprot,
	       nmio_master_arsize,
	       nmio_master_awprot,
	       nmio_master_awsize;
  wire [1 : 0] dma_server_bresp,
	       dma_server_rresp,
	       mem_master_HTRANS,
	       nmio_master_arburst,
	       nmio_master_awburst;
  wire RDY_mv_tohost_value,
       RDY_reset,
       RDY_set_watch_tohost,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       dmem_exc,
       dmem_valid,
       mem_master_HMASTLOCK,
       mem_master_HWRITE,
       nmio_master_arlock,
       nmio_master_arvalid,
       nmio_master_awlock,
       nmio_master_awvalid,
       nmio_master_bready,
       nmio_master_rready,
       nmio_master_wlast,
       nmio_master_wvalid;

  // inlined wires
  wire [75 : 0] w_dmem_req$wget;
  wire [3 : 0] dw_exc_code$wget;
  wire dw_exc$wget, dw_valid$wget, dw_valid$whas;

  // register deburstr_rg_ar_beat_count
  reg [7 : 0] deburstr_rg_ar_beat_count;
  wire [7 : 0] deburstr_rg_ar_beat_count$D_IN;
  wire deburstr_rg_ar_beat_count$EN;

  // register deburstr_rg_b_beat_count
  reg [7 : 0] deburstr_rg_b_beat_count;
  wire [7 : 0] deburstr_rg_b_beat_count$D_IN;
  wire deburstr_rg_b_beat_count$EN;

  // register deburstr_rg_b_resp
  reg [1 : 0] deburstr_rg_b_resp;
  wire [1 : 0] deburstr_rg_b_resp$D_IN;
  wire deburstr_rg_b_resp$EN;

  // register deburstr_rg_last_beat_raddr
  reg [31 : 0] deburstr_rg_last_beat_raddr;
  wire [31 : 0] deburstr_rg_last_beat_raddr$D_IN;
  wire deburstr_rg_last_beat_raddr$EN;

  // register deburstr_rg_last_beat_waddr
  reg [31 : 0] deburstr_rg_last_beat_waddr;
  wire [31 : 0] deburstr_rg_last_beat_waddr$D_IN;
  wire deburstr_rg_last_beat_waddr$EN;

  // register deburstr_rg_r_beat_count
  reg [7 : 0] deburstr_rg_r_beat_count;
  wire [7 : 0] deburstr_rg_r_beat_count$D_IN;
  wire deburstr_rg_r_beat_count$EN;

  // register deburstr_rg_reset
  reg deburstr_rg_reset;
  wire deburstr_rg_reset$D_IN, deburstr_rg_reset$EN;

  // register deburstr_rg_w_beat_count
  reg [7 : 0] deburstr_rg_w_beat_count;
  wire [7 : 0] deburstr_rg_w_beat_count$D_IN;
  wire deburstr_rg_w_beat_count$EN;

  // register dma_port_rg_state
  reg [1 : 0] dma_port_rg_state;
  reg [1 : 0] dma_port_rg_state$D_IN;
  wire dma_port_rg_state$EN;

  // register fabric_adapter_rg_haddr
  reg [31 : 0] fabric_adapter_rg_haddr;
  wire [31 : 0] fabric_adapter_rg_haddr$D_IN;
  wire fabric_adapter_rg_haddr$EN;

  // register fabric_adapter_rg_hsize
  reg [2 : 0] fabric_adapter_rg_hsize;
  wire [2 : 0] fabric_adapter_rg_hsize$D_IN;
  wire fabric_adapter_rg_hsize$EN;

  // register fabric_adapter_rg_htrans
  reg [1 : 0] fabric_adapter_rg_htrans;
  wire [1 : 0] fabric_adapter_rg_htrans$D_IN;
  wire fabric_adapter_rg_htrans$EN;

  // register fabric_adapter_rg_hwdata
  reg [31 : 0] fabric_adapter_rg_hwdata;
  wire [31 : 0] fabric_adapter_rg_hwdata$D_IN;
  wire fabric_adapter_rg_hwdata$EN;

  // register fabric_adapter_rg_hwrite
  reg fabric_adapter_rg_hwrite;
  wire fabric_adapter_rg_hwrite$D_IN, fabric_adapter_rg_hwrite$EN;

  // register fabric_adapter_rg_state
  reg [1 : 0] fabric_adapter_rg_state;
  reg [1 : 0] fabric_adapter_rg_state$D_IN;
  wire fabric_adapter_rg_state$EN;

  // register mmio_rg_err
  reg mmio_rg_err;
  wire mmio_rg_err$D_IN, mmio_rg_err$EN;

  // register mmio_rg_final_st_val
  reg [31 : 0] mmio_rg_final_st_val;
  wire [31 : 0] mmio_rg_final_st_val$D_IN;
  wire mmio_rg_final_st_val$EN;

  // register mmio_rg_ld_val
  reg [31 : 0] mmio_rg_ld_val;
  wire [31 : 0] mmio_rg_ld_val$D_IN;
  wire mmio_rg_ld_val$EN;

  // register mmio_rg_mmio_state
  reg [1 : 0] mmio_rg_mmio_state;
  reg [1 : 0] mmio_rg_mmio_state$D_IN;
  wire mmio_rg_mmio_state$EN;

  // register nmio_fabric_adapter_rg_rd_client_id
  reg nmio_fabric_adapter_rg_rd_client_id;
  wire nmio_fabric_adapter_rg_rd_client_id$D_IN,
       nmio_fabric_adapter_rg_rd_client_id$EN;

  // register nmio_fabric_adapter_rg_rd_rsps_pending
  reg nmio_fabric_adapter_rg_rd_rsps_pending;
  wire nmio_fabric_adapter_rg_rd_rsps_pending$D_IN,
       nmio_fabric_adapter_rg_rd_rsps_pending$EN;

  // register nmio_fabric_adapter_rg_wr_rsps_pending
  reg nmio_fabric_adapter_rg_wr_rsps_pending;
  wire nmio_fabric_adapter_rg_wr_rsps_pending$D_IN,
       nmio_fabric_adapter_rg_wr_rsps_pending$EN;

  // register nmio_fabric_adapter_rg_write_error
  reg nmio_fabric_adapter_rg_write_error;
  wire nmio_fabric_adapter_rg_write_error$D_IN,
       nmio_fabric_adapter_rg_write_error$EN;

  // register rg_dmem_state
  reg [1 : 0] rg_dmem_state;
  reg [1 : 0] rg_dmem_state$D_IN;
  wire rg_dmem_state$EN;

  // register rg_exc
  reg rg_exc;
  wire rg_exc$D_IN, rg_exc$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  wire [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_lrsc_pa
  reg [31 : 0] rg_lrsc_pa;
  wire [31 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_size
  reg [1 : 0] rg_lrsc_size;
  wire [1 : 0] rg_lrsc_size$D_IN;
  wire rg_lrsc_size$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_lrsc_word64
  reg [1 : 0] rg_lrsc_word64;
  wire [1 : 0] rg_lrsc_word64$D_IN;
  wire rg_lrsc_word64$EN;

  // register rg_req
  reg [75 : 0] rg_req;
  wire [75 : 0] rg_req$D_IN;
  wire rg_req$EN;

  // register rg_result_valid
  reg rg_result_valid;
  wire rg_result_valid$D_IN, rg_result_valid$EN;

  // register rg_tohost_addr
  reg [31 : 0] rg_tohost_addr;
  wire [31 : 0] rg_tohost_addr$D_IN;
  wire rg_tohost_addr$EN;

  // register rg_tohost_value
  reg [31 : 0] rg_tohost_value;
  wire [31 : 0] rg_tohost_value$D_IN;
  wire rg_tohost_value$EN;

  // register rg_watch_tohost
  reg rg_watch_tohost;
  wire rg_watch_tohost$D_IN, rg_watch_tohost$EN;

  // ports of submodule deburstr_f_r_arlen
  wire [7 : 0] deburstr_f_r_arlen$D_IN, deburstr_f_r_arlen$D_OUT;
  wire deburstr_f_r_arlen$CLR,
       deburstr_f_r_arlen$DEQ,
       deburstr_f_r_arlen$EMPTY_N,
       deburstr_f_r_arlen$ENQ,
       deburstr_f_r_arlen$FULL_N;

  // ports of submodule deburstr_f_w_awlen
  wire [7 : 0] deburstr_f_w_awlen$D_IN, deburstr_f_w_awlen$D_OUT;
  wire deburstr_f_w_awlen$CLR,
       deburstr_f_w_awlen$DEQ,
       deburstr_f_w_awlen$EMPTY_N,
       deburstr_f_w_awlen$ENQ,
       deburstr_f_w_awlen$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_rd_addr
  wire [64 : 0] deburstr_xactor_from_master_f_rd_addr$D_IN,
		deburstr_xactor_from_master_f_rd_addr$D_OUT;
  wire deburstr_xactor_from_master_f_rd_addr$CLR,
       deburstr_xactor_from_master_f_rd_addr$DEQ,
       deburstr_xactor_from_master_f_rd_addr$EMPTY_N,
       deburstr_xactor_from_master_f_rd_addr$ENQ,
       deburstr_xactor_from_master_f_rd_addr$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_rd_data
  wire [38 : 0] deburstr_xactor_from_master_f_rd_data$D_IN,
		deburstr_xactor_from_master_f_rd_data$D_OUT;
  wire deburstr_xactor_from_master_f_rd_data$CLR,
       deburstr_xactor_from_master_f_rd_data$DEQ,
       deburstr_xactor_from_master_f_rd_data$EMPTY_N,
       deburstr_xactor_from_master_f_rd_data$ENQ,
       deburstr_xactor_from_master_f_rd_data$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_wr_addr
  wire [64 : 0] deburstr_xactor_from_master_f_wr_addr$D_IN,
		deburstr_xactor_from_master_f_wr_addr$D_OUT;
  wire deburstr_xactor_from_master_f_wr_addr$CLR,
       deburstr_xactor_from_master_f_wr_addr$DEQ,
       deburstr_xactor_from_master_f_wr_addr$EMPTY_N,
       deburstr_xactor_from_master_f_wr_addr$ENQ,
       deburstr_xactor_from_master_f_wr_addr$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_wr_data
  wire [36 : 0] deburstr_xactor_from_master_f_wr_data$D_IN,
		deburstr_xactor_from_master_f_wr_data$D_OUT;
  wire deburstr_xactor_from_master_f_wr_data$CLR,
       deburstr_xactor_from_master_f_wr_data$DEQ,
       deburstr_xactor_from_master_f_wr_data$EMPTY_N,
       deburstr_xactor_from_master_f_wr_data$ENQ,
       deburstr_xactor_from_master_f_wr_data$FULL_N;

  // ports of submodule deburstr_xactor_from_master_f_wr_resp
  wire [5 : 0] deburstr_xactor_from_master_f_wr_resp$D_IN,
	       deburstr_xactor_from_master_f_wr_resp$D_OUT;
  wire deburstr_xactor_from_master_f_wr_resp$CLR,
       deburstr_xactor_from_master_f_wr_resp$DEQ,
       deburstr_xactor_from_master_f_wr_resp$EMPTY_N,
       deburstr_xactor_from_master_f_wr_resp$ENQ,
       deburstr_xactor_from_master_f_wr_resp$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_rd_addr
  wire [64 : 0] deburstr_xactor_to_slave_f_rd_addr$D_IN,
		deburstr_xactor_to_slave_f_rd_addr$D_OUT;
  wire deburstr_xactor_to_slave_f_rd_addr$CLR,
       deburstr_xactor_to_slave_f_rd_addr$DEQ,
       deburstr_xactor_to_slave_f_rd_addr$EMPTY_N,
       deburstr_xactor_to_slave_f_rd_addr$ENQ,
       deburstr_xactor_to_slave_f_rd_addr$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_rd_data
  wire [38 : 0] deburstr_xactor_to_slave_f_rd_data$D_IN,
		deburstr_xactor_to_slave_f_rd_data$D_OUT;
  wire deburstr_xactor_to_slave_f_rd_data$CLR,
       deburstr_xactor_to_slave_f_rd_data$DEQ,
       deburstr_xactor_to_slave_f_rd_data$EMPTY_N,
       deburstr_xactor_to_slave_f_rd_data$ENQ,
       deburstr_xactor_to_slave_f_rd_data$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_wr_addr
  wire [64 : 0] deburstr_xactor_to_slave_f_wr_addr$D_IN,
		deburstr_xactor_to_slave_f_wr_addr$D_OUT;
  wire deburstr_xactor_to_slave_f_wr_addr$CLR,
       deburstr_xactor_to_slave_f_wr_addr$DEQ,
       deburstr_xactor_to_slave_f_wr_addr$EMPTY_N,
       deburstr_xactor_to_slave_f_wr_addr$ENQ,
       deburstr_xactor_to_slave_f_wr_addr$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_wr_data
  wire [36 : 0] deburstr_xactor_to_slave_f_wr_data$D_IN,
		deburstr_xactor_to_slave_f_wr_data$D_OUT;
  wire deburstr_xactor_to_slave_f_wr_data$CLR,
       deburstr_xactor_to_slave_f_wr_data$DEQ,
       deburstr_xactor_to_slave_f_wr_data$EMPTY_N,
       deburstr_xactor_to_slave_f_wr_data$ENQ,
       deburstr_xactor_to_slave_f_wr_data$FULL_N;

  // ports of submodule deburstr_xactor_to_slave_f_wr_resp
  wire [5 : 0] deburstr_xactor_to_slave_f_wr_resp$D_IN,
	       deburstr_xactor_to_slave_f_wr_resp$D_OUT;
  wire deburstr_xactor_to_slave_f_wr_resp$CLR,
       deburstr_xactor_to_slave_f_wr_resp$DEQ,
       deburstr_xactor_to_slave_f_wr_resp$EMPTY_N,
       deburstr_xactor_to_slave_f_wr_resp$ENQ,
       deburstr_xactor_to_slave_f_wr_resp$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_rd_addr
  wire [64 : 0] dma_port_slave_xactor_f_rd_addr$D_IN,
		dma_port_slave_xactor_f_rd_addr$D_OUT;
  wire dma_port_slave_xactor_f_rd_addr$CLR,
       dma_port_slave_xactor_f_rd_addr$DEQ,
       dma_port_slave_xactor_f_rd_addr$EMPTY_N,
       dma_port_slave_xactor_f_rd_addr$ENQ,
       dma_port_slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_rd_data
  wire [38 : 0] dma_port_slave_xactor_f_rd_data$D_IN,
		dma_port_slave_xactor_f_rd_data$D_OUT;
  wire dma_port_slave_xactor_f_rd_data$CLR,
       dma_port_slave_xactor_f_rd_data$DEQ,
       dma_port_slave_xactor_f_rd_data$EMPTY_N,
       dma_port_slave_xactor_f_rd_data$ENQ,
       dma_port_slave_xactor_f_rd_data$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_addr
  wire [64 : 0] dma_port_slave_xactor_f_wr_addr$D_IN,
		dma_port_slave_xactor_f_wr_addr$D_OUT;
  wire dma_port_slave_xactor_f_wr_addr$CLR,
       dma_port_slave_xactor_f_wr_addr$DEQ,
       dma_port_slave_xactor_f_wr_addr$EMPTY_N,
       dma_port_slave_xactor_f_wr_addr$ENQ,
       dma_port_slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_data
  wire [36 : 0] dma_port_slave_xactor_f_wr_data$D_IN,
		dma_port_slave_xactor_f_wr_data$D_OUT;
  wire dma_port_slave_xactor_f_wr_data$CLR,
       dma_port_slave_xactor_f_wr_data$DEQ,
       dma_port_slave_xactor_f_wr_data$EMPTY_N,
       dma_port_slave_xactor_f_wr_data$ENQ,
       dma_port_slave_xactor_f_wr_data$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_resp
  wire [5 : 0] dma_port_slave_xactor_f_wr_resp$D_IN,
	       dma_port_slave_xactor_f_wr_resp$D_OUT;
  wire dma_port_slave_xactor_f_wr_resp$CLR,
       dma_port_slave_xactor_f_wr_resp$DEQ,
       dma_port_slave_xactor_f_wr_resp$EMPTY_N,
       dma_port_slave_xactor_f_wr_resp$ENQ,
       dma_port_slave_xactor_f_wr_resp$FULL_N;

  // ports of submodule dma_port_soc_map
  wire [31 : 0] dma_port_soc_map$m_is_IO_addr_addr,
		dma_port_soc_map$m_is_clint_addr_addr,
		dma_port_soc_map$m_is_dtcm_addr_addr,
		dma_port_soc_map$m_is_itcm_addr_addr,
		dma_port_soc_map$m_is_mem_addr_addr,
		dma_port_soc_map$m_is_nmio_addr_addr,
		dma_port_soc_map$m_is_tcm_addr_addr;

  // ports of submodule dtcm
  wire [31 : 0] dtcm$DIA, dtcm$DIB, dtcm$DOA, dtcm$DOB;
  wire [12 : 0] dtcm$ADDRA, dtcm$ADDRB;
  wire [3 : 0] dtcm$WEA, dtcm$WEB;
  wire dtcm$ENA, dtcm$ENB;

  // ports of submodule f_is_mem_req
  wire f_is_mem_req$CLR,
       f_is_mem_req$DEQ,
       f_is_mem_req$D_IN,
       f_is_mem_req$D_OUT,
       f_is_mem_req$EMPTY_N,
       f_is_mem_req$ENQ,
       f_is_mem_req$FULL_N;

  // ports of submodule f_mem_rdata
  wire [32 : 0] f_mem_rdata$D_IN, f_mem_rdata$D_OUT;
  wire f_mem_rdata$CLR,
       f_mem_rdata$DEQ,
       f_mem_rdata$EMPTY_N,
       f_mem_rdata$ENQ,
       f_mem_rdata$FULL_N;

  // ports of submodule f_mem_req
  reg [34 : 0] f_mem_req$D_IN;
  wire [34 : 0] f_mem_req$D_OUT;
  wire f_mem_req$CLR,
       f_mem_req$DEQ,
       f_mem_req$EMPTY_N,
       f_mem_req$ENQ,
       f_mem_req$FULL_N;

  // ports of submodule f_mem_wdata
  wire [31 : 0] f_mem_wdata$D_IN, f_mem_wdata$D_OUT;
  wire f_mem_wdata$CLR,
       f_mem_wdata$DEQ,
       f_mem_wdata$EMPTY_N,
       f_mem_wdata$ENQ,
       f_mem_wdata$FULL_N;

  // ports of submodule f_nmio_req
  reg [34 : 0] f_nmio_req$D_IN;
  wire [34 : 0] f_nmio_req$D_OUT;
  wire f_nmio_req$CLR,
       f_nmio_req$DEQ,
       f_nmio_req$EMPTY_N,
       f_nmio_req$ENQ,
       f_nmio_req$FULL_N;

  // ports of submodule nmio_fabric_adapter_f_rd_rsp_control
  wire [2 : 0] nmio_fabric_adapter_f_rd_rsp_control$D_IN;
  wire nmio_fabric_adapter_f_rd_rsp_control$CLR,
       nmio_fabric_adapter_f_rd_rsp_control$DEQ,
       nmio_fabric_adapter_f_rd_rsp_control$EMPTY_N,
       nmio_fabric_adapter_f_rd_rsp_control$ENQ,
       nmio_fabric_adapter_f_rd_rsp_control$FULL_N;

  // ports of submodule nmio_fabric_adapter_f_wr_data_control
  wire [5 : 0] nmio_fabric_adapter_f_wr_data_control$D_IN,
	       nmio_fabric_adapter_f_wr_data_control$D_OUT;
  wire nmio_fabric_adapter_f_wr_data_control$CLR,
       nmio_fabric_adapter_f_wr_data_control$DEQ,
       nmio_fabric_adapter_f_wr_data_control$EMPTY_N,
       nmio_fabric_adapter_f_wr_data_control$ENQ,
       nmio_fabric_adapter_f_wr_data_control$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_rd_addr
  wire [64 : 0] nmio_fabric_adapter_master_xactor_f_rd_addr$D_IN,
		nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_rd_addr$CLR,
       nmio_fabric_adapter_master_xactor_f_rd_addr$DEQ,
       nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_rd_addr$ENQ,
       nmio_fabric_adapter_master_xactor_f_rd_addr$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_rd_data
  wire [38 : 0] nmio_fabric_adapter_master_xactor_f_rd_data$D_IN,
		nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_rd_data$CLR,
       nmio_fabric_adapter_master_xactor_f_rd_data$DEQ,
       nmio_fabric_adapter_master_xactor_f_rd_data$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_rd_data$ENQ,
       nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_wr_addr
  wire [64 : 0] nmio_fabric_adapter_master_xactor_f_wr_addr$D_IN,
		nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_wr_addr$CLR,
       nmio_fabric_adapter_master_xactor_f_wr_addr$DEQ,
       nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_wr_addr$ENQ,
       nmio_fabric_adapter_master_xactor_f_wr_addr$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_wr_data
  wire [36 : 0] nmio_fabric_adapter_master_xactor_f_wr_data$D_IN,
		nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_wr_data$CLR,
       nmio_fabric_adapter_master_xactor_f_wr_data$DEQ,
       nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_wr_data$ENQ,
       nmio_fabric_adapter_master_xactor_f_wr_data$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_wr_resp
  wire [5 : 0] nmio_fabric_adapter_master_xactor_f_wr_resp$D_IN,
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_wr_resp$CLR,
       nmio_fabric_adapter_master_xactor_f_wr_resp$DEQ,
       nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_wr_resp$ENQ,
       nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N;

  // ports of submodule soc_map
  wire [31 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_clint_addr_addr,
		soc_map$m_is_dtcm_addr_addr,
		soc_map$m_is_itcm_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_nmio_addr_addr,
		soc_map$m_is_tcm_addr_addr;
  wire soc_map$m_is_dtcm_addr, soc_map$m_is_itcm_addr, soc_map$m_is_nmio_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master,
       CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave,
       CAN_FIRE_RL_deburstr_rl_reset,
       CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master,
       CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave,
       CAN_FIRE_RL_dma_port_rl_bad_rd_addr,
       CAN_FIRE_RL_dma_port_rl_bad_wr_addr,
       CAN_FIRE_RL_dma_port_rl_dma_rd_req,
       CAN_FIRE_RL_dma_port_rl_dma_rd_rsp,
       CAN_FIRE_RL_dma_port_rl_dma_wr_req,
       CAN_FIRE_RL_fabric_adapter_rl_complete_nseq_req,
       CAN_FIRE_RL_fabric_adapter_rl_nseq_req,
       CAN_FIRE_RL_fabric_adapter_rl_read_response,
       CAN_FIRE_RL_fabric_adapter_rl_write_response,
       CAN_FIRE_RL_mmio_rl_AMO_SC,
       CAN_FIRE_RL_mmio_rl_read_req,
       CAN_FIRE_RL_mmio_rl_read_rsp,
       CAN_FIRE_RL_mmio_rl_write_req,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_single_write_req,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_write_rsp,
       CAN_FIRE_RL_rl_amo_rsp,
       CAN_FIRE_RL_rl_mmio_rsp,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_req,
       CAN_FIRE_RL_rl_tcm_rsp,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE___me_check_14,
       CAN_FIRE___me_check_17,
       CAN_FIRE___me_check_4,
       CAN_FIRE___me_check_7,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_dmem_req,
       CAN_FIRE_mem_master_hrdata,
       CAN_FIRE_mem_master_hready,
       CAN_FIRE_mem_master_hresp,
       CAN_FIRE_nmio_master_m_arready,
       CAN_FIRE_nmio_master_m_awready,
       CAN_FIRE_nmio_master_m_bvalid,
       CAN_FIRE_nmio_master_m_rvalid,
       CAN_FIRE_nmio_master_m_wready,
       CAN_FIRE_reset,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master,
       WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave,
       WILL_FIRE_RL_deburstr_rl_reset,
       WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master,
       WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave,
       WILL_FIRE_RL_dma_port_rl_bad_rd_addr,
       WILL_FIRE_RL_dma_port_rl_bad_wr_addr,
       WILL_FIRE_RL_dma_port_rl_dma_rd_req,
       WILL_FIRE_RL_dma_port_rl_dma_rd_rsp,
       WILL_FIRE_RL_dma_port_rl_dma_wr_req,
       WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req,
       WILL_FIRE_RL_fabric_adapter_rl_nseq_req,
       WILL_FIRE_RL_fabric_adapter_rl_read_response,
       WILL_FIRE_RL_fabric_adapter_rl_write_response,
       WILL_FIRE_RL_mmio_rl_AMO_SC,
       WILL_FIRE_RL_mmio_rl_read_req,
       WILL_FIRE_RL_mmio_rl_read_rsp,
       WILL_FIRE_RL_mmio_rl_write_req,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_write_rsp,
       WILL_FIRE_RL_rl_amo_rsp,
       WILL_FIRE_RL_rl_mmio_rsp,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_req,
       WILL_FIRE_RL_rl_tcm_rsp,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE___me_check_14,
       WILL_FIRE___me_check_17,
       WILL_FIRE___me_check_4,
       WILL_FIRE___me_check_7,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_dmem_req,
       WILL_FIRE_mem_master_hrdata,
       WILL_FIRE_mem_master_hready,
       WILL_FIRE_mem_master_hresp,
       WILL_FIRE_nmio_master_m_arready,
       WILL_FIRE_nmio_master_m_awready,
       WILL_FIRE_nmio_master_m_bvalid,
       WILL_FIRE_nmio_master_m_rvalid,
       WILL_FIRE_nmio_master_m_wready,
       WILL_FIRE_reset,
       WILL_FIRE_set_watch_tohost;

  // inputs to muxes for submodule ports
  wire [38 : 0] MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1,
		MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2;
  wire [34 : 0] MUX_f_mem_req$enq_1__VAL_1, MUX_f_mem_req$enq_1__VAL_2;
  wire [32 : 0] MUX_f_mem_rdata$enq_1__VAL_1, MUX_f_mem_rdata$enq_1__VAL_2;
  wire [31 : 0] MUX_f_mem_wdata$enq_1__VAL_1,
		MUX_f_mem_wdata$enq_1__VAL_2,
		MUX_mmio_rg_ld_val$write_1__VAL_1;
  wire [7 : 0] MUX_deburstr_rg_ar_beat_count$write_1__VAL_2,
	       MUX_deburstr_rg_b_beat_count$write_1__VAL_2,
	       MUX_deburstr_rg_r_beat_count$write_1__VAL_2,
	       MUX_deburstr_rg_w_beat_count$write_1__VAL_2;
  wire [5 : 0] MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1,
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2;
  wire [3 : 0] MUX_dtcm$a_put_1__VAL_1, MUX_dw_exc_code$wset_1__VAL_2;
  wire [1 : 0] MUX_deburstr_rg_b_resp$write_1__VAL_2,
	       MUX_fabric_adapter_rg_state$write_1__VAL_1,
	       MUX_rg_dmem_state$write_1__VAL_2,
	       MUX_rg_lrsc_word64$write_1__VAL_2;
  wire MUX_deburstr_rg_b_resp$write_1__SEL_2,
       MUX_dtcm$a_put_1__SEL_1,
       MUX_f_mem_req$enq_1__SEL_1,
       MUX_f_mem_req$enq_1__SEL_2,
       MUX_f_mem_req$enq_1__SEL_3,
       MUX_f_mem_wdata$enq_1__SEL_1,
       MUX_f_nmio_req$enq_1__SEL_1,
       MUX_f_nmio_req$enq_1__SEL_2,
       MUX_f_nmio_req$enq_1__SEL_3,
       MUX_fabric_adapter_rg_state$write_1__SEL_2,
       MUX_mmio_rg_err$write_1__SEL_1,
       MUX_mmio_rg_ld_val$write_1__SEL_1,
       MUX_nmio_fabric_adapter_rg_wr_rsps_pending$write_1__SEL_1,
       MUX_rg_lrsc_valid$write_1__SEL_1,
       MUX_rg_lrsc_valid$write_1__VAL_1,
       MUX_rg_lrsc_word64$write_1__SEL_1,
       MUX_rg_result_valid$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h14261;
  reg [31 : 0] v__h14427;
  reg [31 : 0] v__h14657;
  reg [31 : 0] v__h16455;
  reg [31 : 0] v__h16833;
  reg [31 : 0] v__h17080;
  reg [31 : 0] v__h1871;
  reg [31 : 0] v__h3755;
  reg [31 : 0] v__h4760;
  reg [31 : 0] v__h4964;
  reg [31 : 0] v__h5442;
  reg [31 : 0] v__h5493;
  reg [31 : 0] v__h5329;
  reg [31 : 0] v__h6117;
  reg [31 : 0] v__h6755;
  reg [31 : 0] v__h6985;
  reg [31 : 0] v__h7011;
  reg [31 : 0] v__h2119;
  reg [31 : 0] v__h3305;
  reg [31 : 0] v__h17328;
  reg [31 : 0] v__h17568;
  reg [31 : 0] v__h20828;
  reg [31 : 0] v__h5871;
  reg [31 : 0] v__h7160;
  reg [31 : 0] v__h7292;
  reg [31 : 0] v__h8582;
  reg [31 : 0] v__h8937;
  reg [31 : 0] v__h9260;
  reg [31 : 0] v__h8717;
  reg [31 : 0] v__h9567;
  reg [31 : 0] v__h19860;
  reg [31 : 0] v__h19985;
  reg [31 : 0] v__h12219;
  reg [31 : 0] v__h1865;
  reg [31 : 0] v__h2113;
  reg [31 : 0] v__h3299;
  reg [31 : 0] v__h3749;
  reg [31 : 0] v__h4754;
  reg [31 : 0] v__h4958;
  reg [31 : 0] v__h5323;
  reg [31 : 0] v__h5436;
  reg [31 : 0] v__h5487;
  reg [31 : 0] v__h5865;
  reg [31 : 0] v__h6111;
  reg [31 : 0] v__h6749;
  reg [31 : 0] v__h6979;
  reg [31 : 0] v__h7005;
  reg [31 : 0] v__h7154;
  reg [31 : 0] v__h7286;
  reg [31 : 0] v__h8576;
  reg [31 : 0] v__h8711;
  reg [31 : 0] v__h8931;
  reg [31 : 0] v__h9254;
  reg [31 : 0] v__h9561;
  reg [31 : 0] v__h12213;
  reg [31 : 0] v__h14255;
  reg [31 : 0] v__h14421;
  reg [31 : 0] v__h14651;
  reg [31 : 0] v__h16449;
  reg [31 : 0] v__h16827;
  reg [31 : 0] v__h17074;
  reg [31 : 0] v__h17322;
  reg [31 : 0] v__h17562;
  reg [31 : 0] v__h19854;
  reg [31 : 0] v__h19979;
  reg [31 : 0] v__h20822;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] CASE_rg_req_BITS_40_TO_39_0x0_result5135_0x2_r_ETC__q8,
	       CASE_rg_req_BITS_40_TO_39_0x0_result5202_0x2_r_ETC__q9,
	       IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629,
	       IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620,
	       _theResult___snd__h15770,
	       _theResult___snd__h18522,
	       final_st_val__h2795,
	       mask__h2505,
	       ram_out__h13990,
	       ram_st_value__h15549,
	       ram_st_value__h18301,
	       v__h14613,
	       y__h2681;
  reg [3 : 0] _theResult___fst__h15769,
	      _theResult___fst__h15802,
	      _theResult___fst__h18521,
	      _theResult___fst__h18554,
	      byte_en__h15548,
	      byte_en__h18300,
	      strb__h5695;
  reg CASE_rg_req_BITS_72_TO_71_0b0_ld_val_bits230_B_ETC__q7;
  wire [31 : 0] _theResult____h16715,
		_theResult___snd__h15774,
		_theResult___snd__h15778,
		_theResult___snd__h15803,
		_theResult___snd__h15807,
		_theResult___snd__h18526,
		_theResult___snd__h18530,
		_theResult___snd__h18555,
		_theResult___snd__h18559,
		a_out_araddr__h12780,
		a_out_awaddr__h11696,
		addr___1__h11790,
		addr___1__h12874,
		addr__h11778,
		addr__h12862,
		burst_len__h11779,
		burst_len__h12863,
		data1__h2461,
		data__h3353,
		final_st_val__h15382,
		final_st_val__h15387,
		final_st_val__h15391,
		final_st_val__h15395,
		final_st_val__h15399,
		final_st_val__h15404,
		final_st_val__h15410,
		final_st_val__h15415,
		final_st_val__h2935,
		final_st_val__h2940,
		final_st_val__h2944,
		final_st_val__h2948,
		final_st_val__h2952,
		final_st_val__h2957,
		final_st_val__h2963,
		final_st_val__h2968,
		ld_val__h2344,
		ld_val_bits__h2230,
		result__h14882,
		result__h14913,
		result__h14941,
		result__h14969,
		result__h15010,
		result__h15038,
		result__h15066,
		result__h15094,
		result__h15135,
		result__h15163,
		result__h15202,
		result__h15230,
		result__h2669,
		result__h2725,
		rsp_word__h16779,
		st_value__h15546,
		test_num__h17309,
		v__h14542,
		word_addr__h17707,
		wrap_mask__h11780,
		wrap_mask__h12864,
		x__h11802,
		x__h12886,
		y__h11803,
		y__h11804,
		y__h12887,
		y__h12888;
  wire [15 : 0] dtcmDOA_BITS_15_TO_0__q2, dtcmDOA_BITS_31_TO_16__q5;
  wire [7 : 0] dtcmDOA_BITS_15_TO_8__q3,
	       dtcmDOA_BITS_23_TO_16__q4,
	       dtcmDOA_BITS_31_TO_24__q6,
	       dtcmDOA_BITS_7_TO_0__q1,
	       x__h12077,
	       x__h12584,
	       x__h13071,
	       x__h13290;
  wire [4 : 0] shamt_bits__h2805;
  wire [3 : 0] lsbs__h5696, strb__h5697;
  wire [2 : 0] IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247,
	       x__h5077;
  wire IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6,
       NOT_rg_req_0_BITS_75_TO_74_1_EQ_2_5_6_OR_NOT_r_ETC___d671,
       NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d831,
       NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d874,
       NOT_verbosity_EQ_0_3_4_AND_NOT_rg_watch_tohost_ETC___d945,
       NOT_verbosity_ULE_1_33___d334,
       NOT_verbosity_ULT_2_26___d127,
       NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757,
       _dfoo1,
       _dfoo3,
       deburstr_rg_ar_beat_count_69_ULT_deburstr_xact_ETC___d500,
       deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447,
       deburstr_rg_r_beat_count_09_ULT_deburstr_f_r_a_ETC___d511,
       deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432,
       f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d121,
       f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d84,
       f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d87,
       rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547,
       rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d563,
       rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d555,
       rg_req_0_BITS_75_TO_74_1_EQ_0_7_OR_rg_req_0_BI_ETC___d44,
       rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d551,
       rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d703,
       rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776,
       soc_map_m_is_dtcm_addr_w_dmem_req_wget__33_BIT_ETC___d864,
       w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821,
       w_dmem_req_whas__32_AND_soc_map_m_is_itcm_addr_ETC___d763;

  // action method reset
  assign RDY_reset = !deburstr_rg_reset ;
  assign CAN_FIRE_reset = !deburstr_rg_reset ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method dmem_req
  assign CAN_FIRE_dmem_req = 1'd1 ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // value method dmem_valid
  assign dmem_valid = dw_valid$whas && dw_valid$wget ;

  // value method dmem_word32
  assign dmem_word32 =
	     WILL_FIRE_RL_rl_tcm_rsp ? _theResult____h16715 : mmio_rg_ld_val ;

  // value method dmem_st_amo_val
  assign dmem_st_amo_val = 32'h0 ;

  // value method dmem_exc
  assign dmem_exc = dw_valid$whas && dw_exc$wget ;

  // value method dmem_exc_code
  assign dmem_exc_code = dw_exc_code$wget ;

  // value method nmio_master_m_awvalid
  assign nmio_master_awvalid =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N ;

  // value method nmio_master_m_awid
  assign nmio_master_awid =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[64:61] ;

  // value method nmio_master_m_awaddr
  assign nmio_master_awaddr =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[60:29] ;

  // value method nmio_master_m_awlen
  assign nmio_master_awlen =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method nmio_master_m_awsize
  assign nmio_master_awsize =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method nmio_master_m_awburst
  assign nmio_master_awburst =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method nmio_master_m_awlock
  assign nmio_master_awlock =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[15] ;

  // value method nmio_master_m_awcache
  assign nmio_master_awcache =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method nmio_master_m_awprot
  assign nmio_master_awprot =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method nmio_master_m_awqos
  assign nmio_master_awqos =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method nmio_master_m_awregion
  assign nmio_master_awregion =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method nmio_master_m_awready
  assign CAN_FIRE_nmio_master_m_awready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_awready = 1'd1 ;

  // value method nmio_master_m_wvalid
  assign nmio_master_wvalid =
	     nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N ;

  // value method nmio_master_m_wdata
  assign nmio_master_wdata =
	     nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT[36:5] ;

  // value method nmio_master_m_wstrb
  assign nmio_master_wstrb =
	     nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT[4:1] ;

  // value method nmio_master_m_wlast
  assign nmio_master_wlast =
	     nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT[0] ;

  // action method nmio_master_m_wready
  assign CAN_FIRE_nmio_master_m_wready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_wready = 1'd1 ;

  // action method nmio_master_m_bvalid
  assign CAN_FIRE_nmio_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_bvalid = 1'd1 ;

  // value method nmio_master_m_bready
  assign nmio_master_bready =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N ;

  // value method nmio_master_m_arvalid
  assign nmio_master_arvalid =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N ;

  // value method nmio_master_m_arid
  assign nmio_master_arid =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[64:61] ;

  // value method nmio_master_m_araddr
  assign nmio_master_araddr =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[60:29] ;

  // value method nmio_master_m_arlen
  assign nmio_master_arlen =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method nmio_master_m_arsize
  assign nmio_master_arsize =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method nmio_master_m_arburst
  assign nmio_master_arburst =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method nmio_master_m_arlock
  assign nmio_master_arlock =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[15] ;

  // value method nmio_master_m_arcache
  assign nmio_master_arcache =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method nmio_master_m_arprot
  assign nmio_master_arprot =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method nmio_master_m_arqos
  assign nmio_master_arqos =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method nmio_master_m_arregion
  assign nmio_master_arregion =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method nmio_master_m_arready
  assign CAN_FIRE_nmio_master_m_arready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_arready = 1'd1 ;

  // action method nmio_master_m_rvalid
  assign CAN_FIRE_nmio_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_rvalid = 1'd1 ;

  // value method nmio_master_m_rready
  assign nmio_master_rready =
	     nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N ;

  // value method mem_master_haddr
  assign mem_master_HADDR = fabric_adapter_rg_haddr ;

  // value method mem_master_hburst
  assign mem_master_HBURST = 3'd1 ;

  // value method mem_master_hmastlock
  assign mem_master_HMASTLOCK = 1'd0 ;

  // value method mem_master_hprot
  assign mem_master_HPROT = 4'd12 ;

  // value method mem_master_hsize
  assign mem_master_HSIZE = fabric_adapter_rg_hsize ;

  // value method mem_master_htrans
  assign mem_master_HTRANS = fabric_adapter_rg_htrans ;

  // value method mem_master_hwdata
  assign mem_master_HWDATA = fabric_adapter_rg_hwdata ;

  // value method mem_master_hwrite
  assign mem_master_HWRITE = fabric_adapter_rg_hwrite ;

  // action method mem_master_hrdata
  assign CAN_FIRE_mem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_mem_master_hrdata = 1'd1 ;

  // action method mem_master_hready
  assign CAN_FIRE_mem_master_hready = 1'd1 ;
  assign WILL_FIRE_mem_master_hready = 1'd1 ;

  // action method mem_master_hresp
  assign CAN_FIRE_mem_master_hresp = 1'd1 ;
  assign WILL_FIRE_mem_master_hresp = 1'd1 ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = deburstr_xactor_from_master_f_wr_addr$FULL_N ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = deburstr_xactor_from_master_f_wr_data$FULL_N ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = deburstr_xactor_from_master_f_wr_resp$EMPTY_N ;

  // value method dma_server_m_bid
  assign dma_server_bid = deburstr_xactor_from_master_f_wr_resp$D_OUT[5:2] ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = deburstr_xactor_from_master_f_wr_resp$D_OUT[1:0] ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = deburstr_xactor_from_master_f_rd_addr$FULL_N ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = deburstr_xactor_from_master_f_rd_data$EMPTY_N ;

  // value method dma_server_m_rid
  assign dma_server_rid = deburstr_xactor_from_master_f_rd_data$D_OUT[38:35] ;

  // value method dma_server_m_rdata
  assign dma_server_rdata =
	     deburstr_xactor_from_master_f_rd_data$D_OUT[34:3] ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = deburstr_xactor_from_master_f_rd_data$D_OUT[2:1] ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = deburstr_xactor_from_master_f_rd_data$D_OUT[0] ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = { 32'd0, rg_tohost_value } ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // submodule deburstr_f_r_arlen
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) deburstr_f_r_arlen(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(deburstr_f_r_arlen$D_IN),
						 .ENQ(deburstr_f_r_arlen$ENQ),
						 .DEQ(deburstr_f_r_arlen$DEQ),
						 .CLR(deburstr_f_r_arlen$CLR),
						 .D_OUT(deburstr_f_r_arlen$D_OUT),
						 .FULL_N(deburstr_f_r_arlen$FULL_N),
						 .EMPTY_N(deburstr_f_r_arlen$EMPTY_N));

  // submodule deburstr_f_w_awlen
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) deburstr_f_w_awlen(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(deburstr_f_w_awlen$D_IN),
						 .ENQ(deburstr_f_w_awlen$ENQ),
						 .DEQ(deburstr_f_w_awlen$DEQ),
						 .CLR(deburstr_f_w_awlen$CLR),
						 .D_OUT(deburstr_f_w_awlen$D_OUT),
						 .FULL_N(deburstr_f_w_awlen$FULL_N),
						 .EMPTY_N(deburstr_f_w_awlen$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_rd_addr$D_IN),
								.ENQ(deburstr_xactor_from_master_f_rd_addr$ENQ),
								.DEQ(deburstr_xactor_from_master_f_rd_addr$DEQ),
								.CLR(deburstr_xactor_from_master_f_rd_addr$CLR),
								.D_OUT(deburstr_xactor_from_master_f_rd_addr$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_rd_addr$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_rd_addr$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_rd_data$D_IN),
								.ENQ(deburstr_xactor_from_master_f_rd_data$ENQ),
								.DEQ(deburstr_xactor_from_master_f_rd_data$DEQ),
								.CLR(deburstr_xactor_from_master_f_rd_data$CLR),
								.D_OUT(deburstr_xactor_from_master_f_rd_data$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_rd_data$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_rd_data$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_wr_addr$D_IN),
								.ENQ(deburstr_xactor_from_master_f_wr_addr$ENQ),
								.DEQ(deburstr_xactor_from_master_f_wr_addr$DEQ),
								.CLR(deburstr_xactor_from_master_f_wr_addr$CLR),
								.D_OUT(deburstr_xactor_from_master_f_wr_addr$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_wr_addr$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_wr_addr$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_wr_data$D_IN),
								.ENQ(deburstr_xactor_from_master_f_wr_data$ENQ),
								.DEQ(deburstr_xactor_from_master_f_wr_data$DEQ),
								.CLR(deburstr_xactor_from_master_f_wr_data$CLR),
								.D_OUT(deburstr_xactor_from_master_f_wr_data$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_wr_data$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_wr_data$EMPTY_N));

  // submodule deburstr_xactor_from_master_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) deburstr_xactor_from_master_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburstr_xactor_from_master_f_wr_resp$D_IN),
								.ENQ(deburstr_xactor_from_master_f_wr_resp$ENQ),
								.DEQ(deburstr_xactor_from_master_f_wr_resp$DEQ),
								.CLR(deburstr_xactor_from_master_f_wr_resp$CLR),
								.D_OUT(deburstr_xactor_from_master_f_wr_resp$D_OUT),
								.FULL_N(deburstr_xactor_from_master_f_wr_resp$FULL_N),
								.EMPTY_N(deburstr_xactor_from_master_f_wr_resp$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_rd_addr$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_rd_addr$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_rd_addr$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_rd_addr$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_rd_addr$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_rd_addr$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_rd_addr$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_rd_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_rd_data$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_rd_data$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_rd_data$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_rd_data$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_rd_data$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_rd_data$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_rd_data$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_wr_addr$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_wr_addr$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_wr_addr$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_wr_addr$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_wr_addr$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_wr_addr$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_wr_addr$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_wr_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_wr_data$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_wr_data$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_wr_data$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_wr_data$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_wr_data$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_wr_data$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_wr_data$EMPTY_N));

  // submodule deburstr_xactor_to_slave_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) deburstr_xactor_to_slave_f_wr_resp(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburstr_xactor_to_slave_f_wr_resp$D_IN),
							     .ENQ(deburstr_xactor_to_slave_f_wr_resp$ENQ),
							     .DEQ(deburstr_xactor_to_slave_f_wr_resp$DEQ),
							     .CLR(deburstr_xactor_to_slave_f_wr_resp$CLR),
							     .D_OUT(deburstr_xactor_to_slave_f_wr_resp$D_OUT),
							     .FULL_N(deburstr_xactor_to_slave_f_wr_resp$FULL_N),
							     .EMPTY_N(deburstr_xactor_to_slave_f_wr_resp$EMPTY_N));

  // submodule dma_port_slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) dma_port_slave_xactor_f_rd_addr(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dma_port_slave_xactor_f_rd_addr$D_IN),
							  .ENQ(dma_port_slave_xactor_f_rd_addr$ENQ),
							  .DEQ(dma_port_slave_xactor_f_rd_addr$DEQ),
							  .CLR(dma_port_slave_xactor_f_rd_addr$CLR),
							  .D_OUT(dma_port_slave_xactor_f_rd_addr$D_OUT),
							  .FULL_N(dma_port_slave_xactor_f_rd_addr$FULL_N),
							  .EMPTY_N(dma_port_slave_xactor_f_rd_addr$EMPTY_N));

  // submodule dma_port_slave_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) dma_port_slave_xactor_f_rd_data(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dma_port_slave_xactor_f_rd_data$D_IN),
							  .ENQ(dma_port_slave_xactor_f_rd_data$ENQ),
							  .DEQ(dma_port_slave_xactor_f_rd_data$DEQ),
							  .CLR(dma_port_slave_xactor_f_rd_data$CLR),
							  .D_OUT(dma_port_slave_xactor_f_rd_data$D_OUT),
							  .FULL_N(dma_port_slave_xactor_f_rd_data$FULL_N),
							  .EMPTY_N(dma_port_slave_xactor_f_rd_data$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) dma_port_slave_xactor_f_wr_addr(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dma_port_slave_xactor_f_wr_addr$D_IN),
							  .ENQ(dma_port_slave_xactor_f_wr_addr$ENQ),
							  .DEQ(dma_port_slave_xactor_f_wr_addr$DEQ),
							  .CLR(dma_port_slave_xactor_f_wr_addr$CLR),
							  .D_OUT(dma_port_slave_xactor_f_wr_addr$D_OUT),
							  .FULL_N(dma_port_slave_xactor_f_wr_addr$FULL_N),
							  .EMPTY_N(dma_port_slave_xactor_f_wr_addr$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) dma_port_slave_xactor_f_wr_data(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dma_port_slave_xactor_f_wr_data$D_IN),
							  .ENQ(dma_port_slave_xactor_f_wr_data$ENQ),
							  .DEQ(dma_port_slave_xactor_f_wr_data$DEQ),
							  .CLR(dma_port_slave_xactor_f_wr_data$CLR),
							  .D_OUT(dma_port_slave_xactor_f_wr_data$D_OUT),
							  .FULL_N(dma_port_slave_xactor_f_wr_data$FULL_N),
							  .EMPTY_N(dma_port_slave_xactor_f_wr_data$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) dma_port_slave_xactor_f_wr_resp(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dma_port_slave_xactor_f_wr_resp$D_IN),
							  .ENQ(dma_port_slave_xactor_f_wr_resp$ENQ),
							  .DEQ(dma_port_slave_xactor_f_wr_resp$DEQ),
							  .CLR(dma_port_slave_xactor_f_wr_resp$CLR),
							  .D_OUT(dma_port_slave_xactor_f_wr_resp$D_OUT),
							  .FULL_N(dma_port_slave_xactor_f_wr_resp$FULL_N),
							  .EMPTY_N(dma_port_slave_xactor_f_wr_resp$EMPTY_N));

  // submodule dma_port_soc_map
  mkSoC_Map dma_port_soc_map(.CLK(CLK),
			     .RST_N(RST_N),
			     .m_is_IO_addr_addr(dma_port_soc_map$m_is_IO_addr_addr),
			     .m_is_clint_addr_addr(dma_port_soc_map$m_is_clint_addr_addr),
			     .m_is_dtcm_addr_addr(dma_port_soc_map$m_is_dtcm_addr_addr),
			     .m_is_itcm_addr_addr(dma_port_soc_map$m_is_itcm_addr_addr),
			     .m_is_mem_addr_addr(dma_port_soc_map$m_is_mem_addr_addr),
			     .m_is_nmio_addr_addr(dma_port_soc_map$m_is_nmio_addr_addr),
			     .m_is_tcm_addr_addr(dma_port_soc_map$m_is_tcm_addr_addr),
			     .m_clint_addr_base(),
			     .m_clint_addr_size(),
			     .m_clint_addr_lim(),
			     .m_plic_addr_base(),
			     .m_plic_addr_size(),
			     .m_plic_addr_lim(),
			     .m_uart0_addr_base(),
			     .m_uart0_addr_size(),
			     .m_uart0_addr_lim(),
			     .m_gpio0_addr_base(),
			     .m_gpio0_addr_size(),
			     .m_gpio0_addr_lim(),
			     .m_boot_rom_addr_base(),
			     .m_boot_rom_addr_size(),
			     .m_boot_rom_addr_lim(),
			     .m_mem0_controller_addr_base(),
			     .m_mem0_controller_addr_size(),
			     .m_mem0_controller_addr_lim(),
			     .m_itcm_addr_base(),
			     .m_itcm_addr_size(),
			     .m_itcm_addr_lim(),
			     .m_is_itcm_addr(),
			     .m_dtcm_addr_base(),
			     .m_dtcm_addr_size(),
			     .m_dtcm_addr_lim(),
			     .m_is_dtcm_addr(),
			     .m_is_tcm_addr(),
			     .m_is_mem_addr(),
			     .m_is_IO_addr(),
			     .m_is_nmio_addr(),
			     .m_is_clint_addr(),
			     .m_pc_reset_value(),
			     .m_mtvec_reset_value(),
			     .m_nmivec_reset_value());

  // submodule dtcm
  BRAM2BELoad #(.FILENAME("/home/stoy/work050322/riscv-dv-project/Flute/src_minSoC/dtcm.hex"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd13),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(14'd8192),
		.BINARY(1'd0)) dtcm(.CLKA(CLK),
				    .CLKB(CLK),
				    .ADDRA(dtcm$ADDRA),
				    .ADDRB(dtcm$ADDRB),
				    .DIA(dtcm$DIA),
				    .DIB(dtcm$DIB),
				    .WEA(dtcm$WEA),
				    .WEB(dtcm$WEB),
				    .ENA(dtcm$ENA),
				    .ENB(dtcm$ENB),
				    .DOA(dtcm$DOA),
				    .DOB(dtcm$DOB));

  // submodule f_is_mem_req
  FIFO1 #(.width(32'd1), .guarded(1'd1)) f_is_mem_req(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_is_mem_req$D_IN),
						      .ENQ(f_is_mem_req$ENQ),
						      .DEQ(f_is_mem_req$DEQ),
						      .CLR(f_is_mem_req$CLR),
						      .D_OUT(f_is_mem_req$D_OUT),
						      .FULL_N(f_is_mem_req$FULL_N),
						      .EMPTY_N(f_is_mem_req$EMPTY_N));

  // submodule f_mem_rdata
  FIFO1 #(.width(32'd33), .guarded(1'd1)) f_mem_rdata(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_mem_rdata$D_IN),
						      .ENQ(f_mem_rdata$ENQ),
						      .DEQ(f_mem_rdata$DEQ),
						      .CLR(f_mem_rdata$CLR),
						      .D_OUT(f_mem_rdata$D_OUT),
						      .FULL_N(f_mem_rdata$FULL_N),
						      .EMPTY_N(f_mem_rdata$EMPTY_N));

  // submodule f_mem_req
  FIFO1 #(.width(32'd35), .guarded(1'd1)) f_mem_req(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_mem_req$D_IN),
						    .ENQ(f_mem_req$ENQ),
						    .DEQ(f_mem_req$DEQ),
						    .CLR(f_mem_req$CLR),
						    .D_OUT(f_mem_req$D_OUT),
						    .FULL_N(f_mem_req$FULL_N),
						    .EMPTY_N(f_mem_req$EMPTY_N));

  // submodule f_mem_wdata
  FIFO1 #(.width(32'd32), .guarded(1'd1)) f_mem_wdata(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_mem_wdata$D_IN),
						      .ENQ(f_mem_wdata$ENQ),
						      .DEQ(f_mem_wdata$DEQ),
						      .CLR(f_mem_wdata$CLR),
						      .D_OUT(f_mem_wdata$D_OUT),
						      .FULL_N(f_mem_wdata$FULL_N),
						      .EMPTY_N(f_mem_wdata$EMPTY_N));

  // submodule f_nmio_req
  FIFO1 #(.width(32'd35), .guarded(1'd1)) f_nmio_req(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_nmio_req$D_IN),
						     .ENQ(f_nmio_req$ENQ),
						     .DEQ(f_nmio_req$DEQ),
						     .CLR(f_nmio_req$CLR),
						     .D_OUT(f_nmio_req$D_OUT),
						     .FULL_N(f_nmio_req$FULL_N),
						     .EMPTY_N(f_nmio_req$EMPTY_N));

  // submodule nmio_fabric_adapter_f_rd_rsp_control
  FIFO1 #(.width(32'd3),
	  .guarded(1'd1)) nmio_fabric_adapter_f_rd_rsp_control(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(nmio_fabric_adapter_f_rd_rsp_control$D_IN),
							       .ENQ(nmio_fabric_adapter_f_rd_rsp_control$ENQ),
							       .DEQ(nmio_fabric_adapter_f_rd_rsp_control$DEQ),
							       .CLR(nmio_fabric_adapter_f_rd_rsp_control$CLR),
							       .D_OUT(),
							       .FULL_N(nmio_fabric_adapter_f_rd_rsp_control$FULL_N),
							       .EMPTY_N(nmio_fabric_adapter_f_rd_rsp_control$EMPTY_N));

  // submodule nmio_fabric_adapter_f_wr_data_control
  FIFO1 #(.width(32'd6),
	  .guarded(1'd1)) nmio_fabric_adapter_f_wr_data_control(.RST(RST_N),
								.CLK(CLK),
								.D_IN(nmio_fabric_adapter_f_wr_data_control$D_IN),
								.ENQ(nmio_fabric_adapter_f_wr_data_control$ENQ),
								.DEQ(nmio_fabric_adapter_f_wr_data_control$DEQ),
								.CLR(nmio_fabric_adapter_f_wr_data_control$CLR),
								.D_OUT(nmio_fabric_adapter_f_wr_data_control$D_OUT),
								.FULL_N(nmio_fabric_adapter_f_wr_data_control$FULL_N),
								.EMPTY_N(nmio_fabric_adapter_f_wr_data_control$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) nmio_fabric_adapter_master_xactor_f_rd_addr(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(nmio_fabric_adapter_master_xactor_f_rd_addr$D_IN),
								      .ENQ(nmio_fabric_adapter_master_xactor_f_rd_addr$ENQ),
								      .DEQ(nmio_fabric_adapter_master_xactor_f_rd_addr$DEQ),
								      .CLR(nmio_fabric_adapter_master_xactor_f_rd_addr$CLR),
								      .D_OUT(nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT),
								      .FULL_N(nmio_fabric_adapter_master_xactor_f_rd_addr$FULL_N),
								      .EMPTY_N(nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) nmio_fabric_adapter_master_xactor_f_rd_data(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(nmio_fabric_adapter_master_xactor_f_rd_data$D_IN),
								      .ENQ(nmio_fabric_adapter_master_xactor_f_rd_data$ENQ),
								      .DEQ(nmio_fabric_adapter_master_xactor_f_rd_data$DEQ),
								      .CLR(nmio_fabric_adapter_master_xactor_f_rd_data$CLR),
								      .D_OUT(nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT),
								      .FULL_N(nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N),
								      .EMPTY_N(nmio_fabric_adapter_master_xactor_f_rd_data$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(1'd1)) nmio_fabric_adapter_master_xactor_f_wr_addr(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(nmio_fabric_adapter_master_xactor_f_wr_addr$D_IN),
								      .ENQ(nmio_fabric_adapter_master_xactor_f_wr_addr$ENQ),
								      .DEQ(nmio_fabric_adapter_master_xactor_f_wr_addr$DEQ),
								      .CLR(nmio_fabric_adapter_master_xactor_f_wr_addr$CLR),
								      .D_OUT(nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT),
								      .FULL_N(nmio_fabric_adapter_master_xactor_f_wr_addr$FULL_N),
								      .EMPTY_N(nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) nmio_fabric_adapter_master_xactor_f_wr_data(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(nmio_fabric_adapter_master_xactor_f_wr_data$D_IN),
								      .ENQ(nmio_fabric_adapter_master_xactor_f_wr_data$ENQ),
								      .DEQ(nmio_fabric_adapter_master_xactor_f_wr_data$DEQ),
								      .CLR(nmio_fabric_adapter_master_xactor_f_wr_data$CLR),
								      .D_OUT(nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT),
								      .FULL_N(nmio_fabric_adapter_master_xactor_f_wr_data$FULL_N),
								      .EMPTY_N(nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) nmio_fabric_adapter_master_xactor_f_wr_resp(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(nmio_fabric_adapter_master_xactor_f_wr_resp$D_IN),
								      .ENQ(nmio_fabric_adapter_master_xactor_f_wr_resp$ENQ),
								      .DEQ(nmio_fabric_adapter_master_xactor_f_wr_resp$DEQ),
								      .CLR(nmio_fabric_adapter_master_xactor_f_wr_resp$CLR),
								      .D_OUT(nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT),
								      .FULL_N(nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N),
								      .EMPTY_N(nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_clint_addr_addr(soc_map$m_is_clint_addr_addr),
		    .m_is_dtcm_addr_addr(soc_map$m_is_dtcm_addr_addr),
		    .m_is_itcm_addr_addr(soc_map$m_is_itcm_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_nmio_addr_addr(soc_map$m_is_nmio_addr_addr),
		    .m_is_tcm_addr_addr(soc_map$m_is_tcm_addr_addr),
		    .m_clint_addr_base(),
		    .m_clint_addr_size(),
		    .m_clint_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_itcm_addr_base(),
		    .m_itcm_addr_size(),
		    .m_itcm_addr_lim(),
		    .m_is_itcm_addr(soc_map$m_is_itcm_addr),
		    .m_dtcm_addr_base(),
		    .m_dtcm_addr_size(),
		    .m_dtcm_addr_lim(),
		    .m_is_dtcm_addr(soc_map$m_is_dtcm_addr),
		    .m_is_tcm_addr(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_nmio_addr(soc_map$m_is_nmio_addr),
		    .m_is_clint_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_amo_rsp
  assign CAN_FIRE_RL_rl_amo_rsp = rg_dmem_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_amo_rsp = CAN_FIRE_RL_rl_amo_rsp ;

  // rule RL_rl_tcm_rsp
  assign CAN_FIRE_RL_rl_tcm_rsp = rg_dmem_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_tcm_rsp = CAN_FIRE_RL_rl_tcm_rsp ;

  // rule RL_rl_mmio_rsp
  assign CAN_FIRE_RL_rl_mmio_rsp =
	     mmio_rg_mmio_state == 2'd0 && rg_dmem_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_mmio_rsp = CAN_FIRE_RL_rl_mmio_rsp ;

  // rule RL_mmio_rl_read_req
  assign CAN_FIRE_RL_mmio_rl_read_req =
	     f_is_mem_req$EMPTY_N &&
	     IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 &&
	     mmio_rg_mmio_state == 2'd1 &&
	     rg_req[75:74] != 2'd1 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00011) ;
  assign WILL_FIRE_RL_mmio_rl_read_req = CAN_FIRE_RL_mmio_rl_read_req ;

  // rule RL_mmio_rl_AMO_SC
  assign CAN_FIRE_RL_mmio_rl_AMO_SC =
	     mmio_rg_mmio_state == 2'd1 && rg_req[75:74] == 2'd2 &&
	     rg_req[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_mmio_rl_AMO_SC = CAN_FIRE_RL_mmio_rl_AMO_SC ;

  // rule RL_nmio_fabric_adapter_rl_read_data
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data =
	     nmio_fabric_adapter_f_rd_rsp_control$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_rd_data$EMPTY_N &&
	     f_mem_rdata$FULL_N &&
	     nmio_fabric_adapter_rg_rd_rsps_pending ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data ;

  // rule RL_nmio_fabric_adapter_rl_single_read_req
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req =
	     f_nmio_req$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_rd_addr$FULL_N &&
	     nmio_fabric_adapter_f_rd_rsp_control$FULL_N &&
	     f_nmio_req$D_OUT[34] &&
	     !nmio_fabric_adapter_rg_rd_rsps_pending &&
	     !nmio_fabric_adapter_rg_wr_rsps_pending ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;

  // rule RL_nmio_fabric_adapter_rl_write_rsp
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_write_rsp =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_write_rsp =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_nmio_fabric_adapter_rl_single_write_req
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_single_write_req =
	     f_nmio_req$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_wr_addr$FULL_N &&
	     nmio_fabric_adapter_f_wr_data_control$FULL_N &&
	     !f_nmio_req$D_OUT[34] &&
	     !nmio_fabric_adapter_rg_rd_rsps_pending &&
	     !nmio_fabric_adapter_rg_wr_rsps_pending ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	     !nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_fabric_adapter_rl_nseq_req
  assign CAN_FIRE_RL_fabric_adapter_rl_nseq_req =
	     f_mem_req$EMPTY_N && mem_master_HREADY &&
	     (f_mem_req$D_OUT[34] || f_mem_wdata$EMPTY_N) &&
	     fabric_adapter_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_nseq_req =
	     CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // rule RL_fabric_adapter_rl_complete_nseq_req
  assign CAN_FIRE_RL_fabric_adapter_rl_complete_nseq_req =
	     f_mem_req$EMPTY_N && mem_master_HREADY &&
	     fabric_adapter_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req =
	     CAN_FIRE_RL_fabric_adapter_rl_complete_nseq_req ;

  // rule RL_mmio_rl_read_rsp
  assign CAN_FIRE_RL_mmio_rl_read_rsp =
	     f_mem_rdata$EMPTY_N &&
	     (!f_mem_rdata$D_OUT[32] ||
	      rg_req_0_BITS_75_TO_74_1_EQ_0_7_OR_rg_req_0_BI_ETC___d44) &&
	     mmio_rg_mmio_state == 2'd2 ;
  assign WILL_FIRE_RL_mmio_rl_read_rsp = CAN_FIRE_RL_mmio_rl_read_rsp ;

  // rule RL_mmio_rl_write_req
  assign CAN_FIRE_RL_mmio_rl_write_req =
	     f_is_mem_req$EMPTY_N && f_mem_wdata$FULL_N &&
	     IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 &&
	     mmio_rg_mmio_state == 2'd1 &&
	     rg_req[75:74] == 2'd1 ;
  assign WILL_FIRE_RL_mmio_rl_write_req = CAN_FIRE_RL_mmio_rl_write_req ;

  // rule RL_rl_req
  assign CAN_FIRE_RL_rl_req =
	     w_dmem_req_whas__32_AND_soc_map_m_is_itcm_addr_ETC___d763 &&
	     rg_dmem_state != 2'd3 ;
  assign WILL_FIRE_RL_rl_req = CAN_FIRE_RL_rl_req ;

  // rule RL_nmio_fabric_adapter_rl_write_data
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data =
	     nmio_fabric_adapter_f_wr_data_control$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_wr_data$FULL_N &&
	     f_mem_wdata$EMPTY_N ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data ;

  // rule RL_fabric_adapter_rl_read_response
  assign CAN_FIRE_RL_fabric_adapter_rl_read_response =
	     f_mem_rdata$FULL_N && f_mem_req$EMPTY_N && mem_master_HREADY &&
	     fabric_adapter_rg_state == 2'd3 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_read_response =
	     CAN_FIRE_RL_fabric_adapter_rl_read_response ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_fabric_adapter_rl_write_response
  assign CAN_FIRE_RL_fabric_adapter_rl_write_response =
	     f_mem_wdata$EMPTY_N && f_mem_req$EMPTY_N && mem_master_HREADY &&
	     fabric_adapter_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_write_response =
	     CAN_FIRE_RL_fabric_adapter_rl_write_response ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule RL_dma_port_rl_bad_rd_addr
  assign CAN_FIRE_RL_dma_port_rl_bad_rd_addr =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_data$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_rd_addr$D_OUT[30:29] != 2'd0 ;
  assign WILL_FIRE_RL_dma_port_rl_bad_rd_addr =
	     CAN_FIRE_RL_dma_port_rl_bad_rd_addr ;

  // rule RL_dma_port_rl_dma_rd_rsp
  assign CAN_FIRE_RL_dma_port_rl_dma_rd_rsp =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_data$FULL_N &&
	     dma_port_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_dma_port_rl_dma_rd_rsp =
	     CAN_FIRE_RL_dma_port_rl_dma_rd_rsp ;

  // rule RL_dma_port_rl_bad_wr_addr
  assign CAN_FIRE_RL_dma_port_rl_bad_wr_addr =
	     dma_port_slave_xactor_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_resp$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_wr_addr$D_OUT[30:29] != 2'd0 ;
  assign WILL_FIRE_RL_dma_port_rl_bad_wr_addr =
	     CAN_FIRE_RL_dma_port_rl_bad_wr_addr ;

  // rule RL_dma_port_rl_dma_rd_req
  assign CAN_FIRE_RL_dma_port_rl_dma_rd_req =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_rd_addr$D_OUT[30:29] == 2'd0 ;
  assign WILL_FIRE_RL_dma_port_rl_dma_rd_req =
	     CAN_FIRE_RL_dma_port_rl_dma_rd_req ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // rule RL_dma_port_rl_dma_wr_req
  assign CAN_FIRE_RL_dma_port_rl_dma_wr_req =
	     dma_port_slave_xactor_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_resp$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_wr_addr$D_OUT[30:29] == 2'd0 ;
  assign WILL_FIRE_RL_dma_port_rl_dma_wr_req =
	     CAN_FIRE_RL_dma_port_rl_dma_wr_req &&
	     !WILL_FIRE_RL_dma_port_rl_dma_rd_req ;

  // rule __me_check_17
  assign CAN_FIRE___me_check_17 = 1'b1 ;
  assign WILL_FIRE___me_check_17 = 1'b1 ;

  // rule RL_deburstr_rl_wr_xaction_master_to_slave
  assign CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave =
	     deburstr_xactor_to_slave_f_wr_addr$FULL_N &&
	     deburstr_xactor_from_master_f_wr_addr$EMPTY_N &&
	     deburstr_xactor_to_slave_f_wr_data$FULL_N &&
	     deburstr_xactor_from_master_f_wr_data$EMPTY_N &&
	     (deburstr_rg_w_beat_count != 8'd0 || deburstr_f_w_awlen$FULL_N) ;
  assign WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;

  // rule RL_deburstr_rl_wr_resp_slave_to_master
  assign CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master =
	     deburstr_xactor_to_slave_f_wr_resp$EMPTY_N &&
	     deburstr_f_w_awlen$EMPTY_N &&
	     (deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447 ||
	      deburstr_xactor_from_master_f_wr_resp$FULL_N) ;
  assign WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master =
	     CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master ;

  // rule RL_deburstr_rl_rd_xaction_master_to_slave
  assign CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave =
	     deburstr_xactor_to_slave_f_rd_addr$FULL_N &&
	     deburstr_xactor_from_master_f_rd_addr$EMPTY_N &&
	     (deburstr_rg_ar_beat_count != 8'd0 ||
	      deburstr_f_r_arlen$FULL_N) ;
  assign WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave =
	     CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ;

  // rule RL_deburstr_rl_rd_resp_slave_to_master
  assign CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master =
	     deburstr_xactor_to_slave_f_rd_data$EMPTY_N &&
	     deburstr_f_r_arlen$EMPTY_N &&
	     deburstr_xactor_from_master_f_rd_data$FULL_N ;
  assign WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master =
	     CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ;

  // rule RL_deburstr_rl_reset
  assign CAN_FIRE_RL_deburstr_rl_reset = deburstr_rg_reset ;
  assign WILL_FIRE_RL_deburstr_rl_reset = deburstr_rg_reset ;

  // inputs to muxes for submodule ports
  assign MUX_deburstr_rg_b_resp$write_1__SEL_2 =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master &&
	     (deburstr_rg_b_resp == 2'b0 &&
	      deburstr_xactor_to_slave_f_wr_resp$D_OUT[1:0] != 2'b0 ||
	      !deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447) ;
  assign MUX_dtcm$a_put_1__SEL_1 = WILL_FIRE_RL_rl_req && _dfoo3 ;
  assign MUX_f_mem_req$enq_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_write_req && f_is_mem_req$D_OUT ;
  assign MUX_f_mem_req$enq_1__SEL_2 =
	     WILL_FIRE_RL_mmio_rl_read_req && f_is_mem_req$D_OUT ;
  assign MUX_f_mem_req$enq_1__SEL_3 =
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d84 ;
  assign MUX_f_mem_wdata$enq_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] &&
	     rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) ;
  assign MUX_f_nmio_req$enq_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_write_req && !f_is_mem_req$D_OUT ;
  assign MUX_f_nmio_req$enq_1__SEL_2 =
	     WILL_FIRE_RL_mmio_rl_read_req && !f_is_mem_req$D_OUT ;
  assign MUX_f_nmio_req$enq_1__SEL_3 =
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d87 ;
  assign MUX_fabric_adapter_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ;
  assign MUX_mmio_rg_err$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     !soc_map$m_is_dtcm_addr ;
  assign MUX_mmio_rg_ld_val$write_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] ;
  assign MUX_nmio_fabric_adapter_rg_wr_rsps_pending$write_1__SEL_1 =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	     nmio_fabric_adapter_rg_wr_rsps_pending ;
  assign MUX_rg_lrsc_valid$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_amo_rsp && _dfoo1 ;
  assign MUX_rg_lrsc_word64$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_req &&
	     NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d874 ;
  assign MUX_deburstr_rg_ar_beat_count$write_1__VAL_2 =
	     deburstr_rg_ar_beat_count_69_ULT_deburstr_xact_ETC___d500 ?
	       x__h13071 :
	       8'd0 ;
  assign MUX_deburstr_rg_b_beat_count$write_1__VAL_2 =
	     deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447 ?
	       x__h12584 :
	       8'd0 ;
  assign MUX_deburstr_rg_b_resp$write_1__VAL_2 =
	     deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447 ?
	       deburstr_xactor_to_slave_f_wr_resp$D_OUT[1:0] :
	       2'b0 ;
  assign MUX_deburstr_rg_r_beat_count$write_1__VAL_2 =
	     deburstr_rg_r_beat_count_09_ULT_deburstr_f_r_a_ETC___d511 ?
	       x__h13290 :
	       8'd0 ;
  assign MUX_deburstr_rg_w_beat_count$write_1__VAL_2 =
	     deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 ?
	       x__h12077 :
	       8'd0 ;
  assign MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1 =
	     { dma_port_slave_xactor_f_rd_addr$D_OUT[64:29], 3'd5 } ;
  assign MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2 =
	     { dma_port_slave_xactor_f_rd_addr$D_OUT[64:61],
	       dtcm$DOB,
	       3'd1 } ;
  assign MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1 =
	     { dma_port_slave_xactor_f_wr_addr$D_OUT[64:61], 2'd2 } ;
  assign MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2 =
	     { dma_port_slave_xactor_f_wr_addr$D_OUT[64:61], 2'd0 } ;
  assign MUX_dtcm$a_put_1__VAL_1 =
	     (w_dmem_req$wget[75:74] == 2'd1) ? byte_en__h18300 : 4'd0 ;
  assign MUX_dw_exc_code$wset_1__VAL_2 =
	     (rg_req[75:74] == 2'd0 ||
	      rg_req[75:74] == 2'd2 && rg_req[6:2] == 5'b00010) ?
	       4'd5 :
	       4'd7 ;
  assign MUX_f_mem_rdata$enq_1__VAL_1 =
	     { nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] == 2'b0,
	       nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign MUX_f_mem_rdata$enq_1__VAL_2 =
	     { !mem_master_HRESP, mem_master_HRDATA } ;
  assign MUX_f_mem_req$enq_1__VAL_1 = { 1'd0, rg_req[70:39], rg_req[72:71] } ;
  assign MUX_f_mem_req$enq_1__VAL_2 = { 1'd1, rg_req[70:39], rg_req[72:71] } ;
  assign MUX_f_mem_wdata$enq_1__VAL_1 =
	     final_st_val__h2795 << shamt_bits__h2805 ;
  assign MUX_f_mem_wdata$enq_1__VAL_2 = data__h3353 << shamt_bits__h2805 ;
  assign MUX_fabric_adapter_rg_state$write_1__VAL_1 =
	     f_mem_req$D_OUT[34] ? 2'd3 : 2'd2 ;
  assign MUX_mmio_rg_ld_val$write_1__VAL_1 =
	     (rg_req[75:74] == 2'd0 ||
	      rg_req[75:74] == 2'd2 && rg_req[6:2] == 5'b00010) ?
	       ld_val__h2344 :
	       ld_val_bits__h2230 ;
  assign MUX_rg_dmem_state$write_1__VAL_2 =
	     (soc_map$m_is_itcm_addr ||
	      NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757) ?
	       2'd1 :
	       (soc_map$m_is_dtcm_addr ?
		  ((w_dmem_req$wget[75:74] == 2'd2) ? 2'd3 : 2'd1) :
		  2'd2) ;
  assign MUX_rg_lrsc_valid$write_1__VAL_1 =
	     rg_req[75:74] != 2'd2 || rg_req[6:2] == 5'b00010 ||
	     !rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d551 ;
  assign MUX_rg_lrsc_word64$write_1__VAL_2 =
	     { rg_req[75:74] == 2'd2 && rg_req[6:2] == 5'b00011,
	       !rg_lrsc_valid ||
	       !rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547 } ;
  assign MUX_rg_result_valid$write_1__VAL_2 =
	     soc_map$m_is_itcm_addr ||
	     NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757 ||
	     soc_map$m_is_dtcm_addr ;

  // inlined wires
  assign dw_valid$wget = !WILL_FIRE_RL_rl_tcm_rsp || rg_result_valid ;
  assign dw_valid$whas = WILL_FIRE_RL_rl_tcm_rsp || WILL_FIRE_RL_rl_mmio_rsp ;
  assign dw_exc$wget = WILL_FIRE_RL_rl_tcm_rsp ? rg_exc : mmio_rg_err ;
  assign dw_exc_code$wget =
	     WILL_FIRE_RL_rl_tcm_rsp ?
	       rg_exc_code :
	       MUX_dw_exc_code$wset_1__VAL_2 ;
  assign w_dmem_req$wget =
	     { dmem_req_op,
	       dmem_req_f3,
	       dmem_req_addr,
	       dmem_req_store_value,
	       dmem_req_amo_funct7 } ;

  // register deburstr_rg_ar_beat_count
  assign deburstr_rg_ar_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_ar_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_ar_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ||
	     deburstr_rg_reset ;

  // register deburstr_rg_b_beat_count
  assign deburstr_rg_b_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_b_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_b_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master ||
	     deburstr_rg_reset ;

  // register deburstr_rg_b_resp
  assign deburstr_rg_b_resp$D_IN =
	     deburstr_rg_reset ?
	       2'b0 :
	       MUX_deburstr_rg_b_resp$write_1__VAL_2 ;
  assign deburstr_rg_b_resp$EN =
	     MUX_deburstr_rg_b_resp$write_1__SEL_2 || deburstr_rg_reset ;

  // register deburstr_rg_last_beat_raddr
  assign deburstr_rg_last_beat_raddr$D_IN =
	     (deburstr_rg_ar_beat_count == 8'd0) ?
	       deburstr_xactor_from_master_f_rd_addr$D_OUT[60:29] :
	       ((deburstr_xactor_from_master_f_rd_addr$D_OUT[17:16] ==
		 2'b10) ?
		  addr___1__h12874 :
		  addr__h12862) ;
  assign deburstr_rg_last_beat_raddr$EN =
	     CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ;

  // register deburstr_rg_last_beat_waddr
  assign deburstr_rg_last_beat_waddr$D_IN =
	     (deburstr_rg_w_beat_count == 8'd0) ?
	       deburstr_xactor_from_master_f_wr_addr$D_OUT[60:29] :
	       ((deburstr_xactor_from_master_f_wr_addr$D_OUT[17:16] ==
		 2'b10) ?
		  addr___1__h11790 :
		  addr__h11778) ;
  assign deburstr_rg_last_beat_waddr$EN =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;

  // register deburstr_rg_r_beat_count
  assign deburstr_rg_r_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_r_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_r_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ||
	     deburstr_rg_reset ;

  // register deburstr_rg_reset
  assign deburstr_rg_reset$D_IN = !deburstr_rg_reset ;
  assign deburstr_rg_reset$EN = deburstr_rg_reset || EN_reset ;

  // register deburstr_rg_w_beat_count
  assign deburstr_rg_w_beat_count$D_IN =
	     deburstr_rg_reset ?
	       8'd0 :
	       MUX_deburstr_rg_w_beat_count$write_1__VAL_2 ;
  assign deburstr_rg_w_beat_count$EN =
	     WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ||
	     deburstr_rg_reset ;

  // register dma_port_rg_state
  always@(EN_reset or
	  WILL_FIRE_RL_dma_port_rl_dma_rd_req or
	  WILL_FIRE_RL_dma_port_rl_dma_rd_rsp)
  case (1'b1)
    EN_reset: dma_port_rg_state$D_IN = 2'd0;
    WILL_FIRE_RL_dma_port_rl_dma_rd_req: dma_port_rg_state$D_IN = 2'd1;
    WILL_FIRE_RL_dma_port_rl_dma_rd_rsp: dma_port_rg_state$D_IN = 2'd0;
    default: dma_port_rg_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign dma_port_rg_state$EN =
	     WILL_FIRE_RL_dma_port_rl_dma_rd_rsp || EN_reset ||
	     WILL_FIRE_RL_dma_port_rl_dma_rd_req ;

  // register fabric_adapter_rg_haddr
  assign fabric_adapter_rg_haddr$D_IN = f_mem_req$D_OUT[33:2] ;
  assign fabric_adapter_rg_haddr$EN = CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_hsize
  assign fabric_adapter_rg_hsize$D_IN =
	     IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 ;
  assign fabric_adapter_rg_hsize$EN = CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_htrans
  assign fabric_adapter_rg_htrans$D_IN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req ? 2'd0 : 2'd2 ;
  assign fabric_adapter_rg_htrans$EN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req ||
	     WILL_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_hwdata
  assign fabric_adapter_rg_hwdata$D_IN = f_mem_wdata$D_OUT ;
  assign fabric_adapter_rg_hwdata$EN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	     !f_mem_req$D_OUT[34] &&
	     f_mem_wdata$EMPTY_N ;

  // register fabric_adapter_rg_hwrite
  assign fabric_adapter_rg_hwrite$D_IN =
	     !f_mem_req$D_OUT[34] && f_mem_wdata$EMPTY_N ;
  assign fabric_adapter_rg_hwrite$EN =
	     CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_state
  always@(WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req or
	  MUX_fabric_adapter_rg_state$write_1__VAL_1 or
	  MUX_fabric_adapter_rg_state$write_1__SEL_2 or
	  WILL_FIRE_RL_fabric_adapter_rl_nseq_req)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req:
	  fabric_adapter_rg_state$D_IN =
	      MUX_fabric_adapter_rg_state$write_1__VAL_1;
      MUX_fabric_adapter_rg_state$write_1__SEL_2:
	  fabric_adapter_rg_state$D_IN = 2'd0;
      WILL_FIRE_RL_fabric_adapter_rl_nseq_req:
	  fabric_adapter_rg_state$D_IN = 2'd1;
      default: fabric_adapter_rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign fabric_adapter_rg_state$EN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req ||
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register mmio_rg_err
  assign mmio_rg_err$D_IN = !MUX_mmio_rg_err$write_1__SEL_1 ;
  assign mmio_rg_err$EN =
	     WILL_FIRE_RL_mmio_rl_read_rsp && !f_mem_rdata$D_OUT[32] ||
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     !soc_map$m_is_dtcm_addr ;

  // register mmio_rg_final_st_val
  assign mmio_rg_final_st_val$D_IN =
	     MUX_f_mem_wdata$enq_1__SEL_1 ?
	       final_st_val__h2795 :
	       rg_req[38:7] ;
  assign mmio_rg_final_st_val$EN =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] &&
	     rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) ||
	     WILL_FIRE_RL_mmio_rl_write_req ;

  // register mmio_rg_ld_val
  assign mmio_rg_ld_val$D_IN =
	     MUX_mmio_rg_ld_val$write_1__SEL_1 ?
	       MUX_mmio_rg_ld_val$write_1__VAL_1 :
	       32'd1 ;
  assign mmio_rg_ld_val$EN =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] ||
	     WILL_FIRE_RL_mmio_rl_AMO_SC ;

  // register mmio_rg_mmio_state
  always@(MUX_mmio_rg_err$write_1__SEL_1 or
	  WILL_FIRE_RL_mmio_rl_write_req or
	  WILL_FIRE_RL_mmio_rl_read_rsp or
	  WILL_FIRE_RL_mmio_rl_AMO_SC or WILL_FIRE_RL_mmio_rl_read_req)
  case (1'b1)
    MUX_mmio_rg_err$write_1__SEL_1: mmio_rg_mmio_state$D_IN = 2'd1;
    WILL_FIRE_RL_mmio_rl_write_req || WILL_FIRE_RL_mmio_rl_read_rsp ||
    WILL_FIRE_RL_mmio_rl_AMO_SC:
	mmio_rg_mmio_state$D_IN = 2'd0;
    WILL_FIRE_RL_mmio_rl_read_req: mmio_rg_mmio_state$D_IN = 2'd2;
    default: mmio_rg_mmio_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign mmio_rg_mmio_state$EN =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     !soc_map$m_is_dtcm_addr ||
	     WILL_FIRE_RL_mmio_rl_AMO_SC ||
	     WILL_FIRE_RL_mmio_rl_write_req ||
	     WILL_FIRE_RL_mmio_rl_read_rsp ||
	     WILL_FIRE_RL_mmio_rl_read_req ;

  // register nmio_fabric_adapter_rg_rd_client_id
  assign nmio_fabric_adapter_rg_rd_client_id$D_IN = 1'd1 ;
  assign nmio_fabric_adapter_rg_rd_client_id$EN =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;

  // register nmio_fabric_adapter_rg_rd_rsps_pending
  assign nmio_fabric_adapter_rg_rd_rsps_pending$D_IN =
	     !WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data ;
  assign nmio_fabric_adapter_rg_rd_rsps_pending$EN =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;

  // register nmio_fabric_adapter_rg_wr_rsps_pending
  assign nmio_fabric_adapter_rg_wr_rsps_pending$D_IN =
	     !MUX_nmio_fabric_adapter_rg_wr_rsps_pending$write_1__SEL_1 ;
  assign nmio_fabric_adapter_rg_wr_rsps_pending$EN =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	     nmio_fabric_adapter_rg_wr_rsps_pending ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ;

  // register nmio_fabric_adapter_rg_write_error
  assign nmio_fabric_adapter_rg_write_error$D_IN = 1'd1 ;
  assign nmio_fabric_adapter_rg_write_error$EN =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	     (nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] !=
	      2'b0 ||
	      !nmio_fabric_adapter_rg_wr_rsps_pending) ;

  // register rg_dmem_state
  always@(EN_reset or
	  WILL_FIRE_RL_rl_req or
	  MUX_rg_dmem_state$write_1__VAL_2 or WILL_FIRE_RL_rl_amo_rsp)
  case (1'b1)
    EN_reset: rg_dmem_state$D_IN = 2'd0;
    WILL_FIRE_RL_rl_req:
	rg_dmem_state$D_IN = MUX_rg_dmem_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_amo_rsp: rg_dmem_state$D_IN = 2'd1;
    default: rg_dmem_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign rg_dmem_state$EN =
	     WILL_FIRE_RL_rl_req || EN_reset || WILL_FIRE_RL_rl_amo_rsp ;

  // register rg_exc
  assign rg_exc$D_IN =
	     soc_map$m_is_itcm_addr ||
	     NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757 ;
  assign rg_exc$EN = CAN_FIRE_RL_rl_req ;

  // register rg_exc_code
  assign rg_exc_code$D_IN =
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 ?
	       ((w_dmem_req$wget[75:74] == 2'd0 ||
		 w_dmem_req$wget[75:74] == 2'd2 &&
		 w_dmem_req$wget[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       ((w_dmem_req$wget[75:74] == 2'd0 ||
		 w_dmem_req$wget[75:74] == 2'd2 &&
		 w_dmem_req$wget[6:2] == 5'b00010) ?
		  4'd4 :
		  4'd6) ;
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_req &&
	     (soc_map$m_is_itcm_addr ||
	      NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757) ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_req[70:39] ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	     rg_req[6:2] == 5'b00010 ;

  // register rg_lrsc_size
  assign rg_lrsc_size$D_IN = rg_req[72:71] ;
  assign rg_lrsc_size$EN =
	     WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	     rg_req[6:2] == 5'b00010 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_1 &&
	     MUX_rg_lrsc_valid$write_1__VAL_1 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_amo_rsp && _dfoo1 ||
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     soc_map_m_is_dtcm_addr_w_dmem_req_wget__33_BIT_ETC___d864 ;

  // register rg_lrsc_word64
  assign rg_lrsc_word64$D_IN =
	     MUX_rg_lrsc_word64$write_1__SEL_1 ?
	       2'd0 :
	       MUX_rg_lrsc_word64$write_1__VAL_2 ;
  assign rg_lrsc_word64$EN =
	     WILL_FIRE_RL_rl_req &&
	     NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d874 ||
	     WILL_FIRE_RL_rl_amo_rsp ;

  // register rg_req
  assign rg_req$D_IN = w_dmem_req$wget ;
  assign rg_req$EN = CAN_FIRE_RL_rl_req ;

  // register rg_result_valid
  assign rg_result_valid$D_IN =
	     !EN_reset && MUX_rg_result_valid$write_1__VAL_2 ;
  assign rg_result_valid$EN = WILL_FIRE_RL_rl_req || EN_reset ;

  // register rg_tohost_addr
  assign rg_tohost_addr$D_IN = set_watch_tohost_tohost_addr[31:0] ;
  assign rg_tohost_addr$EN = EN_set_watch_tohost ;

  // register rg_tohost_value
  assign rg_tohost_value$D_IN = EN_reset ? 32'd0 : w_dmem_req$wget[38:7] ;
  assign rg_tohost_value$EN =
	     WILL_FIRE_RL_rl_req &&
	     rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776 ||
	     EN_reset ;

  // register rg_watch_tohost
  assign rg_watch_tohost$D_IN = set_watch_tohost_watch_tohost ;
  assign rg_watch_tohost$EN = EN_set_watch_tohost ;

  // submodule deburstr_f_r_arlen
  assign deburstr_f_r_arlen$D_IN =
	     deburstr_xactor_from_master_f_rd_addr$D_OUT[28:21] ;
  assign deburstr_f_r_arlen$ENQ =
	     WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave &&
	     deburstr_rg_ar_beat_count == 8'd0 ;
  assign deburstr_f_r_arlen$DEQ =
	     WILL_FIRE_RL_deburstr_rl_rd_resp_slave_to_master &&
	     !deburstr_rg_r_beat_count_09_ULT_deburstr_f_r_a_ETC___d511 ;
  assign deburstr_f_r_arlen$CLR = deburstr_rg_reset ;

  // submodule deburstr_f_w_awlen
  assign deburstr_f_w_awlen$D_IN =
	     deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21] ;
  assign deburstr_f_w_awlen$ENQ =
	     WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	     deburstr_rg_w_beat_count == 8'd0 ;
  assign deburstr_f_w_awlen$DEQ =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master &&
	     !deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447 ;
  assign deburstr_f_w_awlen$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_rd_addr
  assign deburstr_xactor_from_master_f_rd_addr$D_IN =
	     { dma_server_arid,
	       dma_server_araddr,
	       dma_server_arlen,
	       dma_server_arsize,
	       dma_server_arburst,
	       dma_server_arlock,
	       dma_server_arcache,
	       dma_server_arprot,
	       dma_server_arqos,
	       dma_server_arregion } ;
  assign deburstr_xactor_from_master_f_rd_addr$ENQ =
	     dma_server_arvalid &&
	     deburstr_xactor_from_master_f_rd_addr$FULL_N ;
  assign deburstr_xactor_from_master_f_rd_addr$DEQ =
	     WILL_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave &&
	     !deburstr_rg_ar_beat_count_69_ULT_deburstr_xact_ETC___d500 ;
  assign deburstr_xactor_from_master_f_rd_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_rd_data
  assign deburstr_xactor_from_master_f_rd_data$D_IN =
	     { deburstr_xactor_to_slave_f_rd_data$D_OUT[38:1],
	       !deburstr_rg_r_beat_count_09_ULT_deburstr_f_r_a_ETC___d511 } ;
  assign deburstr_xactor_from_master_f_rd_data$ENQ =
	     CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ;
  assign deburstr_xactor_from_master_f_rd_data$DEQ =
	     dma_server_rready &&
	     deburstr_xactor_from_master_f_rd_data$EMPTY_N ;
  assign deburstr_xactor_from_master_f_rd_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_wr_addr
  assign deburstr_xactor_from_master_f_wr_addr$D_IN =
	     { dma_server_awid,
	       dma_server_awaddr,
	       dma_server_awlen,
	       dma_server_awsize,
	       dma_server_awburst,
	       dma_server_awlock,
	       dma_server_awcache,
	       dma_server_awprot,
	       dma_server_awqos,
	       dma_server_awregion } ;
  assign deburstr_xactor_from_master_f_wr_addr$ENQ =
	     dma_server_awvalid &&
	     deburstr_xactor_from_master_f_wr_addr$FULL_N ;
  assign deburstr_xactor_from_master_f_wr_addr$DEQ =
	     WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	     !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 ;
  assign deburstr_xactor_from_master_f_wr_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_wr_data
  assign deburstr_xactor_from_master_f_wr_data$D_IN =
	     { dma_server_wdata, dma_server_wstrb, dma_server_wlast } ;
  assign deburstr_xactor_from_master_f_wr_data$ENQ =
	     dma_server_wvalid &&
	     deburstr_xactor_from_master_f_wr_data$FULL_N ;
  assign deburstr_xactor_from_master_f_wr_data$DEQ =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;
  assign deburstr_xactor_from_master_f_wr_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_from_master_f_wr_resp
  assign deburstr_xactor_from_master_f_wr_resp$D_IN =
	     { deburstr_xactor_to_slave_f_wr_resp$D_OUT[5:2],
	       (deburstr_rg_b_resp == 2'b0) ?
		 deburstr_xactor_to_slave_f_wr_resp$D_OUT[1:0] :
		 deburstr_rg_b_resp } ;
  assign deburstr_xactor_from_master_f_wr_resp$ENQ =
	     WILL_FIRE_RL_deburstr_rl_wr_resp_slave_to_master &&
	     !deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447 ;
  assign deburstr_xactor_from_master_f_wr_resp$DEQ =
	     dma_server_bready &&
	     deburstr_xactor_from_master_f_wr_resp$EMPTY_N ;
  assign deburstr_xactor_from_master_f_wr_resp$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_rd_addr
  assign deburstr_xactor_to_slave_f_rd_addr$D_IN =
	     { deburstr_xactor_from_master_f_rd_addr$D_OUT[64:61],
	       a_out_araddr__h12780,
	       8'd0,
	       deburstr_xactor_from_master_f_rd_addr$D_OUT[20:18],
	       2'b0,
	       deburstr_xactor_from_master_f_rd_addr$D_OUT[15:0] } ;
  assign deburstr_xactor_to_slave_f_rd_addr$ENQ =
	     CAN_FIRE_RL_deburstr_rl_rd_xaction_master_to_slave ;
  assign deburstr_xactor_to_slave_f_rd_addr$DEQ =
	     deburstr_xactor_to_slave_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_addr$FULL_N ;
  assign deburstr_xactor_to_slave_f_rd_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_rd_data
  assign deburstr_xactor_to_slave_f_rd_data$D_IN =
	     dma_port_slave_xactor_f_rd_data$D_OUT ;
  assign deburstr_xactor_to_slave_f_rd_data$ENQ =
	     dma_port_slave_xactor_f_rd_data$EMPTY_N &&
	     deburstr_xactor_to_slave_f_rd_data$FULL_N ;
  assign deburstr_xactor_to_slave_f_rd_data$DEQ =
	     CAN_FIRE_RL_deburstr_rl_rd_resp_slave_to_master ;
  assign deburstr_xactor_to_slave_f_rd_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_wr_addr
  assign deburstr_xactor_to_slave_f_wr_addr$D_IN =
	     { deburstr_xactor_from_master_f_wr_addr$D_OUT[64:61],
	       a_out_awaddr__h11696,
	       8'd0,
	       deburstr_xactor_from_master_f_wr_addr$D_OUT[20:18],
	       2'b0,
	       deburstr_xactor_from_master_f_wr_addr$D_OUT[15:0] } ;
  assign deburstr_xactor_to_slave_f_wr_addr$ENQ =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;
  assign deburstr_xactor_to_slave_f_wr_addr$DEQ =
	     deburstr_xactor_to_slave_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_addr$FULL_N ;
  assign deburstr_xactor_to_slave_f_wr_addr$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_wr_data
  assign deburstr_xactor_to_slave_f_wr_data$D_IN =
	     { deburstr_xactor_from_master_f_wr_data$D_OUT[36:1], 1'd1 } ;
  assign deburstr_xactor_to_slave_f_wr_data$ENQ =
	     CAN_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave ;
  assign deburstr_xactor_to_slave_f_wr_data$DEQ =
	     deburstr_xactor_to_slave_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$FULL_N ;
  assign deburstr_xactor_to_slave_f_wr_data$CLR = deburstr_rg_reset ;

  // submodule deburstr_xactor_to_slave_f_wr_resp
  assign deburstr_xactor_to_slave_f_wr_resp$D_IN =
	     dma_port_slave_xactor_f_wr_resp$D_OUT ;
  assign deburstr_xactor_to_slave_f_wr_resp$ENQ =
	     dma_port_slave_xactor_f_wr_resp$EMPTY_N &&
	     deburstr_xactor_to_slave_f_wr_resp$FULL_N ;
  assign deburstr_xactor_to_slave_f_wr_resp$DEQ =
	     CAN_FIRE_RL_deburstr_rl_wr_resp_slave_to_master ;
  assign deburstr_xactor_to_slave_f_wr_resp$CLR = deburstr_rg_reset ;

  // submodule dma_port_slave_xactor_f_rd_addr
  assign dma_port_slave_xactor_f_rd_addr$D_IN =
	     deburstr_xactor_to_slave_f_rd_addr$D_OUT ;
  assign dma_port_slave_xactor_f_rd_addr$ENQ =
	     deburstr_xactor_to_slave_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_addr$FULL_N ;
  assign dma_port_slave_xactor_f_rd_addr$DEQ =
	     WILL_FIRE_RL_dma_port_rl_dma_rd_rsp ||
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ;
  assign dma_port_slave_xactor_f_rd_addr$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_rd_data
  assign dma_port_slave_xactor_f_rd_data$D_IN =
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ?
	       MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1 :
	       MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2 ;
  assign dma_port_slave_xactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ||
	     WILL_FIRE_RL_dma_port_rl_dma_rd_rsp ;
  assign dma_port_slave_xactor_f_rd_data$DEQ =
	     deburstr_xactor_to_slave_f_rd_data$FULL_N &&
	     dma_port_slave_xactor_f_rd_data$EMPTY_N ;
  assign dma_port_slave_xactor_f_rd_data$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_addr
  assign dma_port_slave_xactor_f_wr_addr$D_IN =
	     deburstr_xactor_to_slave_f_wr_addr$D_OUT ;
  assign dma_port_slave_xactor_f_wr_addr$ENQ =
	     deburstr_xactor_to_slave_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_addr$FULL_N ;
  assign dma_port_slave_xactor_f_wr_addr$DEQ =
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ;
  assign dma_port_slave_xactor_f_wr_addr$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_data
  assign dma_port_slave_xactor_f_wr_data$D_IN =
	     deburstr_xactor_to_slave_f_wr_data$D_OUT ;
  assign dma_port_slave_xactor_f_wr_data$ENQ =
	     deburstr_xactor_to_slave_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$FULL_N ;
  assign dma_port_slave_xactor_f_wr_data$DEQ =
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ;
  assign dma_port_slave_xactor_f_wr_data$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_resp
  assign dma_port_slave_xactor_f_wr_resp$D_IN =
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ?
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1 :
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2 ;
  assign dma_port_slave_xactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ||
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ;
  assign dma_port_slave_xactor_f_wr_resp$DEQ =
	     deburstr_xactor_to_slave_f_wr_resp$FULL_N &&
	     dma_port_slave_xactor_f_wr_resp$EMPTY_N ;
  assign dma_port_slave_xactor_f_wr_resp$CLR = EN_reset ;

  // submodule dma_port_soc_map
  assign dma_port_soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_itcm_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_nmio_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // submodule dtcm
  assign dtcm$ADDRA =
	     MUX_dtcm$a_put_1__SEL_1 ?
	       w_dmem_req$wget[53:41] :
	       rg_req[53:41] ;
  assign dtcm$ADDRB =
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ?
	       dma_port_slave_xactor_f_wr_addr$D_OUT[43:31] :
	       dma_port_slave_xactor_f_rd_addr$D_OUT[43:31] ;
  assign dtcm$DIA =
	     MUX_dtcm$a_put_1__SEL_1 ?
	       ram_st_value__h18301 :
	       ram_st_value__h15549 ;
  assign dtcm$DIB =
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ?
	       dma_port_slave_xactor_f_wr_data$D_OUT[36:5] :
	       32'hAAAAAAAA /* unspecified value */  ;
  assign dtcm$WEA =
	     MUX_dtcm$a_put_1__SEL_1 ?
	       MUX_dtcm$a_put_1__VAL_1 :
	       byte_en__h15548 ;
  assign dtcm$WEB =
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ?
	       dma_port_slave_xactor_f_wr_data$D_OUT[4:1] :
	       4'd0 ;
  assign dtcm$ENA =
	     WILL_FIRE_RL_rl_req && _dfoo3 ||
	     WILL_FIRE_RL_rl_amo_rsp &&
	     rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d703 ;
  assign dtcm$ENB =
	     WILL_FIRE_RL_dma_port_rl_dma_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_dma_rd_req ;

  // submodule f_is_mem_req
  assign f_is_mem_req$D_IN = !soc_map$m_is_nmio_addr ;
  assign f_is_mem_req$ENQ = MUX_mmio_rg_err$write_1__SEL_1 ;
  assign f_is_mem_req$DEQ =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] &&
	     rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) ||
	     WILL_FIRE_RL_mmio_rl_write_req ||
	     WILL_FIRE_RL_mmio_rl_read_req ;
  assign f_is_mem_req$CLR = 1'b0 ;

  // submodule f_mem_rdata
  assign f_mem_rdata$D_IN =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data ?
	       MUX_f_mem_rdata$enq_1__VAL_1 :
	       MUX_f_mem_rdata$enq_1__VAL_2 ;
  assign f_mem_rdata$ENQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ;
  assign f_mem_rdata$DEQ =
	     f_mem_rdata$EMPTY_N &&
	     (!f_mem_rdata$D_OUT[32] ||
	      rg_req_0_BITS_75_TO_74_1_EQ_0_7_OR_rg_req_0_BI_ETC___d44) &&
	     mmio_rg_mmio_state == 2'd2 ;
  assign f_mem_rdata$CLR = 1'b0 ;

  // submodule f_mem_req
  always@(MUX_f_mem_req$enq_1__SEL_1 or
	  MUX_f_mem_req$enq_1__VAL_1 or
	  MUX_f_mem_req$enq_1__SEL_2 or
	  MUX_f_mem_req$enq_1__VAL_2 or MUX_f_mem_req$enq_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_mem_req$enq_1__SEL_1: f_mem_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      MUX_f_mem_req$enq_1__SEL_2: f_mem_req$D_IN = MUX_f_mem_req$enq_1__VAL_2;
      MUX_f_mem_req$enq_1__SEL_3: f_mem_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      default: f_mem_req$D_IN = 35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_mem_req$ENQ =
	     WILL_FIRE_RL_mmio_rl_write_req && f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_req && f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d84 ;
  assign f_mem_req$DEQ =
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ;
  assign f_mem_req$CLR = 1'b0 ;

  // submodule f_mem_wdata
  assign f_mem_wdata$D_IN =
	     MUX_f_mem_wdata$enq_1__SEL_1 ?
	       MUX_f_mem_wdata$enq_1__VAL_1 :
	       MUX_f_mem_wdata$enq_1__VAL_2 ;
  assign f_mem_wdata$ENQ =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] &&
	     rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) ||
	     WILL_FIRE_RL_mmio_rl_write_req ;
  assign f_mem_wdata$DEQ =
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data ;
  assign f_mem_wdata$CLR = 1'b0 ;

  // submodule f_nmio_req
  always@(MUX_f_nmio_req$enq_1__SEL_1 or
	  MUX_f_mem_req$enq_1__VAL_1 or
	  MUX_f_nmio_req$enq_1__SEL_2 or
	  MUX_f_mem_req$enq_1__VAL_2 or MUX_f_nmio_req$enq_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_nmio_req$enq_1__SEL_1:
	  f_nmio_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      MUX_f_nmio_req$enq_1__SEL_2:
	  f_nmio_req$D_IN = MUX_f_mem_req$enq_1__VAL_2;
      MUX_f_nmio_req$enq_1__SEL_3:
	  f_nmio_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      default: f_nmio_req$D_IN = 35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_nmio_req$ENQ =
	     WILL_FIRE_RL_mmio_rl_write_req && !f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_req && !f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d87 ;
  assign f_nmio_req$DEQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;
  assign f_nmio_req$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_f_rd_rsp_control
  assign nmio_fabric_adapter_f_rd_rsp_control$D_IN =
	     { f_nmio_req$D_OUT[1:0], f_nmio_req$D_OUT[4] } ;
  assign nmio_fabric_adapter_f_rd_rsp_control$ENQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;
  assign nmio_fabric_adapter_f_rd_rsp_control$DEQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data ;
  assign nmio_fabric_adapter_f_rd_rsp_control$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_f_wr_data_control
  assign nmio_fabric_adapter_f_wr_data_control$D_IN =
	     { 1'd1, f_nmio_req$D_OUT[1:0], f_nmio_req$D_OUT[4:2] } ;
  assign nmio_fabric_adapter_f_wr_data_control$ENQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ;
  assign nmio_fabric_adapter_f_wr_data_control$DEQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data ;
  assign nmio_fabric_adapter_f_wr_data_control$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_rd_addr
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$D_IN =
	     { 4'd0, f_nmio_req$D_OUT[33:2], 8'd0, x__h5077, 18'd65536 } ;
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$DEQ =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N &&
	     nmio_master_arready ;
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_rd_data
  assign nmio_fabric_adapter_master_xactor_f_rd_data$D_IN =
	     { nmio_master_rid,
	       nmio_master_rdata,
	       nmio_master_rresp,
	       nmio_master_rlast } ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data$ENQ =
	     nmio_master_rvalid &&
	     nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_wr_addr
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$D_IN =
	     { 4'd0, f_nmio_req$D_OUT[33:2], 8'd0, x__h5077, 18'd65536 } ;
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$ENQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ;
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$DEQ =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N &&
	     nmio_master_awready ;
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_wr_data
  assign nmio_fabric_adapter_master_xactor_f_wr_data$D_IN =
	     { f_mem_wdata$D_OUT, strb__h5697, 1'd1 } ;
  assign nmio_fabric_adapter_master_xactor_f_wr_data$ENQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data ;
  assign nmio_fabric_adapter_master_xactor_f_wr_data$DEQ =
	     nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N &&
	     nmio_master_wready ;
  assign nmio_fabric_adapter_master_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_wr_resp
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$D_IN =
	     { nmio_master_bid, nmio_master_bresp } ;
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$ENQ =
	     nmio_master_bvalid &&
	     nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N ;
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$DEQ =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign soc_map$m_is_dtcm_addr_addr = w_dmem_req$wget[70:39] ;
  assign soc_map$m_is_itcm_addr_addr = w_dmem_req$wget[70:39] ;
  assign soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign soc_map$m_is_nmio_addr_addr = w_dmem_req$wget[70:39] ;
  assign soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // remaining internal signals
  assign IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 =
	     (f_is_mem_req$EMPTY_N && f_is_mem_req$D_OUT) ?
	       f_mem_req$FULL_N :
	       f_nmio_req$FULL_N ;
  assign IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 =
	     (f_mem_req$D_OUT[1:0] == 2'b11) ?
	       3'd2 :
	       { 1'b0, f_mem_req$D_OUT[1:0] } ;
  assign NOT_rg_req_0_BITS_75_TO_74_1_EQ_2_5_6_OR_NOT_r_ETC___d671 =
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547) &&
	     verbosity != 2'd0 ;
  assign NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d831 =
	     !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     soc_map$m_is_dtcm_addr &&
	     w_dmem_req$wget[75:74] == 2'd1 &&
	     verbosity != 2'd0 ;
  assign NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d874 =
	     !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     soc_map$m_is_dtcm_addr &&
	     (w_dmem_req$wget[75:74] != 2'd2 ||
	      w_dmem_req$wget[6:2] != 5'b00011) &&
	     (w_dmem_req$wget[75:74] != 2'd2 ||
	      w_dmem_req$wget[6:2] == 5'b00010 ||
	      w_dmem_req$wget[6:2] == 5'b00011) &&
	     (w_dmem_req$wget[75:74] != 2'd2 ||
	      w_dmem_req$wget[6:2] != 5'b00010) ;
  assign NOT_verbosity_EQ_0_3_4_AND_NOT_rg_watch_tohost_ETC___d945 =
	     verbosity != 2'd0 &&
	     (rg_watch_tohost != set_watch_tohost_watch_tohost ||
	      rg_tohost_addr != set_watch_tohost_tohost_addr[31:0]) ;
  assign NOT_verbosity_ULE_1_33___d334 = verbosity > 2'd1 ;
  assign NOT_verbosity_ULT_2_26___d127 = verbosity >= 2'd2 ;
  assign NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757 =
	     w_dmem_req$wget[72:71] != 2'b0 &&
	     (w_dmem_req$wget[72:71] != 2'b01 || w_dmem_req$wget[39]) &&
	     (w_dmem_req$wget[72:71] != 2'b10 ||
	      w_dmem_req$wget[40:39] != 2'b0) &&
	     (w_dmem_req$wget[72:71] != 2'b11 ||
	      w_dmem_req$wget[41:39] != 3'b0) ;
  assign _dfoo1 =
	     rg_req[75:74] == 2'd2 &&
	     (rg_req[6:2] != 5'b00010 &&
	      rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d551 ||
	      rg_req[6:2] == 5'b00010) ;
  assign _dfoo3 =
	     w_dmem_req$wget[75:74] != 2'd1 ||
	     !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	     soc_map$m_is_dtcm_addr ;
  assign _theResult____h16715 =
	     rg_lrsc_word64[1] ? rsp_word__h16779 : ram_out__h13990 ;
  assign _theResult___snd__h15774 = { st_value__h15546[23:0], 8'hAA } ;
  assign _theResult___snd__h15778 = { st_value__h15546[7:0], 24'hAAAAAA } ;
  assign _theResult___snd__h15803 =
	     (rg_req[40:39] == 2'h0) ?
	       st_value__h15546 :
	       _theResult___snd__h15807 ;
  assign _theResult___snd__h15807 = { st_value__h15546[15:0], 16'hAAAA } ;
  assign _theResult___snd__h18526 = { w_dmem_req$wget[30:0], 1'h0 } ;
  assign _theResult___snd__h18530 = { w_dmem_req$wget[14:0], 17'h0AAAA } ;
  assign _theResult___snd__h18555 =
	     (w_dmem_req$wget[40:39] == 2'b0) ?
	       w_dmem_req$wget[38:7] :
	       _theResult___snd__h18559 ;
  assign _theResult___snd__h18559 = { w_dmem_req$wget[22:0], 9'h0AA } ;
  assign a_out_araddr__h12780 = deburstr_rg_last_beat_raddr$D_IN ;
  assign a_out_awaddr__h11696 = deburstr_rg_last_beat_waddr$D_IN ;
  assign addr___1__h11790 = x__h11802 | y__h11803 ;
  assign addr___1__h12874 = x__h12886 | y__h12887 ;
  assign addr__h11778 =
	     deburstr_rg_last_beat_waddr +
	     (32'd1 << deburstr_xactor_from_master_f_wr_addr$D_OUT[20:18]) ;
  assign addr__h12862 =
	     deburstr_rg_last_beat_raddr +
	     (32'd1 << deburstr_xactor_from_master_f_rd_addr$D_OUT[20:18]) ;
  assign burst_len__h11779 =
	     { 24'd0, deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21] } +
	     32'd1 ;
  assign burst_len__h12863 =
	     { 24'd0, deburstr_xactor_from_master_f_rd_addr$D_OUT[28:21] } +
	     32'd1 ;
  assign data1__h2461 = f_mem_rdata$D_OUT[31:0] >> shamt_bits__h2805 ;
  assign data__h3353 = rg_req[38:7] & mask__h2505 ;
  assign deburstr_rg_ar_beat_count_69_ULT_deburstr_xact_ETC___d500 =
	     deburstr_rg_ar_beat_count <
	     deburstr_xactor_from_master_f_rd_addr$D_OUT[28:21] ;
  assign deburstr_rg_b_beat_count_45_ULT_deburstr_f_w_a_ETC___d447 =
	     deburstr_rg_b_beat_count < deburstr_f_w_awlen$D_OUT ;
  assign deburstr_rg_r_beat_count_09_ULT_deburstr_f_r_a_ETC___d511 =
	     deburstr_rg_r_beat_count < deburstr_f_r_arlen$D_OUT ;
  assign deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 =
	     deburstr_rg_w_beat_count <
	     deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21] ;
  assign dtcmDOA_BITS_15_TO_0__q2 = dtcm$DOA[15:0] ;
  assign dtcmDOA_BITS_15_TO_8__q3 = dtcm$DOA[15:8] ;
  assign dtcmDOA_BITS_23_TO_16__q4 = dtcm$DOA[23:16] ;
  assign dtcmDOA_BITS_31_TO_16__q5 = dtcm$DOA[31:16] ;
  assign dtcmDOA_BITS_31_TO_24__q6 = dtcm$DOA[31:24] ;
  assign dtcmDOA_BITS_7_TO_0__q1 = dtcm$DOA[7:0] ;
  assign f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d121 =
	     f_mem_rdata$D_OUT[32] && rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) &&
	     verbosity != 2'd0 ;
  assign f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d84 =
	     f_mem_rdata$D_OUT[32] && rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) &&
	     f_is_mem_req$D_OUT ;
  assign f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d87 =
	     f_mem_rdata$D_OUT[32] && rg_req[75:74] != 2'd0 &&
	     (rg_req[75:74] != 2'd2 || rg_req[6:2] != 5'b00010) &&
	     !f_is_mem_req$D_OUT ;
  assign final_st_val__h15382 = ram_out__h13990 + rg_req[38:7] ;
  assign final_st_val__h15387 = ram_out__h13990 ^ rg_req[38:7] ;
  assign final_st_val__h15391 = ram_out__h13990 & rg_req[38:7] ;
  assign final_st_val__h15395 = ram_out__h13990 | rg_req[38:7] ;
  assign final_st_val__h15399 =
	     (ram_out__h13990 < rg_req[38:7]) ?
	       ram_out__h13990 :
	       rg_req[38:7] ;
  assign final_st_val__h15404 =
	     (ram_out__h13990 <= rg_req[38:7]) ?
	       rg_req[38:7] :
	       ram_out__h13990 ;
  assign final_st_val__h15410 =
	     ((ram_out__h13990 ^ 32'h80000000) <
	      (rg_req[38:7] ^ 32'h80000000)) ?
	       ram_out__h13990 :
	       rg_req[38:7] ;
  assign final_st_val__h15415 =
	     ((ram_out__h13990 ^ 32'h80000000) <=
	      (rg_req[38:7] ^ 32'h80000000)) ?
	       rg_req[38:7] :
	       ram_out__h13990 ;
  assign final_st_val__h2935 = ld_val_bits__h2230 + rg_req[38:7] ;
  assign final_st_val__h2940 = ld_val_bits__h2230 ^ rg_req[38:7] ;
  assign final_st_val__h2944 = ld_val_bits__h2230 & rg_req[38:7] ;
  assign final_st_val__h2948 = ld_val_bits__h2230 | rg_req[38:7] ;
  assign final_st_val__h2952 =
	     (ld_val_bits__h2230 < rg_req[38:7]) ?
	       ld_val_bits__h2230 :
	       rg_req[38:7] ;
  assign final_st_val__h2957 =
	     (ld_val_bits__h2230 <= rg_req[38:7]) ?
	       rg_req[38:7] :
	       ld_val_bits__h2230 ;
  assign final_st_val__h2963 =
	     ((ld_val_bits__h2230 ^ 32'h80000000) <
	      (rg_req[38:7] ^ 32'h80000000)) ?
	       ld_val_bits__h2230 :
	       rg_req[38:7] ;
  assign final_st_val__h2968 =
	     ((ld_val_bits__h2230 ^ 32'h80000000) <=
	      (rg_req[38:7] ^ 32'h80000000)) ?
	       rg_req[38:7] :
	       ld_val_bits__h2230 ;
  assign ld_val__h2344 =
	     (!rg_req[73] &&
	      CASE_rg_req_BITS_72_TO_71_0b0_ld_val_bits230_B_ETC__q7) ?
	       result__h2669 :
	       result__h2725 ;
  assign ld_val_bits__h2230 = data1__h2461 & mask__h2505 ;
  assign lsbs__h5696 =
	     { 2'd0, nmio_fabric_adapter_f_wr_data_control$D_OUT[1:0] } ;
  assign result__h14882 =
	     { {24{dtcmDOA_BITS_7_TO_0__q1[7]}}, dtcmDOA_BITS_7_TO_0__q1 } ;
  assign result__h14913 =
	     { {24{dtcmDOA_BITS_15_TO_8__q3[7]}}, dtcmDOA_BITS_15_TO_8__q3 } ;
  assign result__h14941 =
	     { {24{dtcmDOA_BITS_23_TO_16__q4[7]}},
	       dtcmDOA_BITS_23_TO_16__q4 } ;
  assign result__h14969 =
	     { {24{dtcmDOA_BITS_31_TO_24__q6[7]}},
	       dtcmDOA_BITS_31_TO_24__q6 } ;
  assign result__h15010 = { 24'd0, dtcm$DOA[7:0] } ;
  assign result__h15038 = { 24'd0, dtcm$DOA[15:8] } ;
  assign result__h15066 = { 24'd0, dtcm$DOA[23:16] } ;
  assign result__h15094 = { 24'd0, dtcm$DOA[31:24] } ;
  assign result__h15135 =
	     { {16{dtcmDOA_BITS_15_TO_0__q2[15]}},
	       dtcmDOA_BITS_15_TO_0__q2 } ;
  assign result__h15163 =
	     { {16{dtcmDOA_BITS_31_TO_16__q5[15]}},
	       dtcmDOA_BITS_31_TO_16__q5 } ;
  assign result__h15202 = { 16'd0, dtcm$DOA[15:0] } ;
  assign result__h15230 = { 16'd0, dtcm$DOA[31:16] } ;
  assign result__h2669 = ld_val_bits__h2230 | y__h2681 ;
  assign result__h2725 = ld_val_bits__h2230 & mask__h2505 ;
  assign rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547 =
	     rg_lrsc_pa == rg_req[70:39] ;
  assign rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d563 =
	     rg_req[6:2] == 5'b00011 &&
	     (!rg_lrsc_valid ||
	      !rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547) &&
	     verbosity != 2'd0 ;
  assign rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d555 =
	     rg_req[6:2] == 5'b00011 && rg_lrsc_valid &&
	     rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547 &&
	     verbosity != 2'd0 ;
  assign rg_req_0_BITS_75_TO_74_1_EQ_0_7_OR_rg_req_0_BI_ETC___d44 =
	     rg_req[75:74] == 2'd0 ||
	     rg_req[75:74] == 2'd2 && rg_req[6:2] == 5'b00010 ||
	     f_is_mem_req$EMPTY_N && f_mem_wdata$FULL_N &&
	     IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 ;
  assign rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d551 =
	     rg_req[75:74] == 2'd2 &&
	     (rg_req[6:2] == 5'b00011 && rg_lrsc_valid &&
	      rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547 ||
	      rg_req[6:2] != 5'b00010 && rg_req[6:2] != 5'b00011 &&
	      rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547) ;
  assign rg_req_0_BITS_75_TO_74_1_EQ_2_5_AND_rg_req_0_B_ETC___d703 =
	     rg_req[75:74] == 2'd2 && rg_req[6:2] != 5'b00010 &&
	     (rg_req[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_46_EQ_rg_req_0_BITS_70_TO_39_8___d547) ;
  assign rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776 =
	     rg_watch_tohost && w_dmem_req$wget[75:74] == 2'd1 &&
	     w_dmem_req$wget[70:39] == rg_tohost_addr &&
	     w_dmem_req$wget[38:7] != 32'd0 ;
  assign rsp_word__h16779 = { 31'd0, rg_lrsc_word64[0] } ;
  assign shamt_bits__h2805 = { rg_req[40:39], 3'b0 } ;
  assign soc_map_m_is_dtcm_addr_w_dmem_req_wget__33_BIT_ETC___d864 =
	     soc_map$m_is_dtcm_addr && w_dmem_req$wget[75:74] == 2'd1 &&
	     rg_lrsc_pa == w_dmem_req$wget[70:39] ;
  assign st_value__h15546 =
	     (rg_req[75:74] == 2'd2 && rg_req[6:2] == 5'b00011) ?
	       rg_req[38:7] :
	       v__h14542 ;
  assign strb__h5697 = strb__h5695 << lsbs__h5696 ;
  assign test_num__h17309 = { 1'd0, w_dmem_req$wget[38:8] } ;
  assign v__h14542 =
	     (rg_req[75:74] == 2'd2 && rg_req[6:2] != 5'b00010 &&
	      rg_req[6:2] != 5'b00011) ?
	       v__h14613 :
	       rg_req[38:7] ;
  assign w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 =
	     w_dmem_req$wget[72:71] == 2'b0 ||
	     w_dmem_req$wget[72:71] == 2'b01 && !w_dmem_req$wget[39] ||
	     w_dmem_req$wget[72:71] == 2'b10 &&
	     w_dmem_req$wget[40:39] == 2'b0 ||
	     w_dmem_req$wget[72:71] == 2'b11 &&
	     w_dmem_req$wget[41:39] == 3'b0 ;
  assign w_dmem_req_whas__32_AND_soc_map_m_is_itcm_addr_ETC___d763 =
	     EN_dmem_req &&
	     (soc_map$m_is_itcm_addr ||
	      NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757 ||
	      soc_map$m_is_dtcm_addr ||
	      f_is_mem_req$FULL_N) ;
  assign word_addr__h17707 = { 2'd0, w_dmem_req$wget[70:41] } ;
  assign wrap_mask__h11780 =
	     (burst_len__h11779 <<
	      deburstr_xactor_from_master_f_wr_addr$D_OUT[20:18]) -
	     32'd1 ;
  assign wrap_mask__h12864 =
	     (burst_len__h12863 <<
	      deburstr_xactor_from_master_f_rd_addr$D_OUT[20:18]) -
	     32'd1 ;
  assign x__h11802 = deburstr_rg_last_beat_waddr & y__h11804 ;
  assign x__h12077 = deburstr_rg_w_beat_count + 8'd1 ;
  assign x__h12584 = deburstr_rg_b_beat_count + 8'd1 ;
  assign x__h12886 = deburstr_rg_last_beat_raddr & y__h12888 ;
  assign x__h13071 = deburstr_rg_ar_beat_count + 8'd1 ;
  assign x__h13290 = deburstr_rg_r_beat_count + 8'd1 ;
  assign x__h5077 = { 1'b0, f_nmio_req$D_OUT[1:0] } ;
  assign y__h11803 = addr__h11778 & wrap_mask__h11780 ;
  assign y__h11804 = ~wrap_mask__h11780 ;
  assign y__h12887 = addr__h12862 & wrap_mask__h12864 ;
  assign y__h12888 = ~wrap_mask__h12864 ;
  always@(rg_req)
  begin
    case (rg_req[72:71])
      2'b0: mask__h2505 = 32'h000000FF;
      2'b01: mask__h2505 = 32'h0000FFFF;
      default: mask__h2505 = 32'hFFFFFFFF;
    endcase
  end
  always@(rg_req)
  begin
    case (rg_req[72:71])
      2'b0: y__h2681 = 32'hFFFFFF00;
      2'b01: y__h2681 = 32'hFFFF0000;
      default: y__h2681 = 32'd0;
    endcase
  end
  always@(nmio_fabric_adapter_f_wr_data_control$D_OUT)
  begin
    case (nmio_fabric_adapter_f_wr_data_control$D_OUT[4:3])
      2'b0: strb__h5695 = 4'h1;
      2'b01: strb__h5695 = 4'h3;
      default: strb__h5695 = 4'hF;
    endcase
  end
  always@(rg_req)
  begin
    case (rg_req[40:39])
      2'h0: _theResult___fst__h15769 = 4'h1;
      2'h1: _theResult___fst__h15769 = 4'h2;
      2'h2: _theResult___fst__h15769 = 4'h4;
      2'h3: _theResult___fst__h15769 = 4'h8;
    endcase
  end
  always@(rg_req)
  begin
    case (rg_req[40:39])
      2'h0: _theResult___fst__h15802 = 4'h3;
      2'h2: _theResult___fst__h15802 = 4'hC;
      default: _theResult___fst__h15802 = 4'd0;
    endcase
  end
  always@(rg_req or
	  final_st_val__h2968 or
	  final_st_val__h2935 or
	  final_st_val__h2940 or
	  final_st_val__h2948 or
	  final_st_val__h2944 or
	  final_st_val__h2963 or final_st_val__h2952 or final_st_val__h2957)
  begin
    case (rg_req[6:2])
      5'b0: final_st_val__h2795 = final_st_val__h2935;
      5'b00001: final_st_val__h2795 = rg_req[38:7];
      5'b00100: final_st_val__h2795 = final_st_val__h2940;
      5'b01000: final_st_val__h2795 = final_st_val__h2948;
      5'b01100: final_st_val__h2795 = final_st_val__h2944;
      5'b10000: final_st_val__h2795 = final_st_val__h2963;
      5'b11000: final_st_val__h2795 = final_st_val__h2952;
      5'b11100: final_st_val__h2795 = final_st_val__h2957;
      default: final_st_val__h2795 = final_st_val__h2968;
    endcase
  end
  always@(rg_req or _theResult___fst__h15769 or _theResult___fst__h15802)
  begin
    case (rg_req[72:71])
      2'b0: byte_en__h15548 = _theResult___fst__h15769;
      2'b01: byte_en__h15548 = _theResult___fst__h15802;
      2'd2, 2'd3: byte_en__h15548 = 4'hF;
    endcase
  end
  always@(rg_req or ld_val_bits__h2230)
  begin
    case (rg_req[72:71])
      2'b0:
	  CASE_rg_req_BITS_72_TO_71_0b0_ld_val_bits230_B_ETC__q7 =
	      ld_val_bits__h2230[7];
      2'b01:
	  CASE_rg_req_BITS_72_TO_71_0b0_ld_val_bits230_B_ETC__q7 =
	      ld_val_bits__h2230[15];
      default: CASE_rg_req_BITS_72_TO_71_0b0_ld_val_bits230_B_ETC__q7 =
		   ld_val_bits__h2230[31];
    endcase
  end
  always@(rg_req or
	  result__h14882 or
	  result__h14913 or result__h14941 or result__h14969)
  begin
    case (rg_req[40:39])
      2'h0:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620 =
	      result__h14882;
      2'h1:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620 =
	      result__h14913;
      2'h2:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620 =
	      result__h14941;
      2'h3:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620 =
	      result__h14969;
    endcase
  end
  always@(rg_req or
	  result__h15010 or
	  result__h15038 or result__h15066 or result__h15094)
  begin
    case (rg_req[40:39])
      2'h0:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629 =
	      result__h15010;
      2'h1:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629 =
	      result__h15038;
      2'h2:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629 =
	      result__h15066;
      2'h3:
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629 =
	      result__h15094;
    endcase
  end
  always@(rg_req or result__h15135 or result__h15163)
  begin
    case (rg_req[40:39])
      2'h0:
	  CASE_rg_req_BITS_40_TO_39_0x0_result5135_0x2_r_ETC__q8 =
	      result__h15135;
      2'h2:
	  CASE_rg_req_BITS_40_TO_39_0x0_result5135_0x2_r_ETC__q8 =
	      result__h15163;
      default: CASE_rg_req_BITS_40_TO_39_0x0_result5135_0x2_r_ETC__q8 = 32'd0;
    endcase
  end
  always@(rg_req or result__h15202 or result__h15230)
  begin
    case (rg_req[40:39])
      2'h0:
	  CASE_rg_req_BITS_40_TO_39_0x0_result5202_0x2_r_ETC__q9 =
	      result__h15202;
      2'h2:
	  CASE_rg_req_BITS_40_TO_39_0x0_result5202_0x2_r_ETC__q9 =
	      result__h15230;
      default: CASE_rg_req_BITS_40_TO_39_0x0_result5202_0x2_r_ETC__q9 = 32'd0;
    endcase
  end
  always@(rg_req or
	  dtcm$DOA or
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620 or
	  CASE_rg_req_BITS_40_TO_39_0x0_result5135_0x2_r_ETC__q8 or
	  IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629 or
	  CASE_rg_req_BITS_40_TO_39_0x0_result5202_0x2_r_ETC__q9)
  begin
    case (rg_req[73:71])
      3'b0:
	  ram_out__h13990 =
	      IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_SEX_ETC___d620;
      3'b001:
	  ram_out__h13990 =
	      CASE_rg_req_BITS_40_TO_39_0x0_result5135_0x2_r_ETC__q8;
      3'b010: ram_out__h13990 = (rg_req[40:39] == 2'h0) ? dtcm$DOA : 32'd0;
      3'b100:
	  ram_out__h13990 =
	      IF_rg_req_0_BITS_40_TO_39_7_EQ_0x0_04_THEN_0_C_ETC___d629;
      3'b101:
	  ram_out__h13990 =
	      CASE_rg_req_BITS_40_TO_39_0x0_result5202_0x2_r_ETC__q9;
      default: ram_out__h13990 = dtcm$DOA;
    endcase
  end
  always@(rg_req or
	  final_st_val__h15415 or
	  final_st_val__h15382 or
	  final_st_val__h15387 or
	  final_st_val__h15395 or
	  final_st_val__h15391 or
	  final_st_val__h15410 or
	  final_st_val__h15399 or final_st_val__h15404)
  begin
    case (rg_req[6:2])
      5'b0: v__h14613 = final_st_val__h15382;
      5'b00001: v__h14613 = rg_req[38:7];
      5'b00100: v__h14613 = final_st_val__h15387;
      5'b01000: v__h14613 = final_st_val__h15395;
      5'b01100: v__h14613 = final_st_val__h15391;
      5'b10000: v__h14613 = final_st_val__h15410;
      5'b11000: v__h14613 = final_st_val__h15399;
      5'b11100: v__h14613 = final_st_val__h15404;
      default: v__h14613 = final_st_val__h15415;
    endcase
  end
  always@(rg_req or
	  _theResult___snd__h15778 or
	  st_value__h15546 or
	  _theResult___snd__h15774 or _theResult___snd__h15807)
  begin
    case (rg_req[40:39])
      2'h0: _theResult___snd__h15770 = st_value__h15546;
      2'h1: _theResult___snd__h15770 = _theResult___snd__h15774;
      2'h2: _theResult___snd__h15770 = _theResult___snd__h15807;
      2'd3: _theResult___snd__h15770 = _theResult___snd__h15778;
    endcase
  end
  always@(rg_req or
	  st_value__h15546 or
	  _theResult___snd__h15770 or _theResult___snd__h15803)
  begin
    case (rg_req[72:71])
      2'b0: ram_st_value__h15549 = _theResult___snd__h15770;
      2'b01: ram_st_value__h15549 = _theResult___snd__h15803;
      default: ram_st_value__h15549 = st_value__h15546;
    endcase
  end
  always@(w_dmem_req$wget)
  begin
    case (w_dmem_req$wget[40:39])
      2'b0: _theResult___fst__h18521 = 4'h1;
      2'h1: _theResult___fst__h18521 = 4'h2;
      2'h2: _theResult___fst__h18521 = 4'h4;
      2'h3: _theResult___fst__h18521 = 4'h8;
    endcase
  end
  always@(w_dmem_req$wget)
  begin
    case (w_dmem_req$wget[40:39])
      2'b0: _theResult___fst__h18554 = 4'h3;
      2'h2: _theResult___fst__h18554 = 4'hC;
      default: _theResult___fst__h18554 = 4'd0;
    endcase
  end
  always@(w_dmem_req$wget or
	  _theResult___snd__h18530 or
	  _theResult___snd__h18526 or _theResult___snd__h18559)
  begin
    case (w_dmem_req$wget[40:39])
      2'b0: _theResult___snd__h18522 = w_dmem_req$wget[38:7];
      2'h1: _theResult___snd__h18522 = _theResult___snd__h18526;
      2'h2: _theResult___snd__h18522 = _theResult___snd__h18559;
      2'd3: _theResult___snd__h18522 = _theResult___snd__h18530;
    endcase
  end
  always@(w_dmem_req$wget or
	  _theResult___snd__h18522 or _theResult___snd__h18555)
  begin
    case (w_dmem_req$wget[72:71])
      2'b0: ram_st_value__h18301 = _theResult___snd__h18522;
      2'b01: ram_st_value__h18301 = _theResult___snd__h18555;
      default: ram_st_value__h18301 = w_dmem_req$wget[38:7];
    endcase
  end
  always@(w_dmem_req$wget or
	  _theResult___fst__h18521 or _theResult___fst__h18554)
  begin
    case (w_dmem_req$wget[72:71])
      2'b0: byte_en__h18300 = _theResult___fst__h18521;
      2'b01: byte_en__h18300 = _theResult___fst__h18554;
      2'b10, 2'b11: byte_en__h18300 = 4'hF;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        deburstr_rg_ar_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburstr_rg_b_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburstr_rg_b_resp <= `BSV_ASSIGNMENT_DELAY 2'b0;
	deburstr_rg_r_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburstr_rg_reset <= `BSV_ASSIGNMENT_DELAY 1'd1;
	deburstr_rg_w_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dma_port_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	fabric_adapter_rg_htrans <= `BSV_ASSIGNMENT_DELAY 2'd0;
	fabric_adapter_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	mmio_rg_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmio_rg_final_st_val <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmio_rg_ld_val <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmio_rg_mmio_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	nmio_fabric_adapter_rg_rd_rsps_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	nmio_fabric_adapter_rg_wr_rsps_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	nmio_fabric_adapter_rg_write_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dmem_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_exc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_word64 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_result_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tohost_value <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (deburstr_rg_ar_beat_count$EN)
	  deburstr_rg_ar_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_ar_beat_count$D_IN;
	if (deburstr_rg_b_beat_count$EN)
	  deburstr_rg_b_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_b_beat_count$D_IN;
	if (deburstr_rg_b_resp$EN)
	  deburstr_rg_b_resp <= `BSV_ASSIGNMENT_DELAY deburstr_rg_b_resp$D_IN;
	if (deburstr_rg_r_beat_count$EN)
	  deburstr_rg_r_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_r_beat_count$D_IN;
	if (deburstr_rg_reset$EN)
	  deburstr_rg_reset <= `BSV_ASSIGNMENT_DELAY deburstr_rg_reset$D_IN;
	if (deburstr_rg_w_beat_count$EN)
	  deburstr_rg_w_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburstr_rg_w_beat_count$D_IN;
	if (dma_port_rg_state$EN)
	  dma_port_rg_state <= `BSV_ASSIGNMENT_DELAY dma_port_rg_state$D_IN;
	if (fabric_adapter_rg_htrans$EN)
	  fabric_adapter_rg_htrans <= `BSV_ASSIGNMENT_DELAY
	      fabric_adapter_rg_htrans$D_IN;
	if (fabric_adapter_rg_state$EN)
	  fabric_adapter_rg_state <= `BSV_ASSIGNMENT_DELAY
	      fabric_adapter_rg_state$D_IN;
	if (mmio_rg_err$EN)
	  mmio_rg_err <= `BSV_ASSIGNMENT_DELAY mmio_rg_err$D_IN;
	if (mmio_rg_final_st_val$EN)
	  mmio_rg_final_st_val <= `BSV_ASSIGNMENT_DELAY
	      mmio_rg_final_st_val$D_IN;
	if (mmio_rg_ld_val$EN)
	  mmio_rg_ld_val <= `BSV_ASSIGNMENT_DELAY mmio_rg_ld_val$D_IN;
	if (mmio_rg_mmio_state$EN)
	  mmio_rg_mmio_state <= `BSV_ASSIGNMENT_DELAY mmio_rg_mmio_state$D_IN;
	if (nmio_fabric_adapter_rg_rd_rsps_pending$EN)
	  nmio_fabric_adapter_rg_rd_rsps_pending <= `BSV_ASSIGNMENT_DELAY
	      nmio_fabric_adapter_rg_rd_rsps_pending$D_IN;
	if (nmio_fabric_adapter_rg_wr_rsps_pending$EN)
	  nmio_fabric_adapter_rg_wr_rsps_pending <= `BSV_ASSIGNMENT_DELAY
	      nmio_fabric_adapter_rg_wr_rsps_pending$D_IN;
	if (nmio_fabric_adapter_rg_write_error$EN)
	  nmio_fabric_adapter_rg_write_error <= `BSV_ASSIGNMENT_DELAY
	      nmio_fabric_adapter_rg_write_error$D_IN;
	if (rg_dmem_state$EN)
	  rg_dmem_state <= `BSV_ASSIGNMENT_DELAY rg_dmem_state$D_IN;
	if (rg_exc$EN) rg_exc <= `BSV_ASSIGNMENT_DELAY rg_exc$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_lrsc_word64$EN)
	  rg_lrsc_word64 <= `BSV_ASSIGNMENT_DELAY rg_lrsc_word64$D_IN;
	if (rg_result_valid$EN)
	  rg_result_valid <= `BSV_ASSIGNMENT_DELAY rg_result_valid$D_IN;
	if (rg_tohost_value$EN)
	  rg_tohost_value <= `BSV_ASSIGNMENT_DELAY rg_tohost_value$D_IN;
	if (rg_watch_tohost$EN)
	  rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY rg_watch_tohost$D_IN;
      end
    if (deburstr_rg_last_beat_raddr$EN)
      deburstr_rg_last_beat_raddr <= `BSV_ASSIGNMENT_DELAY
	  deburstr_rg_last_beat_raddr$D_IN;
    if (deburstr_rg_last_beat_waddr$EN)
      deburstr_rg_last_beat_waddr <= `BSV_ASSIGNMENT_DELAY
	  deburstr_rg_last_beat_waddr$D_IN;
    if (fabric_adapter_rg_haddr$EN)
      fabric_adapter_rg_haddr <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_haddr$D_IN;
    if (fabric_adapter_rg_hsize$EN)
      fabric_adapter_rg_hsize <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_hsize$D_IN;
    if (fabric_adapter_rg_hwdata$EN)
      fabric_adapter_rg_hwdata <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_hwdata$D_IN;
    if (fabric_adapter_rg_hwrite$EN)
      fabric_adapter_rg_hwrite <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_hwrite$D_IN;
    if (nmio_fabric_adapter_rg_rd_client_id$EN)
      nmio_fabric_adapter_rg_rd_client_id <= `BSV_ASSIGNMENT_DELAY
	  nmio_fabric_adapter_rg_rd_client_id$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_lrsc_size$EN)
      rg_lrsc_size <= `BSV_ASSIGNMENT_DELAY rg_lrsc_size$D_IN;
    if (rg_req$EN) rg_req <= `BSV_ASSIGNMENT_DELAY rg_req$D_IN;
    if (rg_tohost_addr$EN)
      rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY rg_tohost_addr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    deburstr_rg_ar_beat_count = 8'hAA;
    deburstr_rg_b_beat_count = 8'hAA;
    deburstr_rg_b_resp = 2'h2;
    deburstr_rg_last_beat_raddr = 32'hAAAAAAAA;
    deburstr_rg_last_beat_waddr = 32'hAAAAAAAA;
    deburstr_rg_r_beat_count = 8'hAA;
    deburstr_rg_reset = 1'h0;
    deburstr_rg_w_beat_count = 8'hAA;
    dma_port_rg_state = 2'h2;
    fabric_adapter_rg_haddr = 32'hAAAAAAAA;
    fabric_adapter_rg_hsize = 3'h2;
    fabric_adapter_rg_htrans = 2'h2;
    fabric_adapter_rg_hwdata = 32'hAAAAAAAA;
    fabric_adapter_rg_hwrite = 1'h0;
    fabric_adapter_rg_state = 2'h2;
    mmio_rg_err = 1'h0;
    mmio_rg_final_st_val = 32'hAAAAAAAA;
    mmio_rg_ld_val = 32'hAAAAAAAA;
    mmio_rg_mmio_state = 2'h2;
    nmio_fabric_adapter_rg_rd_client_id = 1'h0;
    nmio_fabric_adapter_rg_rd_rsps_pending = 1'h0;
    nmio_fabric_adapter_rg_wr_rsps_pending = 1'h0;
    nmio_fabric_adapter_rg_write_error = 1'h0;
    rg_dmem_state = 2'h2;
    rg_exc = 1'h0;
    rg_exc_code = 4'hA;
    rg_lrsc_pa = 32'hAAAAAAAA;
    rg_lrsc_size = 2'h2;
    rg_lrsc_valid = 1'h0;
    rg_lrsc_word64 = 2'h2;
    rg_req = 76'hAAAAAAAAAAAAAAAAAAA;
    rg_result_valid = 1'h0;
    rg_tohost_addr = 32'hAAAAAAAA;
    rg_tohost_value = 32'hAAAAAAAA;
    rg_watch_tohost = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d555)
	begin
	  v__h14261 = $stime;
	  #0;
	end
    v__h14255 = v__h14261 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d555)
	$display("%0d: %m.fav_amo_write_to_ram: SC success", v__h14255);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d555)
	$display("      (va %08h) (data %016h)", rg_req[70:39], rg_req[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d563)
	begin
	  v__h14427 = $stime;
	  #0;
	end
    v__h14421 = v__h14427 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d563)
	$display("%0d: %m.fav_amo_write_to_ram: SC fail", v__h14421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d563)
	$display("      (va %08h) (data %016h)", rg_req[70:39], rg_req[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	begin
	  v__h14657 = $stime;
	  #0;
	end
    v__h14651 = v__h14657 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write("%0d: %m.fav_amo_write_to_ram: AMO ", v__h14651);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] != 5'b0 &&
	  rg_req[6:2] != 5'b00001 &&
	  rg_req[6:2] != 5'b00100 &&
	  rg_req[6:2] != 5'b01100 &&
	  rg_req[6:2] != 5'b01000 &&
	  rg_req[6:2] != 5'b10000 &&
	  rg_req[6:2] != 5'b10100 &&
	  rg_req[6:2] != 5'b11000)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$display("      (va %08h) (rs2_val %016h) (f3 %03b)",
		 rg_req[70:39],
		 rg_req[38:7],
		 rg_req[73:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$display("      (load-result %016h)", ram_out__h13990);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] != 5'b0 &&
	  rg_req[6:2] != 5'b00001 &&
	  rg_req[6:2] != 5'b00100 &&
	  rg_req[6:2] != 5'b01100 &&
	  rg_req[6:2] != 5'b01000 &&
	  rg_req[6:2] != 5'b10000 &&
	  rg_req[6:2] != 5'b10100 &&
	  rg_req[6:2] != 5'b11000)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write(" (%016h, %016h) -> %016h",
	       ram_out__h13990,
	       rg_req[38:7],
	       v__h14613,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  (rg_req[6:2] == 5'b00011 || rg_req[6:2] != 5'b00010) &&
	  NOT_rg_req_0_BITS_75_TO_74_1_EQ_2_5_6_OR_NOT_r_ETC___d671)
	$display("      (RAM byte_en %08b) (RAM addr %08h) (RAM data %016h)",
		 byte_en__h15548,
		 rg_req[53:41],
		 ram_st_value__h15549);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] == 5'b00010 &&
	  verbosity != 2'd0)
	begin
	  v__h16455 = $stime;
	  #0;
	end
    v__h16449 = v__h16455 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[75:74] == 2'd2 &&
	  rg_req[6:2] == 5'b00010 &&
	  verbosity != 2'd0)
	$display("%0d: %m.rl_amo_rsp: LR-hit", v__h16449);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	begin
	  v__h16833 = $stime;
	  #0;
	end
    v__h16827 = v__h16833 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$display("%0d: %m.rl_tcm_rsp: (va %08h) (rsp_word %016h)",
		 v__h16827,
		 rg_req[70:39],
		 _theResult____h16715);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write("     (ram_out %016h) ", ram_out__h13990, "(rg_req ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write("MMU_Cache_Req { ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3 &&
	  rg_req[75:74] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3 &&
	  rg_req[75:74] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3 &&
	  rg_req[75:74] != 2'd0 &&
	  rg_req[75:74] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3) $write(", ", "f3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write("'h%h", rg_req[73:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3) $write(", ", "va: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write("'h%h", rg_req[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write(", ", "st_value: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write("'h%h", rg_req[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write(", ", "amo_funct7: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3)
	$write("'h%h", rg_req[6:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity == 2'd3) $write(" )", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mmio_rsp && verbosity != 2'd0)
	begin
	  v__h17080 = $stime;
	  #0;
	end
    v__h17074 = v__h17080 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mmio_rsp && verbosity != 2'd0)
	$display("%0d: %m.rl_mmio_rsp: (rsp_word %016h) (final_st_val %016h)",
		 v__h17074,
		 mmio_rg_ld_val,
		 mmio_rg_final_st_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_req && verbosity != 2'd0)
	begin
	  v__h1871 = $stime;
	  #0;
	end
    v__h1865 = v__h1871 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_req && verbosity != 2'd0)
	$display("%0d: %m.rl_read_req: f3 %0h vaddr %0h  paddr %0h",
		 v__h1865,
		 rg_req[73:71],
		 rg_req[70:39],
		 rg_req[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	begin
	  v__h3755 = $stime;
	  #0;
	end
    v__h3749 = v__h3755 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	$display("%0d: %m.rl_AMO_SC; f3 %0h  vaddr %0h  paddr %0h  st_value %0h",
		 v__h3749,
		 rg_req[73:71],
		 rg_req[70:39],
		 rg_req[70:39],
		 rg_req[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	$display("    goto MMIO_DONE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	begin
	  v__h4760 = $stime;
	  #0;
	end
    v__h4754 = v__h4760 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$display("%0d: %m.rl_read_data: ", v__h4754);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$write("     single");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$write(" ok %0d data %08h",
	       nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] == 2'b0,
	       nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0)
	begin
	  v__h4964 = $stime;
	  #0;
	end
    v__h4958 = v__h4964 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0)
	$write("%0d: %m.rl_single_read_req:\n    AXI4_Rd_Addr{araddr %0h arlen 0 (burst length 1) ",
	       v__h4958,
	       f_nmio_req$D_OUT[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd0)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd1)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd2)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] != 2'd1 &&
	  f_nmio_req$D_OUT[1:0] != 2'd2)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0)
	$write("}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	begin
	  v__h5442 = $stime;
	  #0;
	end
    v__h5436 = v__h5442 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("%0d: %m.rl_write_rsp: ", v__h5436);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	begin
	  v__h5493 = $stime;
	  #0;
	end
    v__h5487 = v__h5493 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$display("%0d: %m.rl_write_rsp: FABRIC RESPONSE ERROR", v__h5487);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	begin
	  v__h5329 = $stime;
	  #0;
	end
    v__h5323 = v__h5329 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$display("%0d: %m.rl_write_rsp: ERROR not expecting any write-response:",
		 v__h5323);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0)
	begin
	  v__h6117 = $stime;
	  #0;
	end
    v__h6111 = v__h6117 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0)
	$write("%0d: %m.rl_single_write_req: AXI4_Wr_Addr{awaddr %0h awlen %0d ",
	       v__h6111,
	       f_nmio_req$D_OUT[33:2],
	       8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd0)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd1)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd2)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] != 2'd1 &&
	  f_nmio_req$D_OUT[1:0] != 2'd2)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0)
	$write(" incr}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	begin
	  v__h6755 = $stime;
	  #0;
	end
    v__h6749 = v__h6755 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	$write("%0d: %m.rl_nseq_req: (addr 0x%08h) ",
	       v__h6749,
	       f_mem_req$D_OUT[33:2],
	       "(read: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  f_mem_req$D_OUT[34])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  !f_mem_req$D_OUT[34])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	$write(") ", "(size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd0)
	$write("AHBL_BITS8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd1)
	$write("AHBL_BITS16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd2)
	$write("AHBL_BITS32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd3)
	$write("AHBL_BITS64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd4)
	$write("AHBL_BITS128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd5)
	$write("AHBL_BITS256");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 == 3'd6)
	$write("AHBL_BITS512");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd0 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd1 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd2 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd3 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd4 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd5 &&
	  IF_f_mem_req_first__34_BITS_1_TO_0_44_EQ_0b11__ETC___d247 != 3'd6)
	$write("AHBL_BITS1024");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  !f_mem_req$D_OUT[34] &&
	  f_mem_wdata$EMPTY_N)
	begin
	  v__h6985 = $stime;
	  #0;
	end
    v__h6979 = v__h6985 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  !f_mem_req$D_OUT[34] &&
	  f_mem_wdata$EMPTY_N)
	$display("%0d: %m.rl_complete_nseq_req: (addr 0x%08h) (wdata 0x%08h)",
		 v__h6979,
		 f_mem_req$D_OUT[33:2],
		 f_mem_wdata$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  (f_mem_req$D_OUT[34] || !f_mem_wdata$EMPTY_N))
	begin
	  v__h7011 = $stime;
	  #0;
	end
    v__h7005 = v__h7011 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  (f_mem_req$D_OUT[34] || !f_mem_wdata$EMPTY_N))
	$display("%0d: %m.rl_complete_nseq_req: (addr 0x%08h) ",
		 v__h7005,
		 f_mem_req$D_OUT[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	begin
	  v__h2119 = $stime;
	  #0;
	end
    v__h2113 = v__h2119 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$display("%0d: %m.rl_read_rsp: vaddr %0h  paddr %0h",
		 v__h2113,
		 rg_req[70:39],
		 rg_req[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$write("Read_Data { ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0 &&
	  f_mem_rdata$D_OUT[32])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0 &&
	  !f_mem_rdata$D_OUT[32])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$write("'h%h", f_mem_rdata$D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[32] &&
	  (rg_req[75:74] == 2'd0 ||
	   rg_req[75:74] == 2'd2 && rg_req[6:2] == 5'b00010) &&
	  verbosity != 2'd0)
	$display("    Load or LR: f3 %0h ld_val %0h",
		 rg_req[73:71],
		 ld_val__h2344);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp &&
	  f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d121)
	$display("    AMO: f3 %0d  f7 %0h  ld_val %0h st_val %0h",
		 rg_req[73:71],
		 rg_req[6:0],
		 ld_val_bits__h2230,
		 rg_req[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp &&
	  f_mem_rdata_first__4_BIT_32_5_AND_NOT_rg_req_0_ETC___d121)
	$display("    => final_ld_val %0h final_st_val %0h",
		 ld_val_bits__h2230,
		 final_st_val__h2795);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && !f_mem_rdata$D_OUT[32] &&
	  verbosity != 2'd0)
	$display("    MEM_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_write_req && NOT_verbosity_ULT_2_26___d127)
	begin
	  v__h3305 = $stime;
	  #0;
	end
    v__h3299 = v__h3305 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_write_req && NOT_verbosity_ULT_2_26___d127)
	$display("%0d: %m.rl_write_req; f3 %0h  vaddr %0h  paddr %0h  word %0h",
		 v__h3299,
		 rg_req[73:71],
		 rg_req[70:39],
		 rg_req[70:39],
		 rg_req[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_write_req && verbosity == 2'd3)
	$display("    goto MMIO_DONE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776)
	begin
	  v__h17328 = $stime;
	  #0;
	end
    v__h17322 = v__h17328 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776)
	$display("%0d: %m.watch_tohost", v__h17322);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776 &&
	  w_dmem_req$wget[38:8] == 31'd0)
	$write("    PASS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776 &&
	  w_dmem_req$wget[38:8] != 31'd0)
	$write("    FAIL <test_%0d>", test_num__h17309);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776)
	$display("  (<tohost>  addr %08h  data %08h)",
		 w_dmem_req$wget[70:39],
		 w_dmem_req$wget[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_66_AND_w_dmem_req_wget__33_BIT_ETC___d776)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334)
	begin
	  v__h17568 = $stime;
	  #0;
	end
    v__h17562 = v__h17568 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334)
	$write("%0d: %m.rl_req: ", v__h17562);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334)
	$write("Req (op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334 &&
	  w_dmem_req$wget[75:74] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334 &&
	  w_dmem_req$wget[75:74] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334 &&
	  w_dmem_req$wget[75:74] != 2'd0 &&
	  w_dmem_req$wget[75:74] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334)
	$write(", f3 0x%0h, addr %0h, st_value 0x%0h)",
	       w_dmem_req$wget[73:71],
	       w_dmem_req$wget[70:39],
	       w_dmem_req$wget[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_33___d334) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && w_dmem_req$wget[75:74] != 2'd1 &&
	  NOT_verbosity_ULT_2_26___d127)
	$display("   dtcm_cpu_port.put (word_addr %08h)", word_addr__h17707);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  (soc_map$m_is_itcm_addr ||
	   NOT_w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b_ETC___d757) &&
	  NOT_verbosity_ULT_2_26___d127)
	$display("   bad addr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__33_ETC___d831)
	$display("      (RAM byte_en %08b) (RAM addr %08h) (RAM data %016h)",
		 byte_en__h18300,
		 w_dmem_req$wget[53:41],
		 ram_st_value__h18301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	  w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	  soc_map$m_is_dtcm_addr &&
	  NOT_verbosity_ULT_2_26___d127)
	$display("   valid DTCM addr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	  w_dmem_req_wget__33_BITS_72_TO_71_36_EQ_0b0_37_ETC___d821 &&
	  !soc_map$m_is_dtcm_addr &&
	  NOT_verbosity_ULT_2_26___d127)
	$display("   MMIO addr");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost &&
	  NOT_verbosity_EQ_0_3_4_AND_NOT_rg_watch_tohost_ETC___d945)
	begin
	  v__h20828 = $stime;
	  #0;
	end
    v__h20822 = v__h20828 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost &&
	  NOT_verbosity_EQ_0_3_4_AND_NOT_rg_watch_tohost_ETC___d945)
	$display("%0d: %m.set_watch_tohost: watch %0d, addr %08h",
		 v__h20822,
		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data && verbosity != 2'd0)
	begin
	  v__h5871 = $stime;
	  #0;
	end
    v__h5865 = v__h5871 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data && verbosity != 2'd0)
	$display("%0d: %m.rl_write_data", v__h5865);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data && verbosity != 2'd0)
	$display("    AXI4_Wr_Data{%0h strb %0h last %0d}",
		 f_mem_wdata$D_OUT,
		 strb__h5697,
		 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	begin
	  v__h7160 = $stime;
	  #0;
	end
    v__h7154 = v__h7160 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("%0d: %m.rl_read_response: ", v__h7154);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("Read_Data { ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0 &&
	  mem_master_HRESP)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0 &&
	  !mem_master_HRESP)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("'h%h", mem_master_HRDATA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	  WILL_FIRE_RL_fabric_adapter_rl_read_response)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/DTCM.bsv\", line 419, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_nmio_fabric_adapter_rl_read_data] and\n  [RL_fabric_adapter_rl_read_response] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_write_response && verbosity != 2'd0)
	begin
	  v__h7292 = $stime;
	  #0;
	end
    v__h7286 = v__h7292 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_write_response && verbosity != 2'd0)
	$display("%0d: %m.rl_write_response", v__h7286);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data &&
	  WILL_FIRE_RL_fabric_adapter_rl_write_response)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/DTCM.bsv\", line 420, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_nmio_fabric_adapter_rl_write_data] and\n  [RL_fabric_adapter_rl_write_response] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_rd_addr && verbosity != 2'd0)
	begin
	  v__h8582 = $stime;
	  #0;
	end
    v__h8576 = v__h8582 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_rd_addr && verbosity != 2'd0)
	$display("%0d: %m.rl_bad_rd_addr 0x%0h",
		 v__h8576,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	begin
	  v__h8937 = $stime;
	  #0;
	end
    v__h8931 = v__h8937 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("%0d: %m.rl_dma_rd_rsp", v__h8931);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dtcm$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", 2'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_rsp &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	begin
	  v__h9260 = $stime;
	  #0;
	end
    v__h9254 = v__h9260 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$display("%0d: %m.rl_bad_wr_addr", v__h9254);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0 &&
	  dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0 &&
	  !dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	begin
	  v__h8717 = $stime;
	  #0;
	end
    v__h8711 = v__h8717 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("%0d: %m.rl_dma_rd_req", v__h8711);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("    (ram_addr : %0h",
		 dma_port_slave_xactor_f_rd_addr$D_OUT[43:31]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req && WILL_FIRE_RL_rl_req)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/DTCM.bsv\", line 426, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_dma_rd_req] and\n  [RL_rl_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_rd_req && WILL_FIRE_RL_rl_amo_rsp)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/DTCM.bsv\", line 425, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_dma_rd_req] and\n  [RL_rl_amo_rsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	begin
	  v__h9567 = $stime;
	  #0;
	end
    v__h9561 = v__h9567 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("%0d: %m.rl_dma_wr_req", v__h9561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334 &&
	  dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334 &&
	  !dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("    (ram_addr : %0h",
		 dma_port_slave_xactor_f_wr_addr$D_OUT[43:31]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("    (ram_data : %016h",
		 dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req &&
	  NOT_verbosity_ULE_1_33___d334)
	$display("    (ram_strb : %08b",
		 dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_33___d334)
	begin
	  v__h19860 = $stime;
	  #0;
	end
    v__h19854 = v__h19860 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_33___d334)
	$display("%0d: %m.reset", v__h19854);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_33___d334)
	begin
	  v__h19985 = $stime;
	  #0;
	end
    v__h19979 = v__h19985 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_33___d334)
	$display("%0d: %m.reset", v__h19979);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req && WILL_FIRE_RL_rl_req)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/DTCM.bsv\", line 427, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_dma_wr_req] and\n  [RL_rl_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_dma_wr_req && WILL_FIRE_RL_rl_amo_rsp)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/DTCM.bsv\", line 424, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_dma_wr_req] and\n  [RL_rl_amo_rsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	begin
	  v__h12219 = $stime;
	  #0;
	end
    v__h12213 = v__h12219 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$display("%0d: ERROR: %m::AXI4_Deburster.rl_wr_xaction_master_to_slave: m -> s",
		 v__h12213);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$display("    WLAST not set on last data beat (awlen = %0d)",
		 deburstr_xactor_from_master_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", deburstr_xactor_from_master_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", deburstr_xactor_from_master_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburstr_rl_wr_xaction_master_to_slave &&
	  !deburstr_rg_w_beat_count_96_ULT_deburstr_xacto_ETC___d432 &&
	  !deburstr_xactor_from_master_f_wr_data$D_OUT[0])
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkDTCM

