//
// Generated by Bluespec Compiler, version 2021.07-10-gb37e90ec (build b37e90ec)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1
// RDY_server_reset_response_get  O     1 reg
// imem_valid                     O     1
// imem_is_i32_not_i16            O     1 const
// imem_pc                        O    32 reg
// imem_instr                     O    32
// imem_exc                       O     1
// imem_exc_code                  O     4 reg
// imem_tval                      O    32 reg
// imem_dma_server_awready        O     1 reg
// imem_dma_server_wready         O     1 reg
// imem_dma_server_bvalid         O     1 reg
// imem_dma_server_bid            O     4 reg
// imem_dma_server_bresp          O     2 reg
// imem_dma_server_arready        O     1 reg
// imem_dma_server_rvalid         O     1 reg
// imem_dma_server_rid            O     4 reg
// imem_dma_server_rdata          O    32 reg
// imem_dma_server_rresp          O     2 reg
// imem_dma_server_rlast          O     1 reg
// dmem_valid                     O     1
// dmem_word32                    O    32
// dmem_st_amo_val                O    32 const
// dmem_exc                       O     1
// dmem_exc_code                  O     4
// nmio_master_awvalid            O     1 reg
// nmio_master_awid               O     4 reg
// nmio_master_awaddr             O    32 reg
// nmio_master_awlen              O     8 reg
// nmio_master_awsize             O     3 reg
// nmio_master_awburst            O     2 reg
// nmio_master_awlock             O     1 reg
// nmio_master_awcache            O     4 reg
// nmio_master_awprot             O     3 reg
// nmio_master_awqos              O     4 reg
// nmio_master_awregion           O     4 reg
// nmio_master_wvalid             O     1 reg
// nmio_master_wdata              O    32 reg
// nmio_master_wstrb              O     4 reg
// nmio_master_wlast              O     1 reg
// nmio_master_bready             O     1 reg
// nmio_master_arvalid            O     1 reg
// nmio_master_arid               O     4 reg
// nmio_master_araddr             O    32 reg
// nmio_master_arlen              O     8 reg
// nmio_master_arsize             O     3 reg
// nmio_master_arburst            O     2 reg
// nmio_master_arlock             O     1 reg
// nmio_master_arcache            O     4 reg
// nmio_master_arprot             O     3 reg
// nmio_master_arqos              O     4 reg
// nmio_master_arregion           O     4 reg
// nmio_master_rready             O     1 reg
// dmem_master_HADDR              O    32 reg
// dmem_master_HBURST             O     3 const
// dmem_master_HMASTLOCK          O     1 const
// dmem_master_HPROT              O     4 const
// dmem_master_HSIZE              O     3 reg
// dmem_master_HTRANS             O     2 reg
// dmem_master_HWDATA             O    32 reg
// dmem_master_HWRITE             O     1 reg
// dmem_dma_server_awready        O     1 reg
// dmem_dma_server_wready         O     1 reg
// dmem_dma_server_bvalid         O     1 reg
// dmem_dma_server_bid            O     4 reg
// dmem_dma_server_bresp          O     2 reg
// dmem_dma_server_arready        O     1 reg
// dmem_dma_server_rvalid         O     1 reg
// dmem_dma_server_rid            O     4 reg
// dmem_dma_server_rdata          O    32 reg
// dmem_dma_server_rresp          O     2 reg
// dmem_dma_server_rlast          O     1 reg
// RDY_server_fence_i_request_put  O     1 const
// RDY_server_fence_i_response_get  O     1 const
// RDY_server_fence_request_put   O     1 reg
// RDY_server_fence_response_get  O     1 reg
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64
// RDY_mv_tohost_value            O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_req_f3                    I     3
// imem_req_addr                  I    32
// imem_dma_server_awvalid        I     1
// imem_dma_server_awid           I     4 reg
// imem_dma_server_awaddr         I    32 reg
// imem_dma_server_awlen          I     8 reg
// imem_dma_server_awsize         I     3 reg
// imem_dma_server_awburst        I     2 reg
// imem_dma_server_awlock         I     1 reg
// imem_dma_server_awcache        I     4 reg
// imem_dma_server_awprot         I     3 reg
// imem_dma_server_awqos          I     4 reg
// imem_dma_server_awregion       I     4 reg
// imem_dma_server_wvalid         I     1
// imem_dma_server_wdata          I    32 reg
// imem_dma_server_wstrb          I     4 reg
// imem_dma_server_wlast          I     1 reg
// imem_dma_server_bready         I     1
// imem_dma_server_arvalid        I     1
// imem_dma_server_arid           I     4 reg
// imem_dma_server_araddr         I    32 reg
// imem_dma_server_arlen          I     8 reg
// imem_dma_server_arsize         I     3 reg
// imem_dma_server_arburst        I     2 reg
// imem_dma_server_arlock         I     1 reg
// imem_dma_server_arcache        I     4 reg
// imem_dma_server_arprot         I     3 reg
// imem_dma_server_arqos          I     4 reg
// imem_dma_server_arregion       I     4 reg
// imem_dma_server_rready         I     1
// dmem_req_op                    I     2
// dmem_req_f3                    I     3
// dmem_req_amo_funct7            I     7
// dmem_req_addr                  I    32
// dmem_req_store_value           I    32
// nmio_master_awready            I     1
// nmio_master_wready             I     1
// nmio_master_bvalid             I     1
// nmio_master_bid                I     4 reg
// nmio_master_bresp              I     2 reg
// nmio_master_arready            I     1
// nmio_master_rvalid             I     1
// nmio_master_rid                I     4 reg
// nmio_master_rdata              I    32 reg
// nmio_master_rresp              I     2 reg
// nmio_master_rlast              I     1 reg
// dmem_master_HRDATA             I    32
// dmem_master_HREADY             I     1
// dmem_master_HRESP              I     1
// dmem_dma_server_awvalid        I     1
// dmem_dma_server_awid           I     4 reg
// dmem_dma_server_awaddr         I    32 reg
// dmem_dma_server_awlen          I     8 reg
// dmem_dma_server_awsize         I     3 reg
// dmem_dma_server_awburst        I     2 reg
// dmem_dma_server_awlock         I     1 reg
// dmem_dma_server_awcache        I     4 reg
// dmem_dma_server_awprot         I     3 reg
// dmem_dma_server_awqos          I     4 reg
// dmem_dma_server_awregion       I     4 reg
// dmem_dma_server_wvalid         I     1
// dmem_dma_server_wdata          I    32 reg
// dmem_dma_server_wstrb          I     4 reg
// dmem_dma_server_wlast          I     1 reg
// dmem_dma_server_bready         I     1
// dmem_dma_server_arvalid        I     1
// dmem_dma_server_arid           I     4 reg
// dmem_dma_server_araddr         I    32 reg
// dmem_dma_server_arlen          I     8 reg
// dmem_dma_server_arsize         I     3 reg
// dmem_dma_server_arburst        I     2 reg
// dmem_dma_server_arlock         I     1 reg
// dmem_dma_server_arcache        I     4 reg
// dmem_dma_server_arprot         I     3 reg
// dmem_dma_server_arqos          I     4 reg
// dmem_dma_server_arregion       I     4 reg
// dmem_dma_server_rready         I     1
// server_fence_request_put       I     8 unused
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_imem_req                    I     1
// EN_dmem_req                    I     1
// EN_server_fence_i_request_put  I     1 unused
// EN_server_fence_i_response_get  I     1 unused
// EN_server_fence_request_put    I     1
// EN_server_fence_response_get   I     1
// EN_set_watch_tohost            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem(CLK,
		  RST_N,

		  EN_server_reset_request_put,
		  RDY_server_reset_request_put,

		  EN_server_reset_response_get,
		  RDY_server_reset_response_get,

		  imem_req_f3,
		  imem_req_addr,
		  EN_imem_req,

		  imem_valid,

		  imem_is_i32_not_i16,

		  imem_pc,

		  imem_instr,

		  imem_exc,

		  imem_exc_code,

		  imem_tval,

		  imem_dma_server_awvalid,
		  imem_dma_server_awid,
		  imem_dma_server_awaddr,
		  imem_dma_server_awlen,
		  imem_dma_server_awsize,
		  imem_dma_server_awburst,
		  imem_dma_server_awlock,
		  imem_dma_server_awcache,
		  imem_dma_server_awprot,
		  imem_dma_server_awqos,
		  imem_dma_server_awregion,

		  imem_dma_server_awready,

		  imem_dma_server_wvalid,
		  imem_dma_server_wdata,
		  imem_dma_server_wstrb,
		  imem_dma_server_wlast,

		  imem_dma_server_wready,

		  imem_dma_server_bvalid,

		  imem_dma_server_bid,

		  imem_dma_server_bresp,

		  imem_dma_server_bready,

		  imem_dma_server_arvalid,
		  imem_dma_server_arid,
		  imem_dma_server_araddr,
		  imem_dma_server_arlen,
		  imem_dma_server_arsize,
		  imem_dma_server_arburst,
		  imem_dma_server_arlock,
		  imem_dma_server_arcache,
		  imem_dma_server_arprot,
		  imem_dma_server_arqos,
		  imem_dma_server_arregion,

		  imem_dma_server_arready,

		  imem_dma_server_rvalid,

		  imem_dma_server_rid,

		  imem_dma_server_rdata,

		  imem_dma_server_rresp,

		  imem_dma_server_rlast,

		  imem_dma_server_rready,

		  dmem_req_op,
		  dmem_req_f3,
		  dmem_req_amo_funct7,
		  dmem_req_addr,
		  dmem_req_store_value,
		  EN_dmem_req,

		  dmem_valid,

		  dmem_word32,

		  dmem_st_amo_val,

		  dmem_exc,

		  dmem_exc_code,

		  nmio_master_awvalid,

		  nmio_master_awid,

		  nmio_master_awaddr,

		  nmio_master_awlen,

		  nmio_master_awsize,

		  nmio_master_awburst,

		  nmio_master_awlock,

		  nmio_master_awcache,

		  nmio_master_awprot,

		  nmio_master_awqos,

		  nmio_master_awregion,

		  nmio_master_awready,

		  nmio_master_wvalid,

		  nmio_master_wdata,

		  nmio_master_wstrb,

		  nmio_master_wlast,

		  nmio_master_wready,

		  nmio_master_bvalid,
		  nmio_master_bid,
		  nmio_master_bresp,

		  nmio_master_bready,

		  nmio_master_arvalid,

		  nmio_master_arid,

		  nmio_master_araddr,

		  nmio_master_arlen,

		  nmio_master_arsize,

		  nmio_master_arburst,

		  nmio_master_arlock,

		  nmio_master_arcache,

		  nmio_master_arprot,

		  nmio_master_arqos,

		  nmio_master_arregion,

		  nmio_master_arready,

		  nmio_master_rvalid,
		  nmio_master_rid,
		  nmio_master_rdata,
		  nmio_master_rresp,
		  nmio_master_rlast,

		  nmio_master_rready,

		  dmem_master_HADDR,

		  dmem_master_HBURST,

		  dmem_master_HMASTLOCK,

		  dmem_master_HPROT,

		  dmem_master_HSIZE,

		  dmem_master_HTRANS,

		  dmem_master_HWDATA,

		  dmem_master_HWRITE,

		  dmem_master_HRDATA,

		  dmem_master_HREADY,

		  dmem_master_HRESP,

		  dmem_dma_server_awvalid,
		  dmem_dma_server_awid,
		  dmem_dma_server_awaddr,
		  dmem_dma_server_awlen,
		  dmem_dma_server_awsize,
		  dmem_dma_server_awburst,
		  dmem_dma_server_awlock,
		  dmem_dma_server_awcache,
		  dmem_dma_server_awprot,
		  dmem_dma_server_awqos,
		  dmem_dma_server_awregion,

		  dmem_dma_server_awready,

		  dmem_dma_server_wvalid,
		  dmem_dma_server_wdata,
		  dmem_dma_server_wstrb,
		  dmem_dma_server_wlast,

		  dmem_dma_server_wready,

		  dmem_dma_server_bvalid,

		  dmem_dma_server_bid,

		  dmem_dma_server_bresp,

		  dmem_dma_server_bready,

		  dmem_dma_server_arvalid,
		  dmem_dma_server_arid,
		  dmem_dma_server_araddr,
		  dmem_dma_server_arlen,
		  dmem_dma_server_arsize,
		  dmem_dma_server_arburst,
		  dmem_dma_server_arlock,
		  dmem_dma_server_arcache,
		  dmem_dma_server_arprot,
		  dmem_dma_server_arqos,
		  dmem_dma_server_arregion,

		  dmem_dma_server_arready,

		  dmem_dma_server_rvalid,

		  dmem_dma_server_rid,

		  dmem_dma_server_rdata,

		  dmem_dma_server_rresp,

		  dmem_dma_server_rlast,

		  dmem_dma_server_rready,

		  EN_server_fence_i_request_put,
		  RDY_server_fence_i_request_put,

		  EN_server_fence_i_response_get,
		  RDY_server_fence_i_response_get,

		  server_fence_request_put,
		  EN_server_fence_request_put,
		  RDY_server_fence_request_put,

		  EN_server_fence_response_get,
		  RDY_server_fence_response_get,

		  set_watch_tohost_watch_tohost,
		  set_watch_tohost_tohost_addr,
		  EN_set_watch_tohost,
		  RDY_set_watch_tohost,

		  mv_tohost_value,
		  RDY_mv_tohost_value);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method imem_req
  input  [2 : 0] imem_req_f3;
  input  [31 : 0] imem_req_addr;
  input  EN_imem_req;

  // value method imem_valid
  output imem_valid;

  // value method imem_is_i32_not_i16
  output imem_is_i32_not_i16;

  // value method imem_pc
  output [31 : 0] imem_pc;

  // value method imem_instr
  output [31 : 0] imem_instr;

  // value method imem_exc
  output imem_exc;

  // value method imem_exc_code
  output [3 : 0] imem_exc_code;

  // value method imem_tval
  output [31 : 0] imem_tval;

  // action method imem_dma_server_m_awvalid
  input  imem_dma_server_awvalid;
  input  [3 : 0] imem_dma_server_awid;
  input  [31 : 0] imem_dma_server_awaddr;
  input  [7 : 0] imem_dma_server_awlen;
  input  [2 : 0] imem_dma_server_awsize;
  input  [1 : 0] imem_dma_server_awburst;
  input  imem_dma_server_awlock;
  input  [3 : 0] imem_dma_server_awcache;
  input  [2 : 0] imem_dma_server_awprot;
  input  [3 : 0] imem_dma_server_awqos;
  input  [3 : 0] imem_dma_server_awregion;

  // value method imem_dma_server_m_awready
  output imem_dma_server_awready;

  // action method imem_dma_server_m_wvalid
  input  imem_dma_server_wvalid;
  input  [31 : 0] imem_dma_server_wdata;
  input  [3 : 0] imem_dma_server_wstrb;
  input  imem_dma_server_wlast;

  // value method imem_dma_server_m_wready
  output imem_dma_server_wready;

  // value method imem_dma_server_m_bvalid
  output imem_dma_server_bvalid;

  // value method imem_dma_server_m_bid
  output [3 : 0] imem_dma_server_bid;

  // value method imem_dma_server_m_bresp
  output [1 : 0] imem_dma_server_bresp;

  // value method imem_dma_server_m_buser

  // action method imem_dma_server_m_bready
  input  imem_dma_server_bready;

  // action method imem_dma_server_m_arvalid
  input  imem_dma_server_arvalid;
  input  [3 : 0] imem_dma_server_arid;
  input  [31 : 0] imem_dma_server_araddr;
  input  [7 : 0] imem_dma_server_arlen;
  input  [2 : 0] imem_dma_server_arsize;
  input  [1 : 0] imem_dma_server_arburst;
  input  imem_dma_server_arlock;
  input  [3 : 0] imem_dma_server_arcache;
  input  [2 : 0] imem_dma_server_arprot;
  input  [3 : 0] imem_dma_server_arqos;
  input  [3 : 0] imem_dma_server_arregion;

  // value method imem_dma_server_m_arready
  output imem_dma_server_arready;

  // value method imem_dma_server_m_rvalid
  output imem_dma_server_rvalid;

  // value method imem_dma_server_m_rid
  output [3 : 0] imem_dma_server_rid;

  // value method imem_dma_server_m_rdata
  output [31 : 0] imem_dma_server_rdata;

  // value method imem_dma_server_m_rresp
  output [1 : 0] imem_dma_server_rresp;

  // value method imem_dma_server_m_rlast
  output imem_dma_server_rlast;

  // value method imem_dma_server_m_ruser

  // action method imem_dma_server_m_rready
  input  imem_dma_server_rready;

  // action method dmem_req
  input  [1 : 0] dmem_req_op;
  input  [2 : 0] dmem_req_f3;
  input  [6 : 0] dmem_req_amo_funct7;
  input  [31 : 0] dmem_req_addr;
  input  [31 : 0] dmem_req_store_value;
  input  EN_dmem_req;

  // value method dmem_valid
  output dmem_valid;

  // value method dmem_word32
  output [31 : 0] dmem_word32;

  // value method dmem_st_amo_val
  output [31 : 0] dmem_st_amo_val;

  // value method dmem_exc
  output dmem_exc;

  // value method dmem_exc_code
  output [3 : 0] dmem_exc_code;

  // value method nmio_master_m_awvalid
  output nmio_master_awvalid;

  // value method nmio_master_m_awid
  output [3 : 0] nmio_master_awid;

  // value method nmio_master_m_awaddr
  output [31 : 0] nmio_master_awaddr;

  // value method nmio_master_m_awlen
  output [7 : 0] nmio_master_awlen;

  // value method nmio_master_m_awsize
  output [2 : 0] nmio_master_awsize;

  // value method nmio_master_m_awburst
  output [1 : 0] nmio_master_awburst;

  // value method nmio_master_m_awlock
  output nmio_master_awlock;

  // value method nmio_master_m_awcache
  output [3 : 0] nmio_master_awcache;

  // value method nmio_master_m_awprot
  output [2 : 0] nmio_master_awprot;

  // value method nmio_master_m_awqos
  output [3 : 0] nmio_master_awqos;

  // value method nmio_master_m_awregion
  output [3 : 0] nmio_master_awregion;

  // value method nmio_master_m_awuser

  // action method nmio_master_m_awready
  input  nmio_master_awready;

  // value method nmio_master_m_wvalid
  output nmio_master_wvalid;

  // value method nmio_master_m_wdata
  output [31 : 0] nmio_master_wdata;

  // value method nmio_master_m_wstrb
  output [3 : 0] nmio_master_wstrb;

  // value method nmio_master_m_wlast
  output nmio_master_wlast;

  // value method nmio_master_m_wuser

  // action method nmio_master_m_wready
  input  nmio_master_wready;

  // action method nmio_master_m_bvalid
  input  nmio_master_bvalid;
  input  [3 : 0] nmio_master_bid;
  input  [1 : 0] nmio_master_bresp;

  // value method nmio_master_m_bready
  output nmio_master_bready;

  // value method nmio_master_m_arvalid
  output nmio_master_arvalid;

  // value method nmio_master_m_arid
  output [3 : 0] nmio_master_arid;

  // value method nmio_master_m_araddr
  output [31 : 0] nmio_master_araddr;

  // value method nmio_master_m_arlen
  output [7 : 0] nmio_master_arlen;

  // value method nmio_master_m_arsize
  output [2 : 0] nmio_master_arsize;

  // value method nmio_master_m_arburst
  output [1 : 0] nmio_master_arburst;

  // value method nmio_master_m_arlock
  output nmio_master_arlock;

  // value method nmio_master_m_arcache
  output [3 : 0] nmio_master_arcache;

  // value method nmio_master_m_arprot
  output [2 : 0] nmio_master_arprot;

  // value method nmio_master_m_arqos
  output [3 : 0] nmio_master_arqos;

  // value method nmio_master_m_arregion
  output [3 : 0] nmio_master_arregion;

  // value method nmio_master_m_aruser

  // action method nmio_master_m_arready
  input  nmio_master_arready;

  // action method nmio_master_m_rvalid
  input  nmio_master_rvalid;
  input  [3 : 0] nmio_master_rid;
  input  [31 : 0] nmio_master_rdata;
  input  [1 : 0] nmio_master_rresp;
  input  nmio_master_rlast;

  // value method nmio_master_m_rready
  output nmio_master_rready;

  // value method dmem_master_haddr
  output [31 : 0] dmem_master_HADDR;

  // value method dmem_master_hburst
  output [2 : 0] dmem_master_HBURST;

  // value method dmem_master_hmastlock
  output dmem_master_HMASTLOCK;

  // value method dmem_master_hprot
  output [3 : 0] dmem_master_HPROT;

  // value method dmem_master_hsize
  output [2 : 0] dmem_master_HSIZE;

  // value method dmem_master_htrans
  output [1 : 0] dmem_master_HTRANS;

  // value method dmem_master_hwdata
  output [31 : 0] dmem_master_HWDATA;

  // value method dmem_master_hwrite
  output dmem_master_HWRITE;

  // action method dmem_master_hrdata
  input  [31 : 0] dmem_master_HRDATA;

  // action method dmem_master_hready
  input  dmem_master_HREADY;

  // action method dmem_master_hresp
  input  dmem_master_HRESP;

  // action method dmem_dma_server_m_awvalid
  input  dmem_dma_server_awvalid;
  input  [3 : 0] dmem_dma_server_awid;
  input  [31 : 0] dmem_dma_server_awaddr;
  input  [7 : 0] dmem_dma_server_awlen;
  input  [2 : 0] dmem_dma_server_awsize;
  input  [1 : 0] dmem_dma_server_awburst;
  input  dmem_dma_server_awlock;
  input  [3 : 0] dmem_dma_server_awcache;
  input  [2 : 0] dmem_dma_server_awprot;
  input  [3 : 0] dmem_dma_server_awqos;
  input  [3 : 0] dmem_dma_server_awregion;

  // value method dmem_dma_server_m_awready
  output dmem_dma_server_awready;

  // action method dmem_dma_server_m_wvalid
  input  dmem_dma_server_wvalid;
  input  [31 : 0] dmem_dma_server_wdata;
  input  [3 : 0] dmem_dma_server_wstrb;
  input  dmem_dma_server_wlast;

  // value method dmem_dma_server_m_wready
  output dmem_dma_server_wready;

  // value method dmem_dma_server_m_bvalid
  output dmem_dma_server_bvalid;

  // value method dmem_dma_server_m_bid
  output [3 : 0] dmem_dma_server_bid;

  // value method dmem_dma_server_m_bresp
  output [1 : 0] dmem_dma_server_bresp;

  // value method dmem_dma_server_m_buser

  // action method dmem_dma_server_m_bready
  input  dmem_dma_server_bready;

  // action method dmem_dma_server_m_arvalid
  input  dmem_dma_server_arvalid;
  input  [3 : 0] dmem_dma_server_arid;
  input  [31 : 0] dmem_dma_server_araddr;
  input  [7 : 0] dmem_dma_server_arlen;
  input  [2 : 0] dmem_dma_server_arsize;
  input  [1 : 0] dmem_dma_server_arburst;
  input  dmem_dma_server_arlock;
  input  [3 : 0] dmem_dma_server_arcache;
  input  [2 : 0] dmem_dma_server_arprot;
  input  [3 : 0] dmem_dma_server_arqos;
  input  [3 : 0] dmem_dma_server_arregion;

  // value method dmem_dma_server_m_arready
  output dmem_dma_server_arready;

  // value method dmem_dma_server_m_rvalid
  output dmem_dma_server_rvalid;

  // value method dmem_dma_server_m_rid
  output [3 : 0] dmem_dma_server_rid;

  // value method dmem_dma_server_m_rdata
  output [31 : 0] dmem_dma_server_rdata;

  // value method dmem_dma_server_m_rresp
  output [1 : 0] dmem_dma_server_rresp;

  // value method dmem_dma_server_m_rlast
  output dmem_dma_server_rlast;

  // value method dmem_dma_server_m_ruser

  // action method dmem_dma_server_m_rready
  input  dmem_dma_server_rready;

  // action method server_fence_i_request_put
  input  EN_server_fence_i_request_put;
  output RDY_server_fence_i_request_put;

  // action method server_fence_i_response_get
  input  EN_server_fence_i_response_get;
  output RDY_server_fence_i_response_get;

  // action method server_fence_request_put
  input  [7 : 0] server_fence_request_put;
  input  EN_server_fence_request_put;
  output RDY_server_fence_request_put;

  // action method server_fence_response_get
  input  EN_server_fence_response_get;
  output RDY_server_fence_response_get;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [63 : 0] mv_tohost_value;
  wire [31 : 0] dmem_dma_server_rdata,
		dmem_master_HADDR,
		dmem_master_HWDATA,
		dmem_st_amo_val,
		dmem_word32,
		imem_dma_server_rdata,
		imem_instr,
		imem_pc,
		imem_tval,
		nmio_master_araddr,
		nmio_master_awaddr,
		nmio_master_wdata;
  wire [7 : 0] nmio_master_arlen, nmio_master_awlen;
  wire [3 : 0] dmem_dma_server_bid,
	       dmem_dma_server_rid,
	       dmem_exc_code,
	       dmem_master_HPROT,
	       imem_dma_server_bid,
	       imem_dma_server_rid,
	       imem_exc_code,
	       nmio_master_arcache,
	       nmio_master_arid,
	       nmio_master_arqos,
	       nmio_master_arregion,
	       nmio_master_awcache,
	       nmio_master_awid,
	       nmio_master_awqos,
	       nmio_master_awregion,
	       nmio_master_wstrb;
  wire [2 : 0] dmem_master_HBURST,
	       dmem_master_HSIZE,
	       nmio_master_arprot,
	       nmio_master_arsize,
	       nmio_master_awprot,
	       nmio_master_awsize;
  wire [1 : 0] dmem_dma_server_bresp,
	       dmem_dma_server_rresp,
	       dmem_master_HTRANS,
	       imem_dma_server_bresp,
	       imem_dma_server_rresp,
	       nmio_master_arburst,
	       nmio_master_awburst;
  wire RDY_mv_tohost_value,
       RDY_server_fence_i_request_put,
       RDY_server_fence_i_response_get,
       RDY_server_fence_request_put,
       RDY_server_fence_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_watch_tohost,
       dmem_dma_server_arready,
       dmem_dma_server_awready,
       dmem_dma_server_bvalid,
       dmem_dma_server_rlast,
       dmem_dma_server_rvalid,
       dmem_dma_server_wready,
       dmem_exc,
       dmem_master_HMASTLOCK,
       dmem_master_HWRITE,
       dmem_valid,
       imem_dma_server_arready,
       imem_dma_server_awready,
       imem_dma_server_bvalid,
       imem_dma_server_rlast,
       imem_dma_server_rvalid,
       imem_dma_server_wready,
       imem_exc,
       imem_is_i32_not_i16,
       imem_valid,
       nmio_master_arlock,
       nmio_master_arvalid,
       nmio_master_awlock,
       nmio_master_awvalid,
       nmio_master_bready,
       nmio_master_rready,
       nmio_master_wlast,
       nmio_master_wvalid;

  // ports of submodule dtcm
  wire [63 : 0] dtcm$mv_tohost_value, dtcm$set_watch_tohost_tohost_addr;
  wire [31 : 0] dtcm$dma_server_araddr,
		dtcm$dma_server_awaddr,
		dtcm$dma_server_rdata,
		dtcm$dma_server_wdata,
		dtcm$dmem_req_addr,
		dtcm$dmem_req_store_value,
		dtcm$dmem_st_amo_val,
		dtcm$dmem_word32,
		dtcm$mem_master_HADDR,
		dtcm$mem_master_HRDATA,
		dtcm$mem_master_HWDATA,
		dtcm$nmio_master_araddr,
		dtcm$nmio_master_awaddr,
		dtcm$nmio_master_rdata,
		dtcm$nmio_master_wdata;
  wire [7 : 0] dtcm$dma_server_arlen,
	       dtcm$dma_server_awlen,
	       dtcm$nmio_master_arlen,
	       dtcm$nmio_master_awlen;
  wire [6 : 0] dtcm$dmem_req_amo_funct7;
  wire [3 : 0] dtcm$dma_server_arcache,
	       dtcm$dma_server_arid,
	       dtcm$dma_server_arqos,
	       dtcm$dma_server_arregion,
	       dtcm$dma_server_awcache,
	       dtcm$dma_server_awid,
	       dtcm$dma_server_awqos,
	       dtcm$dma_server_awregion,
	       dtcm$dma_server_bid,
	       dtcm$dma_server_rid,
	       dtcm$dma_server_wstrb,
	       dtcm$dmem_exc_code,
	       dtcm$mem_master_HPROT,
	       dtcm$nmio_master_arcache,
	       dtcm$nmio_master_arid,
	       dtcm$nmio_master_arqos,
	       dtcm$nmio_master_arregion,
	       dtcm$nmio_master_awcache,
	       dtcm$nmio_master_awid,
	       dtcm$nmio_master_awqos,
	       dtcm$nmio_master_awregion,
	       dtcm$nmio_master_bid,
	       dtcm$nmio_master_rid,
	       dtcm$nmio_master_wstrb;
  wire [2 : 0] dtcm$dma_server_arprot,
	       dtcm$dma_server_arsize,
	       dtcm$dma_server_awprot,
	       dtcm$dma_server_awsize,
	       dtcm$dmem_req_f3,
	       dtcm$mem_master_HBURST,
	       dtcm$mem_master_HSIZE,
	       dtcm$nmio_master_arprot,
	       dtcm$nmio_master_arsize,
	       dtcm$nmio_master_awprot,
	       dtcm$nmio_master_awsize;
  wire [1 : 0] dtcm$dma_server_arburst,
	       dtcm$dma_server_awburst,
	       dtcm$dma_server_bresp,
	       dtcm$dma_server_rresp,
	       dtcm$dmem_req_op,
	       dtcm$mem_master_HTRANS,
	       dtcm$nmio_master_arburst,
	       dtcm$nmio_master_awburst,
	       dtcm$nmio_master_bresp,
	       dtcm$nmio_master_rresp;
  wire dtcm$EN_dmem_req,
       dtcm$EN_reset,
       dtcm$EN_set_watch_tohost,
       dtcm$RDY_reset,
       dtcm$dma_server_arlock,
       dtcm$dma_server_arready,
       dtcm$dma_server_arvalid,
       dtcm$dma_server_awlock,
       dtcm$dma_server_awready,
       dtcm$dma_server_awvalid,
       dtcm$dma_server_bready,
       dtcm$dma_server_bvalid,
       dtcm$dma_server_rlast,
       dtcm$dma_server_rready,
       dtcm$dma_server_rvalid,
       dtcm$dma_server_wlast,
       dtcm$dma_server_wready,
       dtcm$dma_server_wvalid,
       dtcm$dmem_exc,
       dtcm$dmem_valid,
       dtcm$mem_master_HMASTLOCK,
       dtcm$mem_master_HREADY,
       dtcm$mem_master_HRESP,
       dtcm$mem_master_HWRITE,
       dtcm$nmio_master_arlock,
       dtcm$nmio_master_arready,
       dtcm$nmio_master_arvalid,
       dtcm$nmio_master_awlock,
       dtcm$nmio_master_awready,
       dtcm$nmio_master_awvalid,
       dtcm$nmio_master_bready,
       dtcm$nmio_master_bvalid,
       dtcm$nmio_master_rlast,
       dtcm$nmio_master_rready,
       dtcm$nmio_master_rvalid,
       dtcm$nmio_master_wlast,
       dtcm$nmio_master_wready,
       dtcm$nmio_master_wvalid,
       dtcm$set_watch_tohost_watch_tohost;

  // ports of submodule f_fence_req_rsp
  wire f_fence_req_rsp$CLR,
       f_fence_req_rsp$DEQ,
       f_fence_req_rsp$EMPTY_N,
       f_fence_req_rsp$ENQ,
       f_fence_req_rsp$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule itcm
  wire [31 : 0] itcm$dma_server_araddr,
		itcm$dma_server_awaddr,
		itcm$dma_server_rdata,
		itcm$dma_server_wdata,
		itcm$imem_instr,
		itcm$imem_pc,
		itcm$imem_req_addr,
		itcm$imem_tval;
  wire [7 : 0] itcm$dma_server_arlen, itcm$dma_server_awlen;
  wire [3 : 0] itcm$dma_server_arcache,
	       itcm$dma_server_arid,
	       itcm$dma_server_arqos,
	       itcm$dma_server_arregion,
	       itcm$dma_server_awcache,
	       itcm$dma_server_awid,
	       itcm$dma_server_awqos,
	       itcm$dma_server_awregion,
	       itcm$dma_server_bid,
	       itcm$dma_server_rid,
	       itcm$dma_server_wstrb,
	       itcm$imem_exc_code;
  wire [2 : 0] itcm$dma_server_arprot,
	       itcm$dma_server_arsize,
	       itcm$dma_server_awprot,
	       itcm$dma_server_awsize,
	       itcm$imem_req_f3;
  wire [1 : 0] itcm$dma_server_arburst,
	       itcm$dma_server_awburst,
	       itcm$dma_server_bresp,
	       itcm$dma_server_rresp;
  wire itcm$EN_imem_req,
       itcm$EN_reset,
       itcm$RDY_reset,
       itcm$dma_server_arlock,
       itcm$dma_server_arready,
       itcm$dma_server_arvalid,
       itcm$dma_server_awlock,
       itcm$dma_server_awready,
       itcm$dma_server_awvalid,
       itcm$dma_server_bready,
       itcm$dma_server_bvalid,
       itcm$dma_server_rlast,
       itcm$dma_server_rready,
       itcm$dma_server_rvalid,
       itcm$dma_server_wlast,
       itcm$dma_server_wready,
       itcm$dma_server_wvalid,
       itcm$imem_exc,
       itcm$imem_is_i32_not_i16,
       itcm$imem_valid;

  // rule scheduling signals
  wire CAN_FIRE_dmem_dma_server_m_arvalid,
       CAN_FIRE_dmem_dma_server_m_awvalid,
       CAN_FIRE_dmem_dma_server_m_bready,
       CAN_FIRE_dmem_dma_server_m_rready,
       CAN_FIRE_dmem_dma_server_m_wvalid,
       CAN_FIRE_dmem_master_hrdata,
       CAN_FIRE_dmem_master_hready,
       CAN_FIRE_dmem_master_hresp,
       CAN_FIRE_dmem_req,
       CAN_FIRE_imem_dma_server_m_arvalid,
       CAN_FIRE_imem_dma_server_m_awvalid,
       CAN_FIRE_imem_dma_server_m_bready,
       CAN_FIRE_imem_dma_server_m_rready,
       CAN_FIRE_imem_dma_server_m_wvalid,
       CAN_FIRE_imem_req,
       CAN_FIRE_nmio_master_m_arready,
       CAN_FIRE_nmio_master_m_awready,
       CAN_FIRE_nmio_master_m_bvalid,
       CAN_FIRE_nmio_master_m_rvalid,
       CAN_FIRE_nmio_master_m_wready,
       CAN_FIRE_server_fence_i_request_put,
       CAN_FIRE_server_fence_i_response_get,
       CAN_FIRE_server_fence_request_put,
       CAN_FIRE_server_fence_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_dmem_dma_server_m_arvalid,
       WILL_FIRE_dmem_dma_server_m_awvalid,
       WILL_FIRE_dmem_dma_server_m_bready,
       WILL_FIRE_dmem_dma_server_m_rready,
       WILL_FIRE_dmem_dma_server_m_wvalid,
       WILL_FIRE_dmem_master_hrdata,
       WILL_FIRE_dmem_master_hready,
       WILL_FIRE_dmem_master_hresp,
       WILL_FIRE_dmem_req,
       WILL_FIRE_imem_dma_server_m_arvalid,
       WILL_FIRE_imem_dma_server_m_awvalid,
       WILL_FIRE_imem_dma_server_m_bready,
       WILL_FIRE_imem_dma_server_m_rready,
       WILL_FIRE_imem_dma_server_m_wvalid,
       WILL_FIRE_imem_req,
       WILL_FIRE_nmio_master_m_arready,
       WILL_FIRE_nmio_master_m_awready,
       WILL_FIRE_nmio_master_m_bvalid,
       WILL_FIRE_nmio_master_m_rvalid,
       WILL_FIRE_nmio_master_m_wready,
       WILL_FIRE_server_fence_i_request_put,
       WILL_FIRE_server_fence_i_response_get,
       WILL_FIRE_server_fence_request_put,
       WILL_FIRE_server_fence_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_watch_tohost;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put =
	     itcm$RDY_reset && dtcm$RDY_reset && f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put =
	     itcm$RDY_reset && dtcm$RDY_reset && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method imem_req
  assign CAN_FIRE_imem_req = 1'd1 ;
  assign WILL_FIRE_imem_req = EN_imem_req ;

  // value method imem_valid
  assign imem_valid = itcm$imem_valid ;

  // value method imem_is_i32_not_i16
  assign imem_is_i32_not_i16 = itcm$imem_is_i32_not_i16 ;

  // value method imem_pc
  assign imem_pc = itcm$imem_pc ;

  // value method imem_instr
  assign imem_instr = itcm$imem_instr ;

  // value method imem_exc
  assign imem_exc = itcm$imem_exc ;

  // value method imem_exc_code
  assign imem_exc_code = itcm$imem_exc_code ;

  // value method imem_tval
  assign imem_tval = itcm$imem_tval ;

  // action method imem_dma_server_m_awvalid
  assign CAN_FIRE_imem_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_awvalid = 1'd1 ;

  // value method imem_dma_server_m_awready
  assign imem_dma_server_awready = itcm$dma_server_awready ;

  // action method imem_dma_server_m_wvalid
  assign CAN_FIRE_imem_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_wvalid = 1'd1 ;

  // value method imem_dma_server_m_wready
  assign imem_dma_server_wready = itcm$dma_server_wready ;

  // value method imem_dma_server_m_bvalid
  assign imem_dma_server_bvalid = itcm$dma_server_bvalid ;

  // value method imem_dma_server_m_bid
  assign imem_dma_server_bid = itcm$dma_server_bid ;

  // value method imem_dma_server_m_bresp
  assign imem_dma_server_bresp = itcm$dma_server_bresp ;

  // action method imem_dma_server_m_bready
  assign CAN_FIRE_imem_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_bready = 1'd1 ;

  // action method imem_dma_server_m_arvalid
  assign CAN_FIRE_imem_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_arvalid = 1'd1 ;

  // value method imem_dma_server_m_arready
  assign imem_dma_server_arready = itcm$dma_server_arready ;

  // value method imem_dma_server_m_rvalid
  assign imem_dma_server_rvalid = itcm$dma_server_rvalid ;

  // value method imem_dma_server_m_rid
  assign imem_dma_server_rid = itcm$dma_server_rid ;

  // value method imem_dma_server_m_rdata
  assign imem_dma_server_rdata = itcm$dma_server_rdata ;

  // value method imem_dma_server_m_rresp
  assign imem_dma_server_rresp = itcm$dma_server_rresp ;

  // value method imem_dma_server_m_rlast
  assign imem_dma_server_rlast = itcm$dma_server_rlast ;

  // action method imem_dma_server_m_rready
  assign CAN_FIRE_imem_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_imem_dma_server_m_rready = 1'd1 ;

  // action method dmem_req
  assign CAN_FIRE_dmem_req = 1'd1 ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // value method dmem_valid
  assign dmem_valid = dtcm$dmem_valid ;

  // value method dmem_word32
  assign dmem_word32 = dtcm$dmem_word32 ;

  // value method dmem_st_amo_val
  assign dmem_st_amo_val = dtcm$dmem_st_amo_val ;

  // value method dmem_exc
  assign dmem_exc = dtcm$dmem_exc ;

  // value method dmem_exc_code
  assign dmem_exc_code = dtcm$dmem_exc_code ;

  // value method nmio_master_m_awvalid
  assign nmio_master_awvalid = dtcm$nmio_master_awvalid ;

  // value method nmio_master_m_awid
  assign nmio_master_awid = dtcm$nmio_master_awid ;

  // value method nmio_master_m_awaddr
  assign nmio_master_awaddr = dtcm$nmio_master_awaddr ;

  // value method nmio_master_m_awlen
  assign nmio_master_awlen = dtcm$nmio_master_awlen ;

  // value method nmio_master_m_awsize
  assign nmio_master_awsize = dtcm$nmio_master_awsize ;

  // value method nmio_master_m_awburst
  assign nmio_master_awburst = dtcm$nmio_master_awburst ;

  // value method nmio_master_m_awlock
  assign nmio_master_awlock = dtcm$nmio_master_awlock ;

  // value method nmio_master_m_awcache
  assign nmio_master_awcache = dtcm$nmio_master_awcache ;

  // value method nmio_master_m_awprot
  assign nmio_master_awprot = dtcm$nmio_master_awprot ;

  // value method nmio_master_m_awqos
  assign nmio_master_awqos = dtcm$nmio_master_awqos ;

  // value method nmio_master_m_awregion
  assign nmio_master_awregion = dtcm$nmio_master_awregion ;

  // action method nmio_master_m_awready
  assign CAN_FIRE_nmio_master_m_awready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_awready = 1'd1 ;

  // value method nmio_master_m_wvalid
  assign nmio_master_wvalid = dtcm$nmio_master_wvalid ;

  // value method nmio_master_m_wdata
  assign nmio_master_wdata = dtcm$nmio_master_wdata ;

  // value method nmio_master_m_wstrb
  assign nmio_master_wstrb = dtcm$nmio_master_wstrb ;

  // value method nmio_master_m_wlast
  assign nmio_master_wlast = dtcm$nmio_master_wlast ;

  // action method nmio_master_m_wready
  assign CAN_FIRE_nmio_master_m_wready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_wready = 1'd1 ;

  // action method nmio_master_m_bvalid
  assign CAN_FIRE_nmio_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_bvalid = 1'd1 ;

  // value method nmio_master_m_bready
  assign nmio_master_bready = dtcm$nmio_master_bready ;

  // value method nmio_master_m_arvalid
  assign nmio_master_arvalid = dtcm$nmio_master_arvalid ;

  // value method nmio_master_m_arid
  assign nmio_master_arid = dtcm$nmio_master_arid ;

  // value method nmio_master_m_araddr
  assign nmio_master_araddr = dtcm$nmio_master_araddr ;

  // value method nmio_master_m_arlen
  assign nmio_master_arlen = dtcm$nmio_master_arlen ;

  // value method nmio_master_m_arsize
  assign nmio_master_arsize = dtcm$nmio_master_arsize ;

  // value method nmio_master_m_arburst
  assign nmio_master_arburst = dtcm$nmio_master_arburst ;

  // value method nmio_master_m_arlock
  assign nmio_master_arlock = dtcm$nmio_master_arlock ;

  // value method nmio_master_m_arcache
  assign nmio_master_arcache = dtcm$nmio_master_arcache ;

  // value method nmio_master_m_arprot
  assign nmio_master_arprot = dtcm$nmio_master_arprot ;

  // value method nmio_master_m_arqos
  assign nmio_master_arqos = dtcm$nmio_master_arqos ;

  // value method nmio_master_m_arregion
  assign nmio_master_arregion = dtcm$nmio_master_arregion ;

  // action method nmio_master_m_arready
  assign CAN_FIRE_nmio_master_m_arready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_arready = 1'd1 ;

  // action method nmio_master_m_rvalid
  assign CAN_FIRE_nmio_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_rvalid = 1'd1 ;

  // value method nmio_master_m_rready
  assign nmio_master_rready = dtcm$nmio_master_rready ;

  // value method dmem_master_haddr
  assign dmem_master_HADDR = dtcm$mem_master_HADDR ;

  // value method dmem_master_hburst
  assign dmem_master_HBURST = dtcm$mem_master_HBURST ;

  // value method dmem_master_hmastlock
  assign dmem_master_HMASTLOCK = dtcm$mem_master_HMASTLOCK ;

  // value method dmem_master_hprot
  assign dmem_master_HPROT = dtcm$mem_master_HPROT ;

  // value method dmem_master_hsize
  assign dmem_master_HSIZE = dtcm$mem_master_HSIZE ;

  // value method dmem_master_htrans
  assign dmem_master_HTRANS = dtcm$mem_master_HTRANS ;

  // value method dmem_master_hwdata
  assign dmem_master_HWDATA = dtcm$mem_master_HWDATA ;

  // value method dmem_master_hwrite
  assign dmem_master_HWRITE = dtcm$mem_master_HWRITE ;

  // action method dmem_master_hrdata
  assign CAN_FIRE_dmem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_dmem_master_hrdata = 1'd1 ;

  // action method dmem_master_hready
  assign CAN_FIRE_dmem_master_hready = 1'd1 ;
  assign WILL_FIRE_dmem_master_hready = 1'd1 ;

  // action method dmem_master_hresp
  assign CAN_FIRE_dmem_master_hresp = 1'd1 ;
  assign WILL_FIRE_dmem_master_hresp = 1'd1 ;

  // action method dmem_dma_server_m_awvalid
  assign CAN_FIRE_dmem_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_awvalid = 1'd1 ;

  // value method dmem_dma_server_m_awready
  assign dmem_dma_server_awready = dtcm$dma_server_awready ;

  // action method dmem_dma_server_m_wvalid
  assign CAN_FIRE_dmem_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_wvalid = 1'd1 ;

  // value method dmem_dma_server_m_wready
  assign dmem_dma_server_wready = dtcm$dma_server_wready ;

  // value method dmem_dma_server_m_bvalid
  assign dmem_dma_server_bvalid = dtcm$dma_server_bvalid ;

  // value method dmem_dma_server_m_bid
  assign dmem_dma_server_bid = dtcm$dma_server_bid ;

  // value method dmem_dma_server_m_bresp
  assign dmem_dma_server_bresp = dtcm$dma_server_bresp ;

  // action method dmem_dma_server_m_bready
  assign CAN_FIRE_dmem_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_bready = 1'd1 ;

  // action method dmem_dma_server_m_arvalid
  assign CAN_FIRE_dmem_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_arvalid = 1'd1 ;

  // value method dmem_dma_server_m_arready
  assign dmem_dma_server_arready = dtcm$dma_server_arready ;

  // value method dmem_dma_server_m_rvalid
  assign dmem_dma_server_rvalid = dtcm$dma_server_rvalid ;

  // value method dmem_dma_server_m_rid
  assign dmem_dma_server_rid = dtcm$dma_server_rid ;

  // value method dmem_dma_server_m_rdata
  assign dmem_dma_server_rdata = dtcm$dma_server_rdata ;

  // value method dmem_dma_server_m_rresp
  assign dmem_dma_server_rresp = dtcm$dma_server_rresp ;

  // value method dmem_dma_server_m_rlast
  assign dmem_dma_server_rlast = dtcm$dma_server_rlast ;

  // action method dmem_dma_server_m_rready
  assign CAN_FIRE_dmem_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dmem_dma_server_m_rready = 1'd1 ;

  // action method server_fence_i_request_put
  assign RDY_server_fence_i_request_put = 1'd1 ;
  assign CAN_FIRE_server_fence_i_request_put = 1'd1 ;
  assign WILL_FIRE_server_fence_i_request_put =
	     EN_server_fence_i_request_put ;

  // action method server_fence_i_response_get
  assign RDY_server_fence_i_response_get = 1'd1 ;
  assign CAN_FIRE_server_fence_i_response_get = 1'd1 ;
  assign WILL_FIRE_server_fence_i_response_get =
	     EN_server_fence_i_response_get ;

  // action method server_fence_request_put
  assign RDY_server_fence_request_put = f_fence_req_rsp$FULL_N ;
  assign CAN_FIRE_server_fence_request_put = f_fence_req_rsp$FULL_N ;
  assign WILL_FIRE_server_fence_request_put = EN_server_fence_request_put ;

  // action method server_fence_response_get
  assign RDY_server_fence_response_get = f_fence_req_rsp$EMPTY_N ;
  assign CAN_FIRE_server_fence_response_get = f_fence_req_rsp$EMPTY_N ;
  assign WILL_FIRE_server_fence_response_get = EN_server_fence_response_get ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = dtcm$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // submodule dtcm
  mkDTCM dtcm(.verbosity(2'd2),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .dma_server_araddr(dtcm$dma_server_araddr),
	      .dma_server_arburst(dtcm$dma_server_arburst),
	      .dma_server_arcache(dtcm$dma_server_arcache),
	      .dma_server_arid(dtcm$dma_server_arid),
	      .dma_server_arlen(dtcm$dma_server_arlen),
	      .dma_server_arlock(dtcm$dma_server_arlock),
	      .dma_server_arprot(dtcm$dma_server_arprot),
	      .dma_server_arqos(dtcm$dma_server_arqos),
	      .dma_server_arregion(dtcm$dma_server_arregion),
	      .dma_server_arsize(dtcm$dma_server_arsize),
	      .dma_server_arvalid(dtcm$dma_server_arvalid),
	      .dma_server_awaddr(dtcm$dma_server_awaddr),
	      .dma_server_awburst(dtcm$dma_server_awburst),
	      .dma_server_awcache(dtcm$dma_server_awcache),
	      .dma_server_awid(dtcm$dma_server_awid),
	      .dma_server_awlen(dtcm$dma_server_awlen),
	      .dma_server_awlock(dtcm$dma_server_awlock),
	      .dma_server_awprot(dtcm$dma_server_awprot),
	      .dma_server_awqos(dtcm$dma_server_awqos),
	      .dma_server_awregion(dtcm$dma_server_awregion),
	      .dma_server_awsize(dtcm$dma_server_awsize),
	      .dma_server_awvalid(dtcm$dma_server_awvalid),
	      .dma_server_bready(dtcm$dma_server_bready),
	      .dma_server_rready(dtcm$dma_server_rready),
	      .dma_server_wdata(dtcm$dma_server_wdata),
	      .dma_server_wlast(dtcm$dma_server_wlast),
	      .dma_server_wstrb(dtcm$dma_server_wstrb),
	      .dma_server_wvalid(dtcm$dma_server_wvalid),
	      .dmem_req_addr(dtcm$dmem_req_addr),
	      .dmem_req_amo_funct7(dtcm$dmem_req_amo_funct7),
	      .dmem_req_f3(dtcm$dmem_req_f3),
	      .dmem_req_op(dtcm$dmem_req_op),
	      .dmem_req_store_value(dtcm$dmem_req_store_value),
	      .mem_master_HRDATA(dtcm$mem_master_HRDATA),
	      .mem_master_HREADY(dtcm$mem_master_HREADY),
	      .mem_master_HRESP(dtcm$mem_master_HRESP),
	      .nmio_master_arready(dtcm$nmio_master_arready),
	      .nmio_master_awready(dtcm$nmio_master_awready),
	      .nmio_master_bid(dtcm$nmio_master_bid),
	      .nmio_master_bresp(dtcm$nmio_master_bresp),
	      .nmio_master_bvalid(dtcm$nmio_master_bvalid),
	      .nmio_master_rdata(dtcm$nmio_master_rdata),
	      .nmio_master_rid(dtcm$nmio_master_rid),
	      .nmio_master_rlast(dtcm$nmio_master_rlast),
	      .nmio_master_rresp(dtcm$nmio_master_rresp),
	      .nmio_master_rvalid(dtcm$nmio_master_rvalid),
	      .nmio_master_wready(dtcm$nmio_master_wready),
	      .set_watch_tohost_tohost_addr(dtcm$set_watch_tohost_tohost_addr),
	      .set_watch_tohost_watch_tohost(dtcm$set_watch_tohost_watch_tohost),
	      .EN_reset(dtcm$EN_reset),
	      .EN_dmem_req(dtcm$EN_dmem_req),
	      .EN_set_watch_tohost(dtcm$EN_set_watch_tohost),
	      .RDY_reset(dtcm$RDY_reset),
	      .dmem_valid(dtcm$dmem_valid),
	      .dmem_word32(dtcm$dmem_word32),
	      .dmem_st_amo_val(dtcm$dmem_st_amo_val),
	      .dmem_exc(dtcm$dmem_exc),
	      .dmem_exc_code(dtcm$dmem_exc_code),
	      .nmio_master_awvalid(dtcm$nmio_master_awvalid),
	      .nmio_master_awid(dtcm$nmio_master_awid),
	      .nmio_master_awaddr(dtcm$nmio_master_awaddr),
	      .nmio_master_awlen(dtcm$nmio_master_awlen),
	      .nmio_master_awsize(dtcm$nmio_master_awsize),
	      .nmio_master_awburst(dtcm$nmio_master_awburst),
	      .nmio_master_awlock(dtcm$nmio_master_awlock),
	      .nmio_master_awcache(dtcm$nmio_master_awcache),
	      .nmio_master_awprot(dtcm$nmio_master_awprot),
	      .nmio_master_awqos(dtcm$nmio_master_awqos),
	      .nmio_master_awregion(dtcm$nmio_master_awregion),
	      .nmio_master_wvalid(dtcm$nmio_master_wvalid),
	      .nmio_master_wdata(dtcm$nmio_master_wdata),
	      .nmio_master_wstrb(dtcm$nmio_master_wstrb),
	      .nmio_master_wlast(dtcm$nmio_master_wlast),
	      .nmio_master_bready(dtcm$nmio_master_bready),
	      .nmio_master_arvalid(dtcm$nmio_master_arvalid),
	      .nmio_master_arid(dtcm$nmio_master_arid),
	      .nmio_master_araddr(dtcm$nmio_master_araddr),
	      .nmio_master_arlen(dtcm$nmio_master_arlen),
	      .nmio_master_arsize(dtcm$nmio_master_arsize),
	      .nmio_master_arburst(dtcm$nmio_master_arburst),
	      .nmio_master_arlock(dtcm$nmio_master_arlock),
	      .nmio_master_arcache(dtcm$nmio_master_arcache),
	      .nmio_master_arprot(dtcm$nmio_master_arprot),
	      .nmio_master_arqos(dtcm$nmio_master_arqos),
	      .nmio_master_arregion(dtcm$nmio_master_arregion),
	      .nmio_master_rready(dtcm$nmio_master_rready),
	      .mem_master_HADDR(dtcm$mem_master_HADDR),
	      .mem_master_HBURST(dtcm$mem_master_HBURST),
	      .mem_master_HMASTLOCK(dtcm$mem_master_HMASTLOCK),
	      .mem_master_HPROT(dtcm$mem_master_HPROT),
	      .mem_master_HSIZE(dtcm$mem_master_HSIZE),
	      .mem_master_HTRANS(dtcm$mem_master_HTRANS),
	      .mem_master_HWDATA(dtcm$mem_master_HWDATA),
	      .mem_master_HWRITE(dtcm$mem_master_HWRITE),
	      .dma_server_awready(dtcm$dma_server_awready),
	      .dma_server_wready(dtcm$dma_server_wready),
	      .dma_server_bvalid(dtcm$dma_server_bvalid),
	      .dma_server_bid(dtcm$dma_server_bid),
	      .dma_server_bresp(dtcm$dma_server_bresp),
	      .dma_server_arready(dtcm$dma_server_arready),
	      .dma_server_rvalid(dtcm$dma_server_rvalid),
	      .dma_server_rid(dtcm$dma_server_rid),
	      .dma_server_rdata(dtcm$dma_server_rdata),
	      .dma_server_rresp(dtcm$dma_server_rresp),
	      .dma_server_rlast(dtcm$dma_server_rlast),
	      .RDY_set_watch_tohost(),
	      .mv_tohost_value(dtcm$mv_tohost_value),
	      .RDY_mv_tohost_value());

  // submodule f_fence_req_rsp
  FIFO10 #(.guarded(1'd1)) f_fence_req_rsp(.RST(RST_N),
					   .CLK(CLK),
					   .ENQ(f_fence_req_rsp$ENQ),
					   .DEQ(f_fence_req_rsp$DEQ),
					   .CLR(f_fence_req_rsp$CLR),
					   .FULL_N(f_fence_req_rsp$FULL_N),
					   .EMPTY_N(f_fence_req_rsp$EMPTY_N));

  // submodule f_reset_rsps
  FIFO10 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule itcm
  mkITCM itcm(.verbosity(2'd2),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .dma_server_araddr(itcm$dma_server_araddr),
	      .dma_server_arburst(itcm$dma_server_arburst),
	      .dma_server_arcache(itcm$dma_server_arcache),
	      .dma_server_arid(itcm$dma_server_arid),
	      .dma_server_arlen(itcm$dma_server_arlen),
	      .dma_server_arlock(itcm$dma_server_arlock),
	      .dma_server_arprot(itcm$dma_server_arprot),
	      .dma_server_arqos(itcm$dma_server_arqos),
	      .dma_server_arregion(itcm$dma_server_arregion),
	      .dma_server_arsize(itcm$dma_server_arsize),
	      .dma_server_arvalid(itcm$dma_server_arvalid),
	      .dma_server_awaddr(itcm$dma_server_awaddr),
	      .dma_server_awburst(itcm$dma_server_awburst),
	      .dma_server_awcache(itcm$dma_server_awcache),
	      .dma_server_awid(itcm$dma_server_awid),
	      .dma_server_awlen(itcm$dma_server_awlen),
	      .dma_server_awlock(itcm$dma_server_awlock),
	      .dma_server_awprot(itcm$dma_server_awprot),
	      .dma_server_awqos(itcm$dma_server_awqos),
	      .dma_server_awregion(itcm$dma_server_awregion),
	      .dma_server_awsize(itcm$dma_server_awsize),
	      .dma_server_awvalid(itcm$dma_server_awvalid),
	      .dma_server_bready(itcm$dma_server_bready),
	      .dma_server_rready(itcm$dma_server_rready),
	      .dma_server_wdata(itcm$dma_server_wdata),
	      .dma_server_wlast(itcm$dma_server_wlast),
	      .dma_server_wstrb(itcm$dma_server_wstrb),
	      .dma_server_wvalid(itcm$dma_server_wvalid),
	      .imem_req_addr(itcm$imem_req_addr),
	      .imem_req_f3(itcm$imem_req_f3),
	      .EN_reset(itcm$EN_reset),
	      .EN_imem_req(itcm$EN_imem_req),
	      .RDY_reset(itcm$RDY_reset),
	      .imem_valid(itcm$imem_valid),
	      .imem_is_i32_not_i16(itcm$imem_is_i32_not_i16),
	      .imem_pc(itcm$imem_pc),
	      .imem_instr(itcm$imem_instr),
	      .imem_exc(itcm$imem_exc),
	      .imem_exc_code(itcm$imem_exc_code),
	      .imem_tval(itcm$imem_tval),
	      .dma_server_awready(itcm$dma_server_awready),
	      .dma_server_wready(itcm$dma_server_wready),
	      .dma_server_bvalid(itcm$dma_server_bvalid),
	      .dma_server_bid(itcm$dma_server_bid),
	      .dma_server_bresp(itcm$dma_server_bresp),
	      .dma_server_arready(itcm$dma_server_arready),
	      .dma_server_rvalid(itcm$dma_server_rvalid),
	      .dma_server_rid(itcm$dma_server_rid),
	      .dma_server_rdata(itcm$dma_server_rdata),
	      .dma_server_rresp(itcm$dma_server_rresp),
	      .dma_server_rlast(itcm$dma_server_rlast));

  // submodule dtcm
  assign dtcm$dma_server_araddr = dmem_dma_server_araddr ;
  assign dtcm$dma_server_arburst = dmem_dma_server_arburst ;
  assign dtcm$dma_server_arcache = dmem_dma_server_arcache ;
  assign dtcm$dma_server_arid = dmem_dma_server_arid ;
  assign dtcm$dma_server_arlen = dmem_dma_server_arlen ;
  assign dtcm$dma_server_arlock = dmem_dma_server_arlock ;
  assign dtcm$dma_server_arprot = dmem_dma_server_arprot ;
  assign dtcm$dma_server_arqos = dmem_dma_server_arqos ;
  assign dtcm$dma_server_arregion = dmem_dma_server_arregion ;
  assign dtcm$dma_server_arsize = dmem_dma_server_arsize ;
  assign dtcm$dma_server_arvalid = dmem_dma_server_arvalid ;
  assign dtcm$dma_server_awaddr = dmem_dma_server_awaddr ;
  assign dtcm$dma_server_awburst = dmem_dma_server_awburst ;
  assign dtcm$dma_server_awcache = dmem_dma_server_awcache ;
  assign dtcm$dma_server_awid = dmem_dma_server_awid ;
  assign dtcm$dma_server_awlen = dmem_dma_server_awlen ;
  assign dtcm$dma_server_awlock = dmem_dma_server_awlock ;
  assign dtcm$dma_server_awprot = dmem_dma_server_awprot ;
  assign dtcm$dma_server_awqos = dmem_dma_server_awqos ;
  assign dtcm$dma_server_awregion = dmem_dma_server_awregion ;
  assign dtcm$dma_server_awsize = dmem_dma_server_awsize ;
  assign dtcm$dma_server_awvalid = dmem_dma_server_awvalid ;
  assign dtcm$dma_server_bready = dmem_dma_server_bready ;
  assign dtcm$dma_server_rready = dmem_dma_server_rready ;
  assign dtcm$dma_server_wdata = dmem_dma_server_wdata ;
  assign dtcm$dma_server_wlast = dmem_dma_server_wlast ;
  assign dtcm$dma_server_wstrb = dmem_dma_server_wstrb ;
  assign dtcm$dma_server_wvalid = dmem_dma_server_wvalid ;
  assign dtcm$dmem_req_addr = dmem_req_addr ;
  assign dtcm$dmem_req_amo_funct7 = dmem_req_amo_funct7 ;
  assign dtcm$dmem_req_f3 = dmem_req_f3 ;
  assign dtcm$dmem_req_op = dmem_req_op ;
  assign dtcm$dmem_req_store_value = dmem_req_store_value ;
  assign dtcm$mem_master_HRDATA = dmem_master_HRDATA ;
  assign dtcm$mem_master_HREADY = dmem_master_HREADY ;
  assign dtcm$mem_master_HRESP = dmem_master_HRESP ;
  assign dtcm$nmio_master_arready = nmio_master_arready ;
  assign dtcm$nmio_master_awready = nmio_master_awready ;
  assign dtcm$nmio_master_bid = nmio_master_bid ;
  assign dtcm$nmio_master_bresp = nmio_master_bresp ;
  assign dtcm$nmio_master_bvalid = nmio_master_bvalid ;
  assign dtcm$nmio_master_rdata = nmio_master_rdata ;
  assign dtcm$nmio_master_rid = nmio_master_rid ;
  assign dtcm$nmio_master_rlast = nmio_master_rlast ;
  assign dtcm$nmio_master_rresp = nmio_master_rresp ;
  assign dtcm$nmio_master_rvalid = nmio_master_rvalid ;
  assign dtcm$nmio_master_wready = nmio_master_wready ;
  assign dtcm$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign dtcm$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign dtcm$EN_reset = EN_server_reset_request_put ;
  assign dtcm$EN_dmem_req = EN_dmem_req ;
  assign dtcm$EN_set_watch_tohost = EN_set_watch_tohost ;

  // submodule f_fence_req_rsp
  assign f_fence_req_rsp$ENQ = EN_server_fence_request_put ;
  assign f_fence_req_rsp$DEQ = EN_server_fence_response_get ;
  assign f_fence_req_rsp$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule itcm
  assign itcm$dma_server_araddr = imem_dma_server_araddr ;
  assign itcm$dma_server_arburst = imem_dma_server_arburst ;
  assign itcm$dma_server_arcache = imem_dma_server_arcache ;
  assign itcm$dma_server_arid = imem_dma_server_arid ;
  assign itcm$dma_server_arlen = imem_dma_server_arlen ;
  assign itcm$dma_server_arlock = imem_dma_server_arlock ;
  assign itcm$dma_server_arprot = imem_dma_server_arprot ;
  assign itcm$dma_server_arqos = imem_dma_server_arqos ;
  assign itcm$dma_server_arregion = imem_dma_server_arregion ;
  assign itcm$dma_server_arsize = imem_dma_server_arsize ;
  assign itcm$dma_server_arvalid = imem_dma_server_arvalid ;
  assign itcm$dma_server_awaddr = imem_dma_server_awaddr ;
  assign itcm$dma_server_awburst = imem_dma_server_awburst ;
  assign itcm$dma_server_awcache = imem_dma_server_awcache ;
  assign itcm$dma_server_awid = imem_dma_server_awid ;
  assign itcm$dma_server_awlen = imem_dma_server_awlen ;
  assign itcm$dma_server_awlock = imem_dma_server_awlock ;
  assign itcm$dma_server_awprot = imem_dma_server_awprot ;
  assign itcm$dma_server_awqos = imem_dma_server_awqos ;
  assign itcm$dma_server_awregion = imem_dma_server_awregion ;
  assign itcm$dma_server_awsize = imem_dma_server_awsize ;
  assign itcm$dma_server_awvalid = imem_dma_server_awvalid ;
  assign itcm$dma_server_bready = imem_dma_server_bready ;
  assign itcm$dma_server_rready = imem_dma_server_rready ;
  assign itcm$dma_server_wdata = imem_dma_server_wdata ;
  assign itcm$dma_server_wlast = imem_dma_server_wlast ;
  assign itcm$dma_server_wstrb = imem_dma_server_wstrb ;
  assign itcm$dma_server_wvalid = imem_dma_server_wvalid ;
  assign itcm$imem_req_addr = imem_req_addr ;
  assign itcm$imem_req_f3 = imem_req_f3 ;
  assign itcm$EN_reset = EN_server_reset_request_put ;
  assign itcm$EN_imem_req = EN_imem_req ;
endmodule  // mkNear_Mem

