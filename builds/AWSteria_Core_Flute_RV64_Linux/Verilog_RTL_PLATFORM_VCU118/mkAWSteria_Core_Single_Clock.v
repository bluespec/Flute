//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// mem_M_awvalid                  O     1
// mem_M_awid                     O    16 reg
// mem_M_awaddr                   O    64 reg
// mem_M_awlen                    O     8 reg
// mem_M_awsize                   O     3 reg
// mem_M_awburst                  O     2 reg
// mem_M_awlock                   O     1 reg
// mem_M_awcache                  O     4 reg
// mem_M_awprot                   O     3 reg
// mem_M_awqos                    O     4 reg
// mem_M_awregion                 O     4 reg
// mem_M_wvalid                   O     1
// mem_M_wdata                    O   512 reg
// mem_M_wstrb                    O    64 reg
// mem_M_wlast                    O     1 reg
// mem_M_bready                   O     1
// mem_M_arvalid                  O     1
// mem_M_arid                     O    16 reg
// mem_M_araddr                   O    64 reg
// mem_M_arlen                    O     8 reg
// mem_M_arsize                   O     3 reg
// mem_M_arburst                  O     2 reg
// mem_M_arlock                   O     1 reg
// mem_M_arcache                  O     4 reg
// mem_M_arprot                   O     3 reg
// mem_M_arqos                    O     4 reg
// mem_M_arregion                 O     4 reg
// mem_M_rready                   O     1
// mmio_M_awvalid                 O     1 reg
// mmio_M_awid                    O    16 reg
// mmio_M_awaddr                  O    64 reg
// mmio_M_awlen                   O     8 reg
// mmio_M_awsize                  O     3 reg
// mmio_M_awburst                 O     2 reg
// mmio_M_awlock                  O     1 reg
// mmio_M_awcache                 O     4 reg
// mmio_M_awprot                  O     3 reg
// mmio_M_awqos                   O     4 reg
// mmio_M_awregion                O     4 reg
// mmio_M_wvalid                  O     1 reg
// mmio_M_wdata                   O    64 reg
// mmio_M_wstrb                   O     8 reg
// mmio_M_wlast                   O     1 reg
// mmio_M_bready                  O     1 reg
// mmio_M_arvalid                 O     1 reg
// mmio_M_arid                    O    16 reg
// mmio_M_araddr                  O    64 reg
// mmio_M_arlen                   O     8 reg
// mmio_M_arsize                  O     3 reg
// mmio_M_arburst                 O     2 reg
// mmio_M_arlock                  O     1 reg
// mmio_M_arcache                 O     4 reg
// mmio_M_arprot                  O     3 reg
// mmio_M_arqos                   O     4 reg
// mmio_M_arregion                O     4 reg
// mmio_M_rready                  O     1 reg
// dma_S_awready                  O     1 reg
// dma_S_wready                   O     1 reg
// dma_S_bvalid                   O     1 reg
// dma_S_bid                      O    16 reg
// dma_S_bresp                    O     2 reg
// dma_S_arready                  O     1 reg
// dma_S_rvalid                   O     1 reg
// dma_S_rid                      O    16 reg
// dma_S_rdata                    O   512 reg
// dma_S_rresp                    O     2 reg
// dma_S_rlast                    O     1 reg
// RDY_ext_interrupts             O     1 const
// RDY_fi_nmi_enq                 O     1 reg
// fi_nmi_notFull                 O     1 reg
// RDY_fi_nmi_notFull             O     1 const
// fo_misc_first                  O    32 const
// RDY_fo_misc_first              O     1 const
// RDY_fo_misc_deq                O     1 const
// fo_misc_notEmpty               O     1 const
// RDY_fo_misc_notEmpty           O     1 const
// RDY_fi_misc_enq                O     1 const
// fi_misc_notFull                O     1 const
// RDY_fi_misc_notFull            O     1 const
// fo_tv_info_first               O   608 const
// RDY_fo_tv_info_first           O     1 const
// RDY_fo_tv_info_deq             O     1 const
// fo_tv_info_notEmpty            O     1 const
// RDY_fo_tv_info_notEmpty        O     1 const
// RDY_se_dmi_request_enq         O     1 reg
// se_dmi_request_notFull         O     1 reg
// RDY_se_dmi_request_notFull     O     1 const
// se_dmi_response_first          O    32 reg
// RDY_se_dmi_response_first      O     1 reg
// RDY_se_dmi_response_deq        O     1 reg
// se_dmi_response_notEmpty       O     1 reg
// RDY_se_dmi_response_notEmpty   O     1 const
// RDY_cl_ndm_reset_request_first  O     1 reg
// RDY_cl_ndm_reset_request_deq   O     1 reg
// cl_ndm_reset_request_notEmpty  O     1 reg
// RDY_cl_ndm_reset_request_notEmpty  O     1 const
// RDY_cl_ndm_reset_response_enq  O     1 reg
// cl_ndm_reset_response_notFull  O     1 reg
// RDY_cl_ndm_reset_response_notFull  O     1 const
// RDY_se_control_status_request_enq  O     1 reg
// se_control_status_request_notFull  O     1 reg
// RDY_se_control_status_request_notFull  O     1 const
// se_control_status_response_first  O    32 reg
// RDY_se_control_status_response_first  O     1 reg
// RDY_se_control_status_response_deq  O     1 reg
// se_control_status_response_notEmpty  O     1 reg
// RDY_se_control_status_response_notEmpty  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mem_M_awready                  I     1
// mem_M_wready                   I     1
// mem_M_bvalid                   I     1
// mem_M_bid                      I    16 reg
// mem_M_bresp                    I     2 reg
// mem_M_arready                  I     1
// mem_M_rvalid                   I     1
// mem_M_rid                      I    16 reg
// mem_M_rdata                    I   512 reg
// mem_M_rresp                    I     2 reg
// mem_M_rlast                    I     1 reg
// mmio_M_awready                 I     1
// mmio_M_wready                  I     1
// mmio_M_bvalid                  I     1
// mmio_M_bid                     I    16 reg
// mmio_M_bresp                   I     2 reg
// mmio_M_arready                 I     1
// mmio_M_rvalid                  I     1
// mmio_M_rid                     I    16 reg
// mmio_M_rdata                   I    64 reg
// mmio_M_rresp                   I     2 reg
// mmio_M_rlast                   I     1 reg
// dma_S_awvalid                  I     1
// dma_S_awid                     I    16 reg
// dma_S_awaddr                   I    64 reg
// dma_S_awlen                    I     8 reg
// dma_S_awsize                   I     3 reg
// dma_S_awburst                  I     2 reg
// dma_S_awlock                   I     1 reg
// dma_S_awcache                  I     4 reg
// dma_S_awprot                   I     3 reg
// dma_S_awqos                    I     4 reg
// dma_S_awregion                 I     4 reg
// dma_S_wvalid                   I     1
// dma_S_wdata                    I   512 reg
// dma_S_wstrb                    I    64 reg
// dma_S_wlast                    I     1 reg
// dma_S_bready                   I     1
// dma_S_arvalid                  I     1
// dma_S_arid                     I    16 reg
// dma_S_araddr                   I    64 reg
// dma_S_arlen                    I     8 reg
// dma_S_arsize                   I     3 reg
// dma_S_arburst                  I     2 reg
// dma_S_arlock                   I     1 reg
// dma_S_arcache                  I     4 reg
// dma_S_arprot                   I     3 reg
// dma_S_arqos                    I     4 reg
// dma_S_arregion                 I     4 reg
// dma_S_rready                   I     1
// ext_interrupts_x               I     5 reg
// fi_nmi_enq_x                   I     1 reg
// fi_misc_enq_x                  I    32 unused
// se_dmi_request_enq_x           I    40 reg
// se_control_status_request_enq_x  I    32 reg
// EN_ext_interrupts              I     1
// EN_fi_nmi_enq                  I     1
// EN_fo_misc_deq                 I     1 unused
// EN_fi_misc_enq                 I     1 unused
// EN_fo_tv_info_deq              I     1 unused
// EN_se_dmi_request_enq          I     1
// EN_se_dmi_response_deq         I     1
// EN_cl_ndm_reset_request_deq    I     1
// EN_cl_ndm_reset_response_enq   I     1
// EN_se_control_status_request_enq  I     1
// EN_se_control_status_response_deq  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_M_awready, mem_M_wready) -> mem_M_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWSteria_Core_Single_Clock(CLK,
				    RST_N,

				    mem_M_awvalid,

				    mem_M_awid,

				    mem_M_awaddr,

				    mem_M_awlen,

				    mem_M_awsize,

				    mem_M_awburst,

				    mem_M_awlock,

				    mem_M_awcache,

				    mem_M_awprot,

				    mem_M_awqos,

				    mem_M_awregion,

				    mem_M_awready,

				    mem_M_wvalid,

				    mem_M_wdata,

				    mem_M_wstrb,

				    mem_M_wlast,

				    mem_M_wready,

				    mem_M_bvalid,
				    mem_M_bid,
				    mem_M_bresp,

				    mem_M_bready,

				    mem_M_arvalid,

				    mem_M_arid,

				    mem_M_araddr,

				    mem_M_arlen,

				    mem_M_arsize,

				    mem_M_arburst,

				    mem_M_arlock,

				    mem_M_arcache,

				    mem_M_arprot,

				    mem_M_arqos,

				    mem_M_arregion,

				    mem_M_arready,

				    mem_M_rvalid,
				    mem_M_rid,
				    mem_M_rdata,
				    mem_M_rresp,
				    mem_M_rlast,

				    mem_M_rready,

				    mmio_M_awvalid,

				    mmio_M_awid,

				    mmio_M_awaddr,

				    mmio_M_awlen,

				    mmio_M_awsize,

				    mmio_M_awburst,

				    mmio_M_awlock,

				    mmio_M_awcache,

				    mmio_M_awprot,

				    mmio_M_awqos,

				    mmio_M_awregion,

				    mmio_M_awready,

				    mmio_M_wvalid,

				    mmio_M_wdata,

				    mmio_M_wstrb,

				    mmio_M_wlast,

				    mmio_M_wready,

				    mmio_M_bvalid,
				    mmio_M_bid,
				    mmio_M_bresp,

				    mmio_M_bready,

				    mmio_M_arvalid,

				    mmio_M_arid,

				    mmio_M_araddr,

				    mmio_M_arlen,

				    mmio_M_arsize,

				    mmio_M_arburst,

				    mmio_M_arlock,

				    mmio_M_arcache,

				    mmio_M_arprot,

				    mmio_M_arqos,

				    mmio_M_arregion,

				    mmio_M_arready,

				    mmio_M_rvalid,
				    mmio_M_rid,
				    mmio_M_rdata,
				    mmio_M_rresp,
				    mmio_M_rlast,

				    mmio_M_rready,

				    dma_S_awvalid,
				    dma_S_awid,
				    dma_S_awaddr,
				    dma_S_awlen,
				    dma_S_awsize,
				    dma_S_awburst,
				    dma_S_awlock,
				    dma_S_awcache,
				    dma_S_awprot,
				    dma_S_awqos,
				    dma_S_awregion,

				    dma_S_awready,

				    dma_S_wvalid,
				    dma_S_wdata,
				    dma_S_wstrb,
				    dma_S_wlast,

				    dma_S_wready,

				    dma_S_bvalid,

				    dma_S_bid,

				    dma_S_bresp,

				    dma_S_bready,

				    dma_S_arvalid,
				    dma_S_arid,
				    dma_S_araddr,
				    dma_S_arlen,
				    dma_S_arsize,
				    dma_S_arburst,
				    dma_S_arlock,
				    dma_S_arcache,
				    dma_S_arprot,
				    dma_S_arqos,
				    dma_S_arregion,

				    dma_S_arready,

				    dma_S_rvalid,

				    dma_S_rid,

				    dma_S_rdata,

				    dma_S_rresp,

				    dma_S_rlast,

				    dma_S_rready,

				    ext_interrupts_x,
				    EN_ext_interrupts,
				    RDY_ext_interrupts,

				    fi_nmi_enq_x,
				    EN_fi_nmi_enq,
				    RDY_fi_nmi_enq,

				    fi_nmi_notFull,
				    RDY_fi_nmi_notFull,

				    fo_misc_first,
				    RDY_fo_misc_first,

				    EN_fo_misc_deq,
				    RDY_fo_misc_deq,

				    fo_misc_notEmpty,
				    RDY_fo_misc_notEmpty,

				    fi_misc_enq_x,
				    EN_fi_misc_enq,
				    RDY_fi_misc_enq,

				    fi_misc_notFull,
				    RDY_fi_misc_notFull,

				    fo_tv_info_first,
				    RDY_fo_tv_info_first,

				    EN_fo_tv_info_deq,
				    RDY_fo_tv_info_deq,

				    fo_tv_info_notEmpty,
				    RDY_fo_tv_info_notEmpty,

				    se_dmi_request_enq_x,
				    EN_se_dmi_request_enq,
				    RDY_se_dmi_request_enq,

				    se_dmi_request_notFull,
				    RDY_se_dmi_request_notFull,

				    se_dmi_response_first,
				    RDY_se_dmi_response_first,

				    EN_se_dmi_response_deq,
				    RDY_se_dmi_response_deq,

				    se_dmi_response_notEmpty,
				    RDY_se_dmi_response_notEmpty,

				    RDY_cl_ndm_reset_request_first,

				    EN_cl_ndm_reset_request_deq,
				    RDY_cl_ndm_reset_request_deq,

				    cl_ndm_reset_request_notEmpty,
				    RDY_cl_ndm_reset_request_notEmpty,

				    EN_cl_ndm_reset_response_enq,
				    RDY_cl_ndm_reset_response_enq,

				    cl_ndm_reset_response_notFull,
				    RDY_cl_ndm_reset_response_notFull,

				    se_control_status_request_enq_x,
				    EN_se_control_status_request_enq,
				    RDY_se_control_status_request_enq,

				    se_control_status_request_notFull,
				    RDY_se_control_status_request_notFull,

				    se_control_status_response_first,
				    RDY_se_control_status_response_first,

				    EN_se_control_status_response_deq,
				    RDY_se_control_status_response_deq,

				    se_control_status_response_notEmpty,
				    RDY_se_control_status_response_notEmpty);
  input  CLK;
  input  RST_N;

  // value method mem_M_m_awvalid
  output mem_M_awvalid;

  // value method mem_M_m_awid
  output [15 : 0] mem_M_awid;

  // value method mem_M_m_awaddr
  output [63 : 0] mem_M_awaddr;

  // value method mem_M_m_awlen
  output [7 : 0] mem_M_awlen;

  // value method mem_M_m_awsize
  output [2 : 0] mem_M_awsize;

  // value method mem_M_m_awburst
  output [1 : 0] mem_M_awburst;

  // value method mem_M_m_awlock
  output mem_M_awlock;

  // value method mem_M_m_awcache
  output [3 : 0] mem_M_awcache;

  // value method mem_M_m_awprot
  output [2 : 0] mem_M_awprot;

  // value method mem_M_m_awqos
  output [3 : 0] mem_M_awqos;

  // value method mem_M_m_awregion
  output [3 : 0] mem_M_awregion;

  // value method mem_M_m_awuser

  // action method mem_M_m_awready
  input  mem_M_awready;

  // value method mem_M_m_wvalid
  output mem_M_wvalid;

  // value method mem_M_m_wdata
  output [511 : 0] mem_M_wdata;

  // value method mem_M_m_wstrb
  output [63 : 0] mem_M_wstrb;

  // value method mem_M_m_wlast
  output mem_M_wlast;

  // value method mem_M_m_wuser

  // action method mem_M_m_wready
  input  mem_M_wready;

  // action method mem_M_m_bvalid
  input  mem_M_bvalid;
  input  [15 : 0] mem_M_bid;
  input  [1 : 0] mem_M_bresp;

  // value method mem_M_m_bready
  output mem_M_bready;

  // value method mem_M_m_arvalid
  output mem_M_arvalid;

  // value method mem_M_m_arid
  output [15 : 0] mem_M_arid;

  // value method mem_M_m_araddr
  output [63 : 0] mem_M_araddr;

  // value method mem_M_m_arlen
  output [7 : 0] mem_M_arlen;

  // value method mem_M_m_arsize
  output [2 : 0] mem_M_arsize;

  // value method mem_M_m_arburst
  output [1 : 0] mem_M_arburst;

  // value method mem_M_m_arlock
  output mem_M_arlock;

  // value method mem_M_m_arcache
  output [3 : 0] mem_M_arcache;

  // value method mem_M_m_arprot
  output [2 : 0] mem_M_arprot;

  // value method mem_M_m_arqos
  output [3 : 0] mem_M_arqos;

  // value method mem_M_m_arregion
  output [3 : 0] mem_M_arregion;

  // value method mem_M_m_aruser

  // action method mem_M_m_arready
  input  mem_M_arready;

  // action method mem_M_m_rvalid
  input  mem_M_rvalid;
  input  [15 : 0] mem_M_rid;
  input  [511 : 0] mem_M_rdata;
  input  [1 : 0] mem_M_rresp;
  input  mem_M_rlast;

  // value method mem_M_m_rready
  output mem_M_rready;

  // value method mmio_M_m_awvalid
  output mmio_M_awvalid;

  // value method mmio_M_m_awid
  output [15 : 0] mmio_M_awid;

  // value method mmio_M_m_awaddr
  output [63 : 0] mmio_M_awaddr;

  // value method mmio_M_m_awlen
  output [7 : 0] mmio_M_awlen;

  // value method mmio_M_m_awsize
  output [2 : 0] mmio_M_awsize;

  // value method mmio_M_m_awburst
  output [1 : 0] mmio_M_awburst;

  // value method mmio_M_m_awlock
  output mmio_M_awlock;

  // value method mmio_M_m_awcache
  output [3 : 0] mmio_M_awcache;

  // value method mmio_M_m_awprot
  output [2 : 0] mmio_M_awprot;

  // value method mmio_M_m_awqos
  output [3 : 0] mmio_M_awqos;

  // value method mmio_M_m_awregion
  output [3 : 0] mmio_M_awregion;

  // value method mmio_M_m_awuser

  // action method mmio_M_m_awready
  input  mmio_M_awready;

  // value method mmio_M_m_wvalid
  output mmio_M_wvalid;

  // value method mmio_M_m_wdata
  output [63 : 0] mmio_M_wdata;

  // value method mmio_M_m_wstrb
  output [7 : 0] mmio_M_wstrb;

  // value method mmio_M_m_wlast
  output mmio_M_wlast;

  // value method mmio_M_m_wuser

  // action method mmio_M_m_wready
  input  mmio_M_wready;

  // action method mmio_M_m_bvalid
  input  mmio_M_bvalid;
  input  [15 : 0] mmio_M_bid;
  input  [1 : 0] mmio_M_bresp;

  // value method mmio_M_m_bready
  output mmio_M_bready;

  // value method mmio_M_m_arvalid
  output mmio_M_arvalid;

  // value method mmio_M_m_arid
  output [15 : 0] mmio_M_arid;

  // value method mmio_M_m_araddr
  output [63 : 0] mmio_M_araddr;

  // value method mmio_M_m_arlen
  output [7 : 0] mmio_M_arlen;

  // value method mmio_M_m_arsize
  output [2 : 0] mmio_M_arsize;

  // value method mmio_M_m_arburst
  output [1 : 0] mmio_M_arburst;

  // value method mmio_M_m_arlock
  output mmio_M_arlock;

  // value method mmio_M_m_arcache
  output [3 : 0] mmio_M_arcache;

  // value method mmio_M_m_arprot
  output [2 : 0] mmio_M_arprot;

  // value method mmio_M_m_arqos
  output [3 : 0] mmio_M_arqos;

  // value method mmio_M_m_arregion
  output [3 : 0] mmio_M_arregion;

  // value method mmio_M_m_aruser

  // action method mmio_M_m_arready
  input  mmio_M_arready;

  // action method mmio_M_m_rvalid
  input  mmio_M_rvalid;
  input  [15 : 0] mmio_M_rid;
  input  [63 : 0] mmio_M_rdata;
  input  [1 : 0] mmio_M_rresp;
  input  mmio_M_rlast;

  // value method mmio_M_m_rready
  output mmio_M_rready;

  // action method dma_S_m_awvalid
  input  dma_S_awvalid;
  input  [15 : 0] dma_S_awid;
  input  [63 : 0] dma_S_awaddr;
  input  [7 : 0] dma_S_awlen;
  input  [2 : 0] dma_S_awsize;
  input  [1 : 0] dma_S_awburst;
  input  dma_S_awlock;
  input  [3 : 0] dma_S_awcache;
  input  [2 : 0] dma_S_awprot;
  input  [3 : 0] dma_S_awqos;
  input  [3 : 0] dma_S_awregion;

  // value method dma_S_m_awready
  output dma_S_awready;

  // action method dma_S_m_wvalid
  input  dma_S_wvalid;
  input  [511 : 0] dma_S_wdata;
  input  [63 : 0] dma_S_wstrb;
  input  dma_S_wlast;

  // value method dma_S_m_wready
  output dma_S_wready;

  // value method dma_S_m_bvalid
  output dma_S_bvalid;

  // value method dma_S_m_bid
  output [15 : 0] dma_S_bid;

  // value method dma_S_m_bresp
  output [1 : 0] dma_S_bresp;

  // value method dma_S_m_buser

  // action method dma_S_m_bready
  input  dma_S_bready;

  // action method dma_S_m_arvalid
  input  dma_S_arvalid;
  input  [15 : 0] dma_S_arid;
  input  [63 : 0] dma_S_araddr;
  input  [7 : 0] dma_S_arlen;
  input  [2 : 0] dma_S_arsize;
  input  [1 : 0] dma_S_arburst;
  input  dma_S_arlock;
  input  [3 : 0] dma_S_arcache;
  input  [2 : 0] dma_S_arprot;
  input  [3 : 0] dma_S_arqos;
  input  [3 : 0] dma_S_arregion;

  // value method dma_S_m_arready
  output dma_S_arready;

  // value method dma_S_m_rvalid
  output dma_S_rvalid;

  // value method dma_S_m_rid
  output [15 : 0] dma_S_rid;

  // value method dma_S_m_rdata
  output [511 : 0] dma_S_rdata;

  // value method dma_S_m_rresp
  output [1 : 0] dma_S_rresp;

  // value method dma_S_m_rlast
  output dma_S_rlast;

  // value method dma_S_m_ruser

  // action method dma_S_m_rready
  input  dma_S_rready;

  // action method ext_interrupts
  input  [4 : 0] ext_interrupts_x;
  input  EN_ext_interrupts;
  output RDY_ext_interrupts;

  // action method fi_nmi_enq
  input  fi_nmi_enq_x;
  input  EN_fi_nmi_enq;
  output RDY_fi_nmi_enq;

  // value method fi_nmi_notFull
  output fi_nmi_notFull;
  output RDY_fi_nmi_notFull;

  // value method fo_misc_first
  output [31 : 0] fo_misc_first;
  output RDY_fo_misc_first;

  // action method fo_misc_deq
  input  EN_fo_misc_deq;
  output RDY_fo_misc_deq;

  // value method fo_misc_notEmpty
  output fo_misc_notEmpty;
  output RDY_fo_misc_notEmpty;

  // action method fi_misc_enq
  input  [31 : 0] fi_misc_enq_x;
  input  EN_fi_misc_enq;
  output RDY_fi_misc_enq;

  // value method fi_misc_notFull
  output fi_misc_notFull;
  output RDY_fi_misc_notFull;

  // value method fo_tv_info_first
  output [607 : 0] fo_tv_info_first;
  output RDY_fo_tv_info_first;

  // action method fo_tv_info_deq
  input  EN_fo_tv_info_deq;
  output RDY_fo_tv_info_deq;

  // value method fo_tv_info_notEmpty
  output fo_tv_info_notEmpty;
  output RDY_fo_tv_info_notEmpty;

  // action method se_dmi_request_enq
  input  [39 : 0] se_dmi_request_enq_x;
  input  EN_se_dmi_request_enq;
  output RDY_se_dmi_request_enq;

  // value method se_dmi_request_notFull
  output se_dmi_request_notFull;
  output RDY_se_dmi_request_notFull;

  // value method se_dmi_response_first
  output [31 : 0] se_dmi_response_first;
  output RDY_se_dmi_response_first;

  // action method se_dmi_response_deq
  input  EN_se_dmi_response_deq;
  output RDY_se_dmi_response_deq;

  // value method se_dmi_response_notEmpty
  output se_dmi_response_notEmpty;
  output RDY_se_dmi_response_notEmpty;

  // value method cl_ndm_reset_request_first
  output RDY_cl_ndm_reset_request_first;

  // action method cl_ndm_reset_request_deq
  input  EN_cl_ndm_reset_request_deq;
  output RDY_cl_ndm_reset_request_deq;

  // value method cl_ndm_reset_request_notEmpty
  output cl_ndm_reset_request_notEmpty;
  output RDY_cl_ndm_reset_request_notEmpty;

  // action method cl_ndm_reset_response_enq
  input  EN_cl_ndm_reset_response_enq;
  output RDY_cl_ndm_reset_response_enq;

  // value method cl_ndm_reset_response_notFull
  output cl_ndm_reset_response_notFull;
  output RDY_cl_ndm_reset_response_notFull;

  // action method se_control_status_request_enq
  input  [31 : 0] se_control_status_request_enq_x;
  input  EN_se_control_status_request_enq;
  output RDY_se_control_status_request_enq;

  // value method se_control_status_request_notFull
  output se_control_status_request_notFull;
  output RDY_se_control_status_request_notFull;

  // value method se_control_status_response_first
  output [31 : 0] se_control_status_response_first;
  output RDY_se_control_status_response_first;

  // action method se_control_status_response_deq
  input  EN_se_control_status_response_deq;
  output RDY_se_control_status_response_deq;

  // value method se_control_status_response_notEmpty
  output se_control_status_response_notEmpty;
  output RDY_se_control_status_response_notEmpty;

  // signals for module outputs
  wire [607 : 0] fo_tv_info_first;
  wire [511 : 0] dma_S_rdata, mem_M_wdata;
  wire [63 : 0] mem_M_araddr,
		mem_M_awaddr,
		mem_M_wstrb,
		mmio_M_araddr,
		mmio_M_awaddr,
		mmio_M_wdata;
  wire [31 : 0] fo_misc_first,
		se_control_status_response_first,
		se_dmi_response_first;
  wire [15 : 0] dma_S_bid,
		dma_S_rid,
		mem_M_arid,
		mem_M_awid,
		mmio_M_arid,
		mmio_M_awid;
  wire [7 : 0] mem_M_arlen,
	       mem_M_awlen,
	       mmio_M_arlen,
	       mmio_M_awlen,
	       mmio_M_wstrb;
  wire [3 : 0] mem_M_arcache,
	       mem_M_arqos,
	       mem_M_arregion,
	       mem_M_awcache,
	       mem_M_awqos,
	       mem_M_awregion,
	       mmio_M_arcache,
	       mmio_M_arqos,
	       mmio_M_arregion,
	       mmio_M_awcache,
	       mmio_M_awqos,
	       mmio_M_awregion;
  wire [2 : 0] mem_M_arprot,
	       mem_M_arsize,
	       mem_M_awprot,
	       mem_M_awsize,
	       mmio_M_arprot,
	       mmio_M_arsize,
	       mmio_M_awprot,
	       mmio_M_awsize;
  wire [1 : 0] dma_S_bresp,
	       dma_S_rresp,
	       mem_M_arburst,
	       mem_M_awburst,
	       mmio_M_arburst,
	       mmio_M_awburst;
  wire RDY_cl_ndm_reset_request_deq,
       RDY_cl_ndm_reset_request_first,
       RDY_cl_ndm_reset_request_notEmpty,
       RDY_cl_ndm_reset_response_enq,
       RDY_cl_ndm_reset_response_notFull,
       RDY_ext_interrupts,
       RDY_fi_misc_enq,
       RDY_fi_misc_notFull,
       RDY_fi_nmi_enq,
       RDY_fi_nmi_notFull,
       RDY_fo_misc_deq,
       RDY_fo_misc_first,
       RDY_fo_misc_notEmpty,
       RDY_fo_tv_info_deq,
       RDY_fo_tv_info_first,
       RDY_fo_tv_info_notEmpty,
       RDY_se_control_status_request_enq,
       RDY_se_control_status_request_notFull,
       RDY_se_control_status_response_deq,
       RDY_se_control_status_response_first,
       RDY_se_control_status_response_notEmpty,
       RDY_se_dmi_request_enq,
       RDY_se_dmi_request_notFull,
       RDY_se_dmi_response_deq,
       RDY_se_dmi_response_first,
       RDY_se_dmi_response_notEmpty,
       cl_ndm_reset_request_notEmpty,
       cl_ndm_reset_response_notFull,
       dma_S_arready,
       dma_S_awready,
       dma_S_bvalid,
       dma_S_rlast,
       dma_S_rvalid,
       dma_S_wready,
       fi_misc_notFull,
       fi_nmi_notFull,
       fo_misc_notEmpty,
       fo_tv_info_notEmpty,
       mem_M_arlock,
       mem_M_arvalid,
       mem_M_awlock,
       mem_M_awvalid,
       mem_M_bready,
       mem_M_rready,
       mem_M_wlast,
       mem_M_wvalid,
       mmio_M_arlock,
       mmio_M_arvalid,
       mmio_M_awlock,
       mmio_M_awvalid,
       mmio_M_bready,
       mmio_M_rready,
       mmio_M_wlast,
       mmio_M_wvalid,
       se_control_status_request_notFull,
       se_control_status_response_notEmpty,
       se_dmi_request_notFull,
       se_dmi_response_notEmpty;

  // ports of submodule core_resettable
  wire [607 : 0] core_resettable$fo_tv_info_first;
  wire [511 : 0] core_resettable$dma_S_rdata,
		 core_resettable$dma_S_wdata,
		 core_resettable$mem_M_rdata,
		 core_resettable$mem_M_wdata;
  wire [64 : 0] core_resettable$p_pc_trace_control_put;
  wire [63 : 0] core_resettable$dma_S_araddr,
		core_resettable$dma_S_awaddr,
		core_resettable$dma_S_wstrb,
		core_resettable$mem_M_araddr,
		core_resettable$mem_M_awaddr,
		core_resettable$mem_M_wstrb,
		core_resettable$mmio_M_araddr,
		core_resettable$mmio_M_awaddr,
		core_resettable$mmio_M_rdata,
		core_resettable$mmio_M_wdata,
		core_resettable$mv_tohost_value,
		core_resettable$set_verbosity_logdelay,
		core_resettable$set_watch_tohost_tohost_addr;
  wire [39 : 0] core_resettable$se_dmi_request_enq_x;
  wire [31 : 0] core_resettable$fi_misc_enq_x,
		core_resettable$fo_misc_first,
		core_resettable$se_dmi_response_first;
  wire [15 : 0] core_resettable$dma_S_arid,
		core_resettable$dma_S_awid,
		core_resettable$dma_S_bid,
		core_resettable$dma_S_rid,
		core_resettable$mem_M_arid,
		core_resettable$mem_M_awid,
		core_resettable$mem_M_bid,
		core_resettable$mem_M_rid,
		core_resettable$mmio_M_arid,
		core_resettable$mmio_M_awid,
		core_resettable$mmio_M_bid,
		core_resettable$mmio_M_rid;
  wire [7 : 0] core_resettable$dma_S_arlen,
	       core_resettable$dma_S_awlen,
	       core_resettable$mem_M_arlen,
	       core_resettable$mem_M_awlen,
	       core_resettable$mmio_M_arlen,
	       core_resettable$mmio_M_awlen,
	       core_resettable$mmio_M_wstrb;
  wire [4 : 0] core_resettable$ext_interrupts_x;
  wire [3 : 0] core_resettable$dma_S_arcache,
	       core_resettable$dma_S_arqos,
	       core_resettable$dma_S_arregion,
	       core_resettable$dma_S_awcache,
	       core_resettable$dma_S_awqos,
	       core_resettable$dma_S_awregion,
	       core_resettable$mem_M_arcache,
	       core_resettable$mem_M_arqos,
	       core_resettable$mem_M_arregion,
	       core_resettable$mem_M_awcache,
	       core_resettable$mem_M_awqos,
	       core_resettable$mem_M_awregion,
	       core_resettable$mmio_M_arcache,
	       core_resettable$mmio_M_arqos,
	       core_resettable$mmio_M_arregion,
	       core_resettable$mmio_M_awcache,
	       core_resettable$mmio_M_awqos,
	       core_resettable$mmio_M_awregion,
	       core_resettable$set_verbosity_verbosity;
  wire [2 : 0] core_resettable$dma_S_arprot,
	       core_resettable$dma_S_arsize,
	       core_resettable$dma_S_awprot,
	       core_resettable$dma_S_awsize,
	       core_resettable$mem_M_arprot,
	       core_resettable$mem_M_arsize,
	       core_resettable$mem_M_awprot,
	       core_resettable$mem_M_awsize,
	       core_resettable$mmio_M_arprot,
	       core_resettable$mmio_M_arsize,
	       core_resettable$mmio_M_awprot,
	       core_resettable$mmio_M_awsize;
  wire [1 : 0] core_resettable$dma_S_arburst,
	       core_resettable$dma_S_awburst,
	       core_resettable$dma_S_bresp,
	       core_resettable$dma_S_rresp,
	       core_resettable$mem_M_arburst,
	       core_resettable$mem_M_awburst,
	       core_resettable$mem_M_bresp,
	       core_resettable$mem_M_rresp,
	       core_resettable$mmio_M_arburst,
	       core_resettable$mmio_M_awburst,
	       core_resettable$mmio_M_bresp,
	       core_resettable$mmio_M_rresp;
  wire core_resettable$EN_cl_ndm_reset_request_deq,
       core_resettable$EN_cl_ndm_reset_response_enq,
       core_resettable$EN_ext_interrupts,
       core_resettable$EN_fi_misc_enq,
       core_resettable$EN_fi_nmi_enq,
       core_resettable$EN_fo_misc_deq,
       core_resettable$EN_fo_tv_info_deq,
       core_resettable$EN_p_pc_trace_control_put,
       core_resettable$EN_se_dmi_request_enq,
       core_resettable$EN_se_dmi_response_deq,
       core_resettable$EN_set_verbosity,
       core_resettable$EN_set_watch_tohost,
       core_resettable$RDY_cl_ndm_reset_request_deq,
       core_resettable$RDY_cl_ndm_reset_request_first,
       core_resettable$RDY_cl_ndm_reset_response_enq,
       core_resettable$RDY_fi_misc_enq,
       core_resettable$RDY_fi_nmi_enq,
       core_resettable$RDY_fo_misc_deq,
       core_resettable$RDY_fo_misc_first,
       core_resettable$RDY_fo_tv_info_deq,
       core_resettable$RDY_fo_tv_info_first,
       core_resettable$RDY_se_dmi_request_enq,
       core_resettable$RDY_se_dmi_response_deq,
       core_resettable$RDY_se_dmi_response_first,
       core_resettable$cl_ndm_reset_request_notEmpty,
       core_resettable$cl_ndm_reset_response_notFull,
       core_resettable$dma_S_arlock,
       core_resettable$dma_S_arready,
       core_resettable$dma_S_arvalid,
       core_resettable$dma_S_awlock,
       core_resettable$dma_S_awready,
       core_resettable$dma_S_awvalid,
       core_resettable$dma_S_bready,
       core_resettable$dma_S_bvalid,
       core_resettable$dma_S_rlast,
       core_resettable$dma_S_rready,
       core_resettable$dma_S_rvalid,
       core_resettable$dma_S_wlast,
       core_resettable$dma_S_wready,
       core_resettable$dma_S_wvalid,
       core_resettable$fi_misc_notFull,
       core_resettable$fi_nmi_enq_x,
       core_resettable$fi_nmi_notFull,
       core_resettable$fo_misc_notEmpty,
       core_resettable$fo_tv_info_notEmpty,
       core_resettable$mem_M_arlock,
       core_resettable$mem_M_arready,
       core_resettable$mem_M_arvalid,
       core_resettable$mem_M_awlock,
       core_resettable$mem_M_awready,
       core_resettable$mem_M_awvalid,
       core_resettable$mem_M_bready,
       core_resettable$mem_M_bvalid,
       core_resettable$mem_M_rlast,
       core_resettable$mem_M_rready,
       core_resettable$mem_M_rvalid,
       core_resettable$mem_M_wlast,
       core_resettable$mem_M_wready,
       core_resettable$mem_M_wvalid,
       core_resettable$mmio_M_arlock,
       core_resettable$mmio_M_arready,
       core_resettable$mmio_M_arvalid,
       core_resettable$mmio_M_awlock,
       core_resettable$mmio_M_awready,
       core_resettable$mmio_M_awvalid,
       core_resettable$mmio_M_bready,
       core_resettable$mmio_M_bvalid,
       core_resettable$mmio_M_rlast,
       core_resettable$mmio_M_rready,
       core_resettable$mmio_M_rvalid,
       core_resettable$mmio_M_wlast,
       core_resettable$mmio_M_wready,
       core_resettable$mmio_M_wvalid,
       core_resettable$se_dmi_request_notFull,
       core_resettable$se_dmi_response_notEmpty,
       core_resettable$set_watch_tohost_watch_tohost;

  // ports of submodule host_cs
  wire [67 : 0] host_cs$g_verbosity_get;
  wire [64 : 0] host_cs$g_pc_trace_control_get, host_cs$g_watch_tohost_get;
  wire [63 : 0] host_cs$ma_tohost_value_tohost_value;
  wire [31 : 0] host_cs$se_control_status_request_enq_x,
		host_cs$se_control_status_response_first;
  wire host_cs$EN_g_pc_trace_control_get,
       host_cs$EN_g_verbosity_get,
       host_cs$EN_g_watch_tohost_get,
       host_cs$EN_ma_tohost_value,
       host_cs$EN_se_control_status_request_enq,
       host_cs$EN_se_control_status_response_deq,
       host_cs$RDY_g_pc_trace_control_get,
       host_cs$RDY_g_verbosity_get,
       host_cs$RDY_g_watch_tohost_get,
       host_cs$RDY_se_control_status_request_enq,
       host_cs$RDY_se_control_status_response_deq,
       host_cs$RDY_se_control_status_response_first,
       host_cs$se_control_status_request_notFull,
       host_cs$se_control_status_response_notEmpty;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_rl_send_tohost_value,
       CAN_FIRE_RL_rl_set_verbosity,
       CAN_FIRE_RL_rl_watch_thost,
       CAN_FIRE_cl_ndm_reset_request_deq,
       CAN_FIRE_cl_ndm_reset_response_enq,
       CAN_FIRE_dma_S_m_arvalid,
       CAN_FIRE_dma_S_m_awvalid,
       CAN_FIRE_dma_S_m_bready,
       CAN_FIRE_dma_S_m_rready,
       CAN_FIRE_dma_S_m_wvalid,
       CAN_FIRE_ext_interrupts,
       CAN_FIRE_fi_misc_enq,
       CAN_FIRE_fi_nmi_enq,
       CAN_FIRE_fo_misc_deq,
       CAN_FIRE_fo_tv_info_deq,
       CAN_FIRE_mem_M_m_arready,
       CAN_FIRE_mem_M_m_awready,
       CAN_FIRE_mem_M_m_bvalid,
       CAN_FIRE_mem_M_m_rvalid,
       CAN_FIRE_mem_M_m_wready,
       CAN_FIRE_mmio_M_m_arready,
       CAN_FIRE_mmio_M_m_awready,
       CAN_FIRE_mmio_M_m_bvalid,
       CAN_FIRE_mmio_M_m_rvalid,
       CAN_FIRE_mmio_M_m_wready,
       CAN_FIRE_se_control_status_request_enq,
       CAN_FIRE_se_control_status_response_deq,
       CAN_FIRE_se_dmi_request_enq,
       CAN_FIRE_se_dmi_response_deq,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_rl_send_tohost_value,
       WILL_FIRE_RL_rl_set_verbosity,
       WILL_FIRE_RL_rl_watch_thost,
       WILL_FIRE_cl_ndm_reset_request_deq,
       WILL_FIRE_cl_ndm_reset_response_enq,
       WILL_FIRE_dma_S_m_arvalid,
       WILL_FIRE_dma_S_m_awvalid,
       WILL_FIRE_dma_S_m_bready,
       WILL_FIRE_dma_S_m_rready,
       WILL_FIRE_dma_S_m_wvalid,
       WILL_FIRE_ext_interrupts,
       WILL_FIRE_fi_misc_enq,
       WILL_FIRE_fi_nmi_enq,
       WILL_FIRE_fo_misc_deq,
       WILL_FIRE_fo_tv_info_deq,
       WILL_FIRE_mem_M_m_arready,
       WILL_FIRE_mem_M_m_awready,
       WILL_FIRE_mem_M_m_bvalid,
       WILL_FIRE_mem_M_m_rvalid,
       WILL_FIRE_mem_M_m_wready,
       WILL_FIRE_mmio_M_m_arready,
       WILL_FIRE_mmio_M_m_awready,
       WILL_FIRE_mmio_M_m_bvalid,
       WILL_FIRE_mmio_M_m_rvalid,
       WILL_FIRE_mmio_M_m_wready,
       WILL_FIRE_se_control_status_request_enq,
       WILL_FIRE_se_control_status_response_deq,
       WILL_FIRE_se_dmi_request_enq,
       WILL_FIRE_se_dmi_response_deq;

  // value method mem_M_m_awvalid
  assign mem_M_awvalid = core_resettable$mem_M_awvalid ;

  // value method mem_M_m_awid
  assign mem_M_awid = core_resettable$mem_M_awid ;

  // value method mem_M_m_awaddr
  assign mem_M_awaddr = core_resettable$mem_M_awaddr ;

  // value method mem_M_m_awlen
  assign mem_M_awlen = core_resettable$mem_M_awlen ;

  // value method mem_M_m_awsize
  assign mem_M_awsize = core_resettable$mem_M_awsize ;

  // value method mem_M_m_awburst
  assign mem_M_awburst = core_resettable$mem_M_awburst ;

  // value method mem_M_m_awlock
  assign mem_M_awlock = core_resettable$mem_M_awlock ;

  // value method mem_M_m_awcache
  assign mem_M_awcache = core_resettable$mem_M_awcache ;

  // value method mem_M_m_awprot
  assign mem_M_awprot = core_resettable$mem_M_awprot ;

  // value method mem_M_m_awqos
  assign mem_M_awqos = core_resettable$mem_M_awqos ;

  // value method mem_M_m_awregion
  assign mem_M_awregion = core_resettable$mem_M_awregion ;

  // action method mem_M_m_awready
  assign CAN_FIRE_mem_M_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_M_m_awready = 1'd1 ;

  // value method mem_M_m_wvalid
  assign mem_M_wvalid = core_resettable$mem_M_wvalid ;

  // value method mem_M_m_wdata
  assign mem_M_wdata = core_resettable$mem_M_wdata ;

  // value method mem_M_m_wstrb
  assign mem_M_wstrb = core_resettable$mem_M_wstrb ;

  // value method mem_M_m_wlast
  assign mem_M_wlast = core_resettable$mem_M_wlast ;

  // action method mem_M_m_wready
  assign CAN_FIRE_mem_M_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_M_m_wready = 1'd1 ;

  // action method mem_M_m_bvalid
  assign CAN_FIRE_mem_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_M_m_bvalid = 1'd1 ;

  // value method mem_M_m_bready
  assign mem_M_bready = core_resettable$mem_M_bready ;

  // value method mem_M_m_arvalid
  assign mem_M_arvalid = core_resettable$mem_M_arvalid ;

  // value method mem_M_m_arid
  assign mem_M_arid = core_resettable$mem_M_arid ;

  // value method mem_M_m_araddr
  assign mem_M_araddr = core_resettable$mem_M_araddr ;

  // value method mem_M_m_arlen
  assign mem_M_arlen = core_resettable$mem_M_arlen ;

  // value method mem_M_m_arsize
  assign mem_M_arsize = core_resettable$mem_M_arsize ;

  // value method mem_M_m_arburst
  assign mem_M_arburst = core_resettable$mem_M_arburst ;

  // value method mem_M_m_arlock
  assign mem_M_arlock = core_resettable$mem_M_arlock ;

  // value method mem_M_m_arcache
  assign mem_M_arcache = core_resettable$mem_M_arcache ;

  // value method mem_M_m_arprot
  assign mem_M_arprot = core_resettable$mem_M_arprot ;

  // value method mem_M_m_arqos
  assign mem_M_arqos = core_resettable$mem_M_arqos ;

  // value method mem_M_m_arregion
  assign mem_M_arregion = core_resettable$mem_M_arregion ;

  // action method mem_M_m_arready
  assign CAN_FIRE_mem_M_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_M_m_arready = 1'd1 ;

  // action method mem_M_m_rvalid
  assign CAN_FIRE_mem_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_M_m_rvalid = 1'd1 ;

  // value method mem_M_m_rready
  assign mem_M_rready = core_resettable$mem_M_rready ;

  // value method mmio_M_m_awvalid
  assign mmio_M_awvalid = core_resettable$mmio_M_awvalid ;

  // value method mmio_M_m_awid
  assign mmio_M_awid = core_resettable$mmio_M_awid ;

  // value method mmio_M_m_awaddr
  assign mmio_M_awaddr = core_resettable$mmio_M_awaddr ;

  // value method mmio_M_m_awlen
  assign mmio_M_awlen = core_resettable$mmio_M_awlen ;

  // value method mmio_M_m_awsize
  assign mmio_M_awsize = core_resettable$mmio_M_awsize ;

  // value method mmio_M_m_awburst
  assign mmio_M_awburst = core_resettable$mmio_M_awburst ;

  // value method mmio_M_m_awlock
  assign mmio_M_awlock = core_resettable$mmio_M_awlock ;

  // value method mmio_M_m_awcache
  assign mmio_M_awcache = core_resettable$mmio_M_awcache ;

  // value method mmio_M_m_awprot
  assign mmio_M_awprot = core_resettable$mmio_M_awprot ;

  // value method mmio_M_m_awqos
  assign mmio_M_awqos = core_resettable$mmio_M_awqos ;

  // value method mmio_M_m_awregion
  assign mmio_M_awregion = core_resettable$mmio_M_awregion ;

  // action method mmio_M_m_awready
  assign CAN_FIRE_mmio_M_m_awready = 1'd1 ;
  assign WILL_FIRE_mmio_M_m_awready = 1'd1 ;

  // value method mmio_M_m_wvalid
  assign mmio_M_wvalid = core_resettable$mmio_M_wvalid ;

  // value method mmio_M_m_wdata
  assign mmio_M_wdata = core_resettable$mmio_M_wdata ;

  // value method mmio_M_m_wstrb
  assign mmio_M_wstrb = core_resettable$mmio_M_wstrb ;

  // value method mmio_M_m_wlast
  assign mmio_M_wlast = core_resettable$mmio_M_wlast ;

  // action method mmio_M_m_wready
  assign CAN_FIRE_mmio_M_m_wready = 1'd1 ;
  assign WILL_FIRE_mmio_M_m_wready = 1'd1 ;

  // action method mmio_M_m_bvalid
  assign CAN_FIRE_mmio_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mmio_M_m_bvalid = 1'd1 ;

  // value method mmio_M_m_bready
  assign mmio_M_bready = core_resettable$mmio_M_bready ;

  // value method mmio_M_m_arvalid
  assign mmio_M_arvalid = core_resettable$mmio_M_arvalid ;

  // value method mmio_M_m_arid
  assign mmio_M_arid = core_resettable$mmio_M_arid ;

  // value method mmio_M_m_araddr
  assign mmio_M_araddr = core_resettable$mmio_M_araddr ;

  // value method mmio_M_m_arlen
  assign mmio_M_arlen = core_resettable$mmio_M_arlen ;

  // value method mmio_M_m_arsize
  assign mmio_M_arsize = core_resettable$mmio_M_arsize ;

  // value method mmio_M_m_arburst
  assign mmio_M_arburst = core_resettable$mmio_M_arburst ;

  // value method mmio_M_m_arlock
  assign mmio_M_arlock = core_resettable$mmio_M_arlock ;

  // value method mmio_M_m_arcache
  assign mmio_M_arcache = core_resettable$mmio_M_arcache ;

  // value method mmio_M_m_arprot
  assign mmio_M_arprot = core_resettable$mmio_M_arprot ;

  // value method mmio_M_m_arqos
  assign mmio_M_arqos = core_resettable$mmio_M_arqos ;

  // value method mmio_M_m_arregion
  assign mmio_M_arregion = core_resettable$mmio_M_arregion ;

  // action method mmio_M_m_arready
  assign CAN_FIRE_mmio_M_m_arready = 1'd1 ;
  assign WILL_FIRE_mmio_M_m_arready = 1'd1 ;

  // action method mmio_M_m_rvalid
  assign CAN_FIRE_mmio_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mmio_M_m_rvalid = 1'd1 ;

  // value method mmio_M_m_rready
  assign mmio_M_rready = core_resettable$mmio_M_rready ;

  // action method dma_S_m_awvalid
  assign CAN_FIRE_dma_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_S_m_awvalid = 1'd1 ;

  // value method dma_S_m_awready
  assign dma_S_awready = core_resettable$dma_S_awready ;

  // action method dma_S_m_wvalid
  assign CAN_FIRE_dma_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_S_m_wvalid = 1'd1 ;

  // value method dma_S_m_wready
  assign dma_S_wready = core_resettable$dma_S_wready ;

  // value method dma_S_m_bvalid
  assign dma_S_bvalid = core_resettable$dma_S_bvalid ;

  // value method dma_S_m_bid
  assign dma_S_bid = core_resettable$dma_S_bid ;

  // value method dma_S_m_bresp
  assign dma_S_bresp = core_resettable$dma_S_bresp ;

  // action method dma_S_m_bready
  assign CAN_FIRE_dma_S_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_S_m_bready = 1'd1 ;

  // action method dma_S_m_arvalid
  assign CAN_FIRE_dma_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_S_m_arvalid = 1'd1 ;

  // value method dma_S_m_arready
  assign dma_S_arready = core_resettable$dma_S_arready ;

  // value method dma_S_m_rvalid
  assign dma_S_rvalid = core_resettable$dma_S_rvalid ;

  // value method dma_S_m_rid
  assign dma_S_rid = core_resettable$dma_S_rid ;

  // value method dma_S_m_rdata
  assign dma_S_rdata = core_resettable$dma_S_rdata ;

  // value method dma_S_m_rresp
  assign dma_S_rresp = core_resettable$dma_S_rresp ;

  // value method dma_S_m_rlast
  assign dma_S_rlast = core_resettable$dma_S_rlast ;

  // action method dma_S_m_rready
  assign CAN_FIRE_dma_S_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_S_m_rready = 1'd1 ;

  // action method ext_interrupts
  assign RDY_ext_interrupts = 1'd1 ;
  assign CAN_FIRE_ext_interrupts = 1'd1 ;
  assign WILL_FIRE_ext_interrupts = EN_ext_interrupts ;

  // action method fi_nmi_enq
  assign RDY_fi_nmi_enq = core_resettable$RDY_fi_nmi_enq ;
  assign CAN_FIRE_fi_nmi_enq = core_resettable$RDY_fi_nmi_enq ;
  assign WILL_FIRE_fi_nmi_enq = EN_fi_nmi_enq ;

  // value method fi_nmi_notFull
  assign fi_nmi_notFull = core_resettable$fi_nmi_notFull ;
  assign RDY_fi_nmi_notFull = 1'd1 ;

  // value method fo_misc_first
  assign fo_misc_first = core_resettable$fo_misc_first ;
  assign RDY_fo_misc_first = core_resettable$RDY_fo_misc_first ;

  // action method fo_misc_deq
  assign RDY_fo_misc_deq = core_resettable$RDY_fo_misc_deq ;
  assign CAN_FIRE_fo_misc_deq = core_resettable$RDY_fo_misc_deq ;
  assign WILL_FIRE_fo_misc_deq = EN_fo_misc_deq ;

  // value method fo_misc_notEmpty
  assign fo_misc_notEmpty = core_resettable$fo_misc_notEmpty ;
  assign RDY_fo_misc_notEmpty = 1'd1 ;

  // action method fi_misc_enq
  assign RDY_fi_misc_enq = core_resettable$RDY_fi_misc_enq ;
  assign CAN_FIRE_fi_misc_enq = core_resettable$RDY_fi_misc_enq ;
  assign WILL_FIRE_fi_misc_enq = EN_fi_misc_enq ;

  // value method fi_misc_notFull
  assign fi_misc_notFull = core_resettable$fi_misc_notFull ;
  assign RDY_fi_misc_notFull = 1'd1 ;

  // value method fo_tv_info_first
  assign fo_tv_info_first = core_resettable$fo_tv_info_first ;
  assign RDY_fo_tv_info_first = core_resettable$RDY_fo_tv_info_first ;

  // action method fo_tv_info_deq
  assign RDY_fo_tv_info_deq = core_resettable$RDY_fo_tv_info_deq ;
  assign CAN_FIRE_fo_tv_info_deq = core_resettable$RDY_fo_tv_info_deq ;
  assign WILL_FIRE_fo_tv_info_deq = EN_fo_tv_info_deq ;

  // value method fo_tv_info_notEmpty
  assign fo_tv_info_notEmpty = core_resettable$fo_tv_info_notEmpty ;
  assign RDY_fo_tv_info_notEmpty = 1'd1 ;

  // action method se_dmi_request_enq
  assign RDY_se_dmi_request_enq = core_resettable$RDY_se_dmi_request_enq ;
  assign CAN_FIRE_se_dmi_request_enq =
	     core_resettable$RDY_se_dmi_request_enq ;
  assign WILL_FIRE_se_dmi_request_enq = EN_se_dmi_request_enq ;

  // value method se_dmi_request_notFull
  assign se_dmi_request_notFull = core_resettable$se_dmi_request_notFull ;
  assign RDY_se_dmi_request_notFull = 1'd1 ;

  // value method se_dmi_response_first
  assign se_dmi_response_first = core_resettable$se_dmi_response_first ;
  assign RDY_se_dmi_response_first =
	     core_resettable$RDY_se_dmi_response_first ;

  // action method se_dmi_response_deq
  assign RDY_se_dmi_response_deq = core_resettable$RDY_se_dmi_response_deq ;
  assign CAN_FIRE_se_dmi_response_deq =
	     core_resettable$RDY_se_dmi_response_deq ;
  assign WILL_FIRE_se_dmi_response_deq = EN_se_dmi_response_deq ;

  // value method se_dmi_response_notEmpty
  assign se_dmi_response_notEmpty = core_resettable$se_dmi_response_notEmpty ;
  assign RDY_se_dmi_response_notEmpty = 1'd1 ;

  // value method cl_ndm_reset_request_first
  assign RDY_cl_ndm_reset_request_first =
	     core_resettable$RDY_cl_ndm_reset_request_first ;

  // action method cl_ndm_reset_request_deq
  assign RDY_cl_ndm_reset_request_deq =
	     core_resettable$RDY_cl_ndm_reset_request_deq ;
  assign CAN_FIRE_cl_ndm_reset_request_deq =
	     core_resettable$RDY_cl_ndm_reset_request_deq ;
  assign WILL_FIRE_cl_ndm_reset_request_deq = EN_cl_ndm_reset_request_deq ;

  // value method cl_ndm_reset_request_notEmpty
  assign cl_ndm_reset_request_notEmpty =
	     core_resettable$cl_ndm_reset_request_notEmpty ;
  assign RDY_cl_ndm_reset_request_notEmpty = 1'd1 ;

  // action method cl_ndm_reset_response_enq
  assign RDY_cl_ndm_reset_response_enq =
	     core_resettable$RDY_cl_ndm_reset_response_enq ;
  assign CAN_FIRE_cl_ndm_reset_response_enq =
	     core_resettable$RDY_cl_ndm_reset_response_enq ;
  assign WILL_FIRE_cl_ndm_reset_response_enq = EN_cl_ndm_reset_response_enq ;

  // value method cl_ndm_reset_response_notFull
  assign cl_ndm_reset_response_notFull =
	     core_resettable$cl_ndm_reset_response_notFull ;
  assign RDY_cl_ndm_reset_response_notFull = 1'd1 ;

  // action method se_control_status_request_enq
  assign RDY_se_control_status_request_enq =
	     host_cs$RDY_se_control_status_request_enq ;
  assign CAN_FIRE_se_control_status_request_enq =
	     host_cs$RDY_se_control_status_request_enq ;
  assign WILL_FIRE_se_control_status_request_enq =
	     EN_se_control_status_request_enq ;

  // value method se_control_status_request_notFull
  assign se_control_status_request_notFull =
	     host_cs$se_control_status_request_notFull ;
  assign RDY_se_control_status_request_notFull = 1'd1 ;

  // value method se_control_status_response_first
  assign se_control_status_response_first =
	     host_cs$se_control_status_response_first ;
  assign RDY_se_control_status_response_first =
	     host_cs$RDY_se_control_status_response_first ;

  // action method se_control_status_response_deq
  assign RDY_se_control_status_response_deq =
	     host_cs$RDY_se_control_status_response_deq ;
  assign CAN_FIRE_se_control_status_response_deq =
	     host_cs$RDY_se_control_status_response_deq ;
  assign WILL_FIRE_se_control_status_response_deq =
	     EN_se_control_status_response_deq ;

  // value method se_control_status_response_notEmpty
  assign se_control_status_response_notEmpty =
	     host_cs$se_control_status_response_notEmpty ;
  assign RDY_se_control_status_response_notEmpty = 1'd1 ;

  // submodule core_resettable
  mkAWSteria_Core_Resettable core_resettable(.CLK(CLK),
					     .RST_N(RST_N),
					     .dma_S_araddr(core_resettable$dma_S_araddr),
					     .dma_S_arburst(core_resettable$dma_S_arburst),
					     .dma_S_arcache(core_resettable$dma_S_arcache),
					     .dma_S_arid(core_resettable$dma_S_arid),
					     .dma_S_arlen(core_resettable$dma_S_arlen),
					     .dma_S_arlock(core_resettable$dma_S_arlock),
					     .dma_S_arprot(core_resettable$dma_S_arprot),
					     .dma_S_arqos(core_resettable$dma_S_arqos),
					     .dma_S_arregion(core_resettable$dma_S_arregion),
					     .dma_S_arsize(core_resettable$dma_S_arsize),
					     .dma_S_arvalid(core_resettable$dma_S_arvalid),
					     .dma_S_awaddr(core_resettable$dma_S_awaddr),
					     .dma_S_awburst(core_resettable$dma_S_awburst),
					     .dma_S_awcache(core_resettable$dma_S_awcache),
					     .dma_S_awid(core_resettable$dma_S_awid),
					     .dma_S_awlen(core_resettable$dma_S_awlen),
					     .dma_S_awlock(core_resettable$dma_S_awlock),
					     .dma_S_awprot(core_resettable$dma_S_awprot),
					     .dma_S_awqos(core_resettable$dma_S_awqos),
					     .dma_S_awregion(core_resettable$dma_S_awregion),
					     .dma_S_awsize(core_resettable$dma_S_awsize),
					     .dma_S_awvalid(core_resettable$dma_S_awvalid),
					     .dma_S_bready(core_resettable$dma_S_bready),
					     .dma_S_rready(core_resettable$dma_S_rready),
					     .dma_S_wdata(core_resettable$dma_S_wdata),
					     .dma_S_wlast(core_resettable$dma_S_wlast),
					     .dma_S_wstrb(core_resettable$dma_S_wstrb),
					     .dma_S_wvalid(core_resettable$dma_S_wvalid),
					     .ext_interrupts_x(core_resettable$ext_interrupts_x),
					     .fi_misc_enq_x(core_resettable$fi_misc_enq_x),
					     .fi_nmi_enq_x(core_resettable$fi_nmi_enq_x),
					     .mem_M_arready(core_resettable$mem_M_arready),
					     .mem_M_awready(core_resettable$mem_M_awready),
					     .mem_M_bid(core_resettable$mem_M_bid),
					     .mem_M_bresp(core_resettable$mem_M_bresp),
					     .mem_M_bvalid(core_resettable$mem_M_bvalid),
					     .mem_M_rdata(core_resettable$mem_M_rdata),
					     .mem_M_rid(core_resettable$mem_M_rid),
					     .mem_M_rlast(core_resettable$mem_M_rlast),
					     .mem_M_rresp(core_resettable$mem_M_rresp),
					     .mem_M_rvalid(core_resettable$mem_M_rvalid),
					     .mem_M_wready(core_resettable$mem_M_wready),
					     .mmio_M_arready(core_resettable$mmio_M_arready),
					     .mmio_M_awready(core_resettable$mmio_M_awready),
					     .mmio_M_bid(core_resettable$mmio_M_bid),
					     .mmio_M_bresp(core_resettable$mmio_M_bresp),
					     .mmio_M_bvalid(core_resettable$mmio_M_bvalid),
					     .mmio_M_rdata(core_resettable$mmio_M_rdata),
					     .mmio_M_rid(core_resettable$mmio_M_rid),
					     .mmio_M_rlast(core_resettable$mmio_M_rlast),
					     .mmio_M_rresp(core_resettable$mmio_M_rresp),
					     .mmio_M_rvalid(core_resettable$mmio_M_rvalid),
					     .mmio_M_wready(core_resettable$mmio_M_wready),
					     .p_pc_trace_control_put(core_resettable$p_pc_trace_control_put),
					     .se_dmi_request_enq_x(core_resettable$se_dmi_request_enq_x),
					     .set_verbosity_logdelay(core_resettable$set_verbosity_logdelay),
					     .set_verbosity_verbosity(core_resettable$set_verbosity_verbosity),
					     .set_watch_tohost_tohost_addr(core_resettable$set_watch_tohost_tohost_addr),
					     .set_watch_tohost_watch_tohost(core_resettable$set_watch_tohost_watch_tohost),
					     .EN_ext_interrupts(core_resettable$EN_ext_interrupts),
					     .EN_fi_nmi_enq(core_resettable$EN_fi_nmi_enq),
					     .EN_fo_misc_deq(core_resettable$EN_fo_misc_deq),
					     .EN_fi_misc_enq(core_resettable$EN_fi_misc_enq),
					     .EN_fo_tv_info_deq(core_resettable$EN_fo_tv_info_deq),
					     .EN_se_dmi_request_enq(core_resettable$EN_se_dmi_request_enq),
					     .EN_se_dmi_response_deq(core_resettable$EN_se_dmi_response_deq),
					     .EN_cl_ndm_reset_request_deq(core_resettable$EN_cl_ndm_reset_request_deq),
					     .EN_cl_ndm_reset_response_enq(core_resettable$EN_cl_ndm_reset_response_enq),
					     .EN_p_pc_trace_control_put(core_resettable$EN_p_pc_trace_control_put),
					     .EN_set_verbosity(core_resettable$EN_set_verbosity),
					     .EN_set_watch_tohost(core_resettable$EN_set_watch_tohost),
					     .mem_M_awvalid(core_resettable$mem_M_awvalid),
					     .mem_M_awid(core_resettable$mem_M_awid),
					     .mem_M_awaddr(core_resettable$mem_M_awaddr),
					     .mem_M_awlen(core_resettable$mem_M_awlen),
					     .mem_M_awsize(core_resettable$mem_M_awsize),
					     .mem_M_awburst(core_resettable$mem_M_awburst),
					     .mem_M_awlock(core_resettable$mem_M_awlock),
					     .mem_M_awcache(core_resettable$mem_M_awcache),
					     .mem_M_awprot(core_resettable$mem_M_awprot),
					     .mem_M_awqos(core_resettable$mem_M_awqos),
					     .mem_M_awregion(core_resettable$mem_M_awregion),
					     .mem_M_wvalid(core_resettable$mem_M_wvalid),
					     .mem_M_wdata(core_resettable$mem_M_wdata),
					     .mem_M_wstrb(core_resettable$mem_M_wstrb),
					     .mem_M_wlast(core_resettable$mem_M_wlast),
					     .mem_M_bready(core_resettable$mem_M_bready),
					     .mem_M_arvalid(core_resettable$mem_M_arvalid),
					     .mem_M_arid(core_resettable$mem_M_arid),
					     .mem_M_araddr(core_resettable$mem_M_araddr),
					     .mem_M_arlen(core_resettable$mem_M_arlen),
					     .mem_M_arsize(core_resettable$mem_M_arsize),
					     .mem_M_arburst(core_resettable$mem_M_arburst),
					     .mem_M_arlock(core_resettable$mem_M_arlock),
					     .mem_M_arcache(core_resettable$mem_M_arcache),
					     .mem_M_arprot(core_resettable$mem_M_arprot),
					     .mem_M_arqos(core_resettable$mem_M_arqos),
					     .mem_M_arregion(core_resettable$mem_M_arregion),
					     .mem_M_rready(core_resettable$mem_M_rready),
					     .mmio_M_awvalid(core_resettable$mmio_M_awvalid),
					     .mmio_M_awid(core_resettable$mmio_M_awid),
					     .mmio_M_awaddr(core_resettable$mmio_M_awaddr),
					     .mmio_M_awlen(core_resettable$mmio_M_awlen),
					     .mmio_M_awsize(core_resettable$mmio_M_awsize),
					     .mmio_M_awburst(core_resettable$mmio_M_awburst),
					     .mmio_M_awlock(core_resettable$mmio_M_awlock),
					     .mmio_M_awcache(core_resettable$mmio_M_awcache),
					     .mmio_M_awprot(core_resettable$mmio_M_awprot),
					     .mmio_M_awqos(core_resettable$mmio_M_awqos),
					     .mmio_M_awregion(core_resettable$mmio_M_awregion),
					     .mmio_M_wvalid(core_resettable$mmio_M_wvalid),
					     .mmio_M_wdata(core_resettable$mmio_M_wdata),
					     .mmio_M_wstrb(core_resettable$mmio_M_wstrb),
					     .mmio_M_wlast(core_resettable$mmio_M_wlast),
					     .mmio_M_bready(core_resettable$mmio_M_bready),
					     .mmio_M_arvalid(core_resettable$mmio_M_arvalid),
					     .mmio_M_arid(core_resettable$mmio_M_arid),
					     .mmio_M_araddr(core_resettable$mmio_M_araddr),
					     .mmio_M_arlen(core_resettable$mmio_M_arlen),
					     .mmio_M_arsize(core_resettable$mmio_M_arsize),
					     .mmio_M_arburst(core_resettable$mmio_M_arburst),
					     .mmio_M_arlock(core_resettable$mmio_M_arlock),
					     .mmio_M_arcache(core_resettable$mmio_M_arcache),
					     .mmio_M_arprot(core_resettable$mmio_M_arprot),
					     .mmio_M_arqos(core_resettable$mmio_M_arqos),
					     .mmio_M_arregion(core_resettable$mmio_M_arregion),
					     .mmio_M_rready(core_resettable$mmio_M_rready),
					     .dma_S_awready(core_resettable$dma_S_awready),
					     .dma_S_wready(core_resettable$dma_S_wready),
					     .dma_S_bvalid(core_resettable$dma_S_bvalid),
					     .dma_S_bid(core_resettable$dma_S_bid),
					     .dma_S_bresp(core_resettable$dma_S_bresp),
					     .dma_S_arready(core_resettable$dma_S_arready),
					     .dma_S_rvalid(core_resettable$dma_S_rvalid),
					     .dma_S_rid(core_resettable$dma_S_rid),
					     .dma_S_rdata(core_resettable$dma_S_rdata),
					     .dma_S_rresp(core_resettable$dma_S_rresp),
					     .dma_S_rlast(core_resettable$dma_S_rlast),
					     .RDY_ext_interrupts(),
					     .RDY_fi_nmi_enq(core_resettable$RDY_fi_nmi_enq),
					     .fi_nmi_notFull(core_resettable$fi_nmi_notFull),
					     .RDY_fi_nmi_notFull(),
					     .fo_misc_first(core_resettable$fo_misc_first),
					     .RDY_fo_misc_first(core_resettable$RDY_fo_misc_first),
					     .RDY_fo_misc_deq(core_resettable$RDY_fo_misc_deq),
					     .fo_misc_notEmpty(core_resettable$fo_misc_notEmpty),
					     .RDY_fo_misc_notEmpty(),
					     .RDY_fi_misc_enq(core_resettable$RDY_fi_misc_enq),
					     .fi_misc_notFull(core_resettable$fi_misc_notFull),
					     .RDY_fi_misc_notFull(),
					     .fo_tv_info_first(core_resettable$fo_tv_info_first),
					     .RDY_fo_tv_info_first(core_resettable$RDY_fo_tv_info_first),
					     .RDY_fo_tv_info_deq(core_resettable$RDY_fo_tv_info_deq),
					     .fo_tv_info_notEmpty(core_resettable$fo_tv_info_notEmpty),
					     .RDY_fo_tv_info_notEmpty(),
					     .RDY_se_dmi_request_enq(core_resettable$RDY_se_dmi_request_enq),
					     .se_dmi_request_notFull(core_resettable$se_dmi_request_notFull),
					     .RDY_se_dmi_request_notFull(),
					     .se_dmi_response_first(core_resettable$se_dmi_response_first),
					     .RDY_se_dmi_response_first(core_resettable$RDY_se_dmi_response_first),
					     .RDY_se_dmi_response_deq(core_resettable$RDY_se_dmi_response_deq),
					     .se_dmi_response_notEmpty(core_resettable$se_dmi_response_notEmpty),
					     .RDY_se_dmi_response_notEmpty(),
					     .RDY_cl_ndm_reset_request_first(core_resettable$RDY_cl_ndm_reset_request_first),
					     .RDY_cl_ndm_reset_request_deq(core_resettable$RDY_cl_ndm_reset_request_deq),
					     .cl_ndm_reset_request_notEmpty(core_resettable$cl_ndm_reset_request_notEmpty),
					     .RDY_cl_ndm_reset_request_notEmpty(),
					     .RDY_cl_ndm_reset_response_enq(core_resettable$RDY_cl_ndm_reset_response_enq),
					     .cl_ndm_reset_response_notFull(core_resettable$cl_ndm_reset_response_notFull),
					     .RDY_cl_ndm_reset_response_notFull(),
					     .RDY_p_pc_trace_control_put(),
					     .RDY_set_verbosity(),
					     .RDY_set_watch_tohost(),
					     .mv_tohost_value(core_resettable$mv_tohost_value),
					     .RDY_mv_tohost_value());

  // submodule host_cs
  mkHost_Control_Status host_cs(.CLK(CLK),
				.RST_N(RST_N),
				.ma_tohost_value_tohost_value(host_cs$ma_tohost_value_tohost_value),
				.se_control_status_request_enq_x(host_cs$se_control_status_request_enq_x),
				.EN_se_control_status_request_enq(host_cs$EN_se_control_status_request_enq),
				.EN_se_control_status_response_deq(host_cs$EN_se_control_status_response_deq),
				.EN_g_watch_tohost_get(host_cs$EN_g_watch_tohost_get),
				.EN_g_verbosity_get(host_cs$EN_g_verbosity_get),
				.EN_g_pc_trace_control_get(host_cs$EN_g_pc_trace_control_get),
				.EN_ma_tohost_value(host_cs$EN_ma_tohost_value),
				.RDY_se_control_status_request_enq(host_cs$RDY_se_control_status_request_enq),
				.se_control_status_request_notFull(host_cs$se_control_status_request_notFull),
				.RDY_se_control_status_request_notFull(),
				.se_control_status_response_first(host_cs$se_control_status_response_first),
				.RDY_se_control_status_response_first(host_cs$RDY_se_control_status_response_first),
				.RDY_se_control_status_response_deq(host_cs$RDY_se_control_status_response_deq),
				.se_control_status_response_notEmpty(host_cs$se_control_status_response_notEmpty),
				.RDY_se_control_status_response_notEmpty(),
				.mv_assert_core_reset(),
				.RDY_mv_assert_core_reset(),
				.g_watch_tohost_get(host_cs$g_watch_tohost_get),
				.RDY_g_watch_tohost_get(host_cs$RDY_g_watch_tohost_get),
				.g_verbosity_get(host_cs$g_verbosity_get),
				.RDY_g_verbosity_get(host_cs$RDY_g_verbosity_get),
				.g_pc_trace_control_get(host_cs$g_pc_trace_control_get),
				.RDY_g_pc_trace_control_get(host_cs$RDY_g_pc_trace_control_get),
				.RDY_ma_tohost_value());

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut = host_cs$RDY_g_pc_trace_control_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     host_cs$RDY_g_pc_trace_control_get ;

  // rule RL_rl_set_verbosity
  assign CAN_FIRE_RL_rl_set_verbosity = host_cs$RDY_g_verbosity_get ;
  assign WILL_FIRE_RL_rl_set_verbosity = host_cs$RDY_g_verbosity_get ;

  // rule RL_rl_send_tohost_value
  assign CAN_FIRE_RL_rl_send_tohost_value = 1'd1 ;
  assign WILL_FIRE_RL_rl_send_tohost_value = 1'd1 ;

  // rule RL_rl_watch_thost
  assign CAN_FIRE_RL_rl_watch_thost = host_cs$RDY_g_watch_tohost_get ;
  assign WILL_FIRE_RL_rl_watch_thost = host_cs$RDY_g_watch_tohost_get ;

  // submodule core_resettable
  assign core_resettable$dma_S_araddr = dma_S_araddr ;
  assign core_resettable$dma_S_arburst = dma_S_arburst ;
  assign core_resettable$dma_S_arcache = dma_S_arcache ;
  assign core_resettable$dma_S_arid = dma_S_arid ;
  assign core_resettable$dma_S_arlen = dma_S_arlen ;
  assign core_resettable$dma_S_arlock = dma_S_arlock ;
  assign core_resettable$dma_S_arprot = dma_S_arprot ;
  assign core_resettable$dma_S_arqos = dma_S_arqos ;
  assign core_resettable$dma_S_arregion = dma_S_arregion ;
  assign core_resettable$dma_S_arsize = dma_S_arsize ;
  assign core_resettable$dma_S_arvalid = dma_S_arvalid ;
  assign core_resettable$dma_S_awaddr = dma_S_awaddr ;
  assign core_resettable$dma_S_awburst = dma_S_awburst ;
  assign core_resettable$dma_S_awcache = dma_S_awcache ;
  assign core_resettable$dma_S_awid = dma_S_awid ;
  assign core_resettable$dma_S_awlen = dma_S_awlen ;
  assign core_resettable$dma_S_awlock = dma_S_awlock ;
  assign core_resettable$dma_S_awprot = dma_S_awprot ;
  assign core_resettable$dma_S_awqos = dma_S_awqos ;
  assign core_resettable$dma_S_awregion = dma_S_awregion ;
  assign core_resettable$dma_S_awsize = dma_S_awsize ;
  assign core_resettable$dma_S_awvalid = dma_S_awvalid ;
  assign core_resettable$dma_S_bready = dma_S_bready ;
  assign core_resettable$dma_S_rready = dma_S_rready ;
  assign core_resettable$dma_S_wdata = dma_S_wdata ;
  assign core_resettable$dma_S_wlast = dma_S_wlast ;
  assign core_resettable$dma_S_wstrb = dma_S_wstrb ;
  assign core_resettable$dma_S_wvalid = dma_S_wvalid ;
  assign core_resettable$ext_interrupts_x = ext_interrupts_x ;
  assign core_resettable$fi_misc_enq_x = fi_misc_enq_x ;
  assign core_resettable$fi_nmi_enq_x = fi_nmi_enq_x ;
  assign core_resettable$mem_M_arready = mem_M_arready ;
  assign core_resettable$mem_M_awready = mem_M_awready ;
  assign core_resettable$mem_M_bid = mem_M_bid ;
  assign core_resettable$mem_M_bresp = mem_M_bresp ;
  assign core_resettable$mem_M_bvalid = mem_M_bvalid ;
  assign core_resettable$mem_M_rdata = mem_M_rdata ;
  assign core_resettable$mem_M_rid = mem_M_rid ;
  assign core_resettable$mem_M_rlast = mem_M_rlast ;
  assign core_resettable$mem_M_rresp = mem_M_rresp ;
  assign core_resettable$mem_M_rvalid = mem_M_rvalid ;
  assign core_resettable$mem_M_wready = mem_M_wready ;
  assign core_resettable$mmio_M_arready = mmio_M_arready ;
  assign core_resettable$mmio_M_awready = mmio_M_awready ;
  assign core_resettable$mmio_M_bid = mmio_M_bid ;
  assign core_resettable$mmio_M_bresp = mmio_M_bresp ;
  assign core_resettable$mmio_M_bvalid = mmio_M_bvalid ;
  assign core_resettable$mmio_M_rdata = mmio_M_rdata ;
  assign core_resettable$mmio_M_rid = mmio_M_rid ;
  assign core_resettable$mmio_M_rlast = mmio_M_rlast ;
  assign core_resettable$mmio_M_rresp = mmio_M_rresp ;
  assign core_resettable$mmio_M_rvalid = mmio_M_rvalid ;
  assign core_resettable$mmio_M_wready = mmio_M_wready ;
  assign core_resettable$p_pc_trace_control_put =
	     host_cs$g_pc_trace_control_get ;
  assign core_resettable$se_dmi_request_enq_x = se_dmi_request_enq_x ;
  assign core_resettable$set_verbosity_logdelay =
	     host_cs$g_verbosity_get[63:0] ;
  assign core_resettable$set_verbosity_verbosity =
	     host_cs$g_verbosity_get[67:64] ;
  assign core_resettable$set_watch_tohost_tohost_addr =
	     host_cs$g_watch_tohost_get[63:0] ;
  assign core_resettable$set_watch_tohost_watch_tohost =
	     host_cs$g_watch_tohost_get[64] ;
  assign core_resettable$EN_ext_interrupts = EN_ext_interrupts ;
  assign core_resettable$EN_fi_nmi_enq = EN_fi_nmi_enq ;
  assign core_resettable$EN_fo_misc_deq = EN_fo_misc_deq ;
  assign core_resettable$EN_fi_misc_enq = EN_fi_misc_enq ;
  assign core_resettable$EN_fo_tv_info_deq = EN_fo_tv_info_deq ;
  assign core_resettable$EN_se_dmi_request_enq = EN_se_dmi_request_enq ;
  assign core_resettable$EN_se_dmi_response_deq = EN_se_dmi_response_deq ;
  assign core_resettable$EN_cl_ndm_reset_request_deq =
	     EN_cl_ndm_reset_request_deq ;
  assign core_resettable$EN_cl_ndm_reset_response_enq =
	     EN_cl_ndm_reset_response_enq ;
  assign core_resettable$EN_p_pc_trace_control_put =
	     host_cs$RDY_g_pc_trace_control_get ;
  assign core_resettable$EN_set_verbosity = host_cs$RDY_g_verbosity_get ;
  assign core_resettable$EN_set_watch_tohost =
	     host_cs$RDY_g_watch_tohost_get ;

  // submodule host_cs
  assign host_cs$ma_tohost_value_tohost_value =
	     core_resettable$mv_tohost_value ;
  assign host_cs$se_control_status_request_enq_x =
	     se_control_status_request_enq_x ;
  assign host_cs$EN_se_control_status_request_enq =
	     EN_se_control_status_request_enq ;
  assign host_cs$EN_se_control_status_response_deq =
	     EN_se_control_status_response_deq ;
  assign host_cs$EN_g_watch_tohost_get = host_cs$RDY_g_watch_tohost_get ;
  assign host_cs$EN_g_verbosity_get = host_cs$RDY_g_verbosity_get ;
  assign host_cs$EN_g_pc_trace_control_get =
	     host_cs$RDY_g_pc_trace_control_get ;
  assign host_cs$EN_ma_tohost_value = 1'd1 ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (host_cs$RDY_g_verbosity_get)
	$display("AWSteria_Core: setting verbosity %0d log_delay %0d",
		 host_cs$g_verbosity_get[67:64],
		 host_cs$g_verbosity_get[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (host_cs$RDY_g_watch_tohost_get)
	$display("AWSteria_Core: setting tohost watch %0d addr %0h",
		 host_cs$g_watch_tohost_get[64],
		 host_cs$g_watch_tohost_get[63:0]);
  end
  // synopsys translate_on
endmodule  // mkAWSteria_Core_Single_Clock

