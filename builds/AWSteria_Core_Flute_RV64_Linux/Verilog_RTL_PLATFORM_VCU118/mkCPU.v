//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O    16 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O    16 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// mem_master_awvalid             O     1
// mem_master_awid                O    16 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O   512 reg
// mem_master_wstrb               O    64 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_arid                O    16 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1
// dma_server_awready             O     1 reg
// dma_server_wready              O     1 reg
// dma_server_bvalid              O     1 reg
// dma_server_bid                 O    16 reg
// dma_server_bresp               O     2 reg
// dma_server_arready             O     1 reg
// dma_server_rvalid              O     1 reg
// dma_server_rid                 O    16 reg
// dma_server_rdata               O   512 reg
// dma_server_rresp               O     2 reg
// dma_server_rlast               O     1 reg
// RDY_hart0_server_run_halt_request_put  O     1 reg
// hart0_server_run_halt_response_get  O     1 reg
// RDY_hart0_server_run_halt_response_get  O     1 reg
// RDY_hart0_put_other_req_put    O     1 const
// RDY_hart0_gpr_mem_server_request_put  O     1 reg
// hart0_gpr_mem_server_response_get  O    65 reg
// RDY_hart0_gpr_mem_server_response_get  O     1 reg
// RDY_hart0_fpr_mem_server_request_put  O     1 reg
// hart0_fpr_mem_server_response_get  O    65 reg
// RDY_hart0_fpr_mem_server_response_get  O     1 reg
// RDY_hart0_csr_mem_server_request_put  O     1 reg
// hart0_csr_mem_server_response_get  O    65 reg
// RDY_hart0_csr_mem_server_response_get  O     1 reg
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I    16 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I    16 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I    16 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I    16 reg
// mem_master_rdata               I   512 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// dma_server_awvalid             I     1
// dma_server_awid                I    16 reg
// dma_server_awaddr              I    64 reg
// dma_server_awlen               I     8 reg
// dma_server_awsize              I     3 reg
// dma_server_awburst             I     2 reg
// dma_server_awlock              I     1 reg
// dma_server_awcache             I     4 reg
// dma_server_awprot              I     3 reg
// dma_server_awqos               I     4 reg
// dma_server_awregion            I     4 reg
// dma_server_wvalid              I     1
// dma_server_wdata               I   512 reg
// dma_server_wstrb               I    64 reg
// dma_server_wlast               I     1 reg
// dma_server_bready              I     1
// dma_server_arvalid             I     1
// dma_server_arid                I    16 reg
// dma_server_araddr              I    64 reg
// dma_server_arlen               I     8 reg
// dma_server_arsize              I     3 reg
// dma_server_arburst             I     2 reg
// dma_server_arlock              I     1 reg
// dma_server_arcache             I     4 reg
// dma_server_arprot              I     3 reg
// dma_server_arqos               I     4 reg
// dma_server_arregion            I     4 reg
// dma_server_rready              I     1
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// ma_set_csr_time_t              I    64 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// hart0_server_run_halt_request_put  I     1 reg
// hart0_put_other_req_put        I     4
// hart0_gpr_mem_server_request_put  I    70 reg
// hart0_fpr_mem_server_request_put  I    70 reg
// hart0_csr_mem_server_request_put  I    77 reg
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_run_halt_request_put  I     1
// EN_hart0_put_other_req_put     I     1
// EN_hart0_gpr_mem_server_request_put  I     1
// EN_hart0_fpr_mem_server_request_put  I     1
// EN_hart0_csr_mem_server_request_put  I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
// EN_hart0_server_reset_response_get  I     1
// EN_hart0_server_run_halt_response_get  I     1
// EN_hart0_gpr_mem_server_response_get  I     1
// EN_hart0_fpr_mem_server_response_get  I     1
// EN_hart0_csr_mem_server_response_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     mem_master_awvalid,

	     mem_master_awid,

	     mem_master_awaddr,

	     mem_master_awlen,

	     mem_master_awsize,

	     mem_master_awburst,

	     mem_master_awlock,

	     mem_master_awcache,

	     mem_master_awprot,

	     mem_master_awqos,

	     mem_master_awregion,

	     mem_master_awready,

	     mem_master_wvalid,

	     mem_master_wdata,

	     mem_master_wstrb,

	     mem_master_wlast,

	     mem_master_wready,

	     mem_master_bvalid,
	     mem_master_bid,
	     mem_master_bresp,

	     mem_master_bready,

	     mem_master_arvalid,

	     mem_master_arid,

	     mem_master_araddr,

	     mem_master_arlen,

	     mem_master_arsize,

	     mem_master_arburst,

	     mem_master_arlock,

	     mem_master_arcache,

	     mem_master_arprot,

	     mem_master_arqos,

	     mem_master_arregion,

	     mem_master_arready,

	     mem_master_rvalid,
	     mem_master_rid,
	     mem_master_rdata,
	     mem_master_rresp,
	     mem_master_rlast,

	     mem_master_rready,

	     dma_server_awvalid,
	     dma_server_awid,
	     dma_server_awaddr,
	     dma_server_awlen,
	     dma_server_awsize,
	     dma_server_awburst,
	     dma_server_awlock,
	     dma_server_awcache,
	     dma_server_awprot,
	     dma_server_awqos,
	     dma_server_awregion,

	     dma_server_awready,

	     dma_server_wvalid,
	     dma_server_wdata,
	     dma_server_wstrb,
	     dma_server_wlast,

	     dma_server_wready,

	     dma_server_bvalid,

	     dma_server_bid,

	     dma_server_bresp,

	     dma_server_bready,

	     dma_server_arvalid,
	     dma_server_arid,
	     dma_server_araddr,
	     dma_server_arlen,
	     dma_server_arsize,
	     dma_server_arburst,
	     dma_server_arlock,
	     dma_server_arcache,
	     dma_server_arprot,
	     dma_server_arqos,
	     dma_server_arregion,

	     dma_server_arready,

	     dma_server_rvalid,

	     dma_server_rid,

	     dma_server_rdata,

	     dma_server_rresp,

	     dma_server_rlast,

	     dma_server_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     ma_set_csr_time_t,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     hart0_server_run_halt_request_put,
	     EN_hart0_server_run_halt_request_put,
	     RDY_hart0_server_run_halt_request_put,

	     EN_hart0_server_run_halt_response_get,
	     hart0_server_run_halt_response_get,
	     RDY_hart0_server_run_halt_response_get,

	     hart0_put_other_req_put,
	     EN_hart0_put_other_req_put,
	     RDY_hart0_put_other_req_put,

	     hart0_gpr_mem_server_request_put,
	     EN_hart0_gpr_mem_server_request_put,
	     RDY_hart0_gpr_mem_server_request_put,

	     EN_hart0_gpr_mem_server_response_get,
	     hart0_gpr_mem_server_response_get,
	     RDY_hart0_gpr_mem_server_response_get,

	     hart0_fpr_mem_server_request_put,
	     EN_hart0_fpr_mem_server_request_put,
	     RDY_hart0_fpr_mem_server_request_put,

	     EN_hart0_fpr_mem_server_response_get,
	     hart0_fpr_mem_server_response_get,
	     RDY_hart0_fpr_mem_server_response_get,

	     hart0_csr_mem_server_request_put,
	     EN_hart0_csr_mem_server_request_put,
	     RDY_hart0_csr_mem_server_request_put,

	     EN_hart0_csr_mem_server_response_get,
	     hart0_csr_mem_server_response_get,
	     RDY_hart0_csr_mem_server_response_get,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     set_watch_tohost_watch_tohost,
	     set_watch_tohost_tohost_addr,
	     EN_set_watch_tohost,
	     RDY_set_watch_tohost,

	     mv_tohost_value,
	     RDY_mv_tohost_value,

	     EN_ma_ddr4_ready,
	     RDY_ma_ddr4_ready,

	     mv_status);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [15 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [15 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [15 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [15 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [15 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [511 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [63 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [15 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [15 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [15 : 0] mem_master_rid;
  input  [511 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [15 : 0] dma_server_awid;
  input  [63 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [511 : 0] dma_server_wdata;
  input  [63 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [15 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [15 : 0] dma_server_arid;
  input  [63 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [15 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [511 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method ma_set_csr_time
  input  [63 : 0] ma_set_csr_time_t;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method hart0_server_run_halt_request_put
  input  hart0_server_run_halt_request_put;
  input  EN_hart0_server_run_halt_request_put;
  output RDY_hart0_server_run_halt_request_put;

  // actionvalue method hart0_server_run_halt_response_get
  input  EN_hart0_server_run_halt_response_get;
  output hart0_server_run_halt_response_get;
  output RDY_hart0_server_run_halt_response_get;

  // action method hart0_put_other_req_put
  input  [3 : 0] hart0_put_other_req_put;
  input  EN_hart0_put_other_req_put;
  output RDY_hart0_put_other_req_put;

  // action method hart0_gpr_mem_server_request_put
  input  [69 : 0] hart0_gpr_mem_server_request_put;
  input  EN_hart0_gpr_mem_server_request_put;
  output RDY_hart0_gpr_mem_server_request_put;

  // actionvalue method hart0_gpr_mem_server_response_get
  input  EN_hart0_gpr_mem_server_response_get;
  output [64 : 0] hart0_gpr_mem_server_response_get;
  output RDY_hart0_gpr_mem_server_response_get;

  // action method hart0_fpr_mem_server_request_put
  input  [69 : 0] hart0_fpr_mem_server_request_put;
  input  EN_hart0_fpr_mem_server_request_put;
  output RDY_hart0_fpr_mem_server_request_put;

  // actionvalue method hart0_fpr_mem_server_response_get
  input  EN_hart0_fpr_mem_server_response_get;
  output [64 : 0] hart0_fpr_mem_server_response_get;
  output RDY_hart0_fpr_mem_server_response_get;

  // action method hart0_csr_mem_server_request_put
  input  [76 : 0] hart0_csr_mem_server_request_put;
  input  EN_hart0_csr_mem_server_request_put;
  output RDY_hart0_csr_mem_server_request_put;

  // actionvalue method hart0_csr_mem_server_response_get
  input  EN_hart0_csr_mem_server_response_get;
  output [64 : 0] hart0_csr_mem_server_response_get;
  output RDY_hart0_csr_mem_server_response_get;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [511 : 0] dma_server_rdata, mem_master_wdata;
  wire [64 : 0] hart0_csr_mem_server_response_get,
		hart0_fpr_mem_server_response_get,
		hart0_gpr_mem_server_response_get;
  wire [63 : 0] imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wstrb,
		mv_tohost_value;
  wire [15 : 0] dma_server_bid,
		dma_server_rid,
		imem_master_arid,
		imem_master_awid,
		mem_master_arid,
		mem_master_awid;
  wire [7 : 0] imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb,
	       mem_master_arlen,
	       mem_master_awlen,
	       mv_status;
  wire [3 : 0] imem_master_arcache,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awqos,
	       imem_master_awregion,
	       mem_master_arcache,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize,
	       mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] dma_server_bresp,
	       dma_server_rresp,
	       imem_master_arburst,
	       imem_master_awburst,
	       mem_master_arburst,
	       mem_master_awburst;
  wire RDY_hart0_csr_mem_server_request_put,
       RDY_hart0_csr_mem_server_response_get,
       RDY_hart0_fpr_mem_server_request_put,
       RDY_hart0_fpr_mem_server_response_get,
       RDY_hart0_gpr_mem_server_request_put,
       RDY_hart0_gpr_mem_server_response_get,
       RDY_hart0_put_other_req_put,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_hart0_server_run_halt_request_put,
       RDY_hart0_server_run_halt_response_get,
       RDY_ma_ddr4_ready,
       RDY_mv_tohost_value,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       hart0_server_reset_response_get,
       hart0_server_run_halt_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_cache_addr
  reg [63 : 0] imem_rg_cache_addr;
  reg [63 : 0] imem_rg_cache_addr$D_IN;
  wire imem_rg_cache_addr$EN;

  // register imem_rg_cache_b16
  reg [15 : 0] imem_rg_cache_b16;
  wire [15 : 0] imem_rg_cache_b16$D_IN;
  wire imem_rg_cache_b16$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [63 : 0] imem_rg_pc;
  reg [63 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  wire [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [63 : 0] imem_rg_satp;
  wire [63 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register imem_rg_tval
  reg [63 : 0] imem_rg_tval;
  reg [63 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_csr_pc
  reg [63 : 0] rg_csr_pc;
  wire [63 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [63 : 0] rg_csr_val1;
  wire [63 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_epoch
  reg [1 : 0] rg_epoch;
  reg [1 : 0] rg_epoch$D_IN;
  wire rg_epoch$EN;

  // register rg_instret_reported
  reg [63 : 0] rg_instret_reported;
  wire [63 : 0] rg_instret_reported$D_IN;
  wire rg_instret_reported$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  reg [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_pc_reported
  reg [63 : 0] rg_pc_reported;
  reg [63 : 0] rg_pc_reported$D_IN;
  wire rg_pc_reported$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_step_count
  reg rg_step_count;
  wire rg_step_count$D_IN, rg_step_count$EN;

  // register rg_stop_req
  reg rg_stop_req;
  wire rg_stop_req$D_IN, rg_stop_req$EN;

  // register rg_trap_info
  reg [131 : 0] rg_trap_info;
  reg [131 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register rg_wfi_counter
  reg [31 : 0] rg_wfi_counter;
  wire [31 : 0] rg_wfi_counter$D_IN;
  wire rg_wfi_counter$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage1_rg_stage_input
  reg [401 : 0] stage1_rg_stage_input;
  wire [401 : 0] stage1_rg_stage_input$D_IN;
  wire stage1_rg_stage_input$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [495 : 0] stage2_rg_stage2;
  wire [495 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [238 : 0] stage3_rg_stage3;
  wire [238 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register stageD_rg_data
  reg [233 : 0] stageD_rg_data;
  wire [233 : 0] stageD_rg_data$D_IN;
  wire stageD_rg_data$EN;

  // register stageD_rg_full
  reg stageD_rg_full;
  reg stageD_rg_full$D_IN;
  wire stageD_rg_full$EN;

  // register stageF_rg_epoch
  reg [1 : 0] stageF_rg_epoch;
  reg [1 : 0] stageF_rg_epoch$D_IN;
  wire stageF_rg_epoch$EN;

  // register stageF_rg_full
  reg stageF_rg_full;
  reg stageF_rg_full$D_IN;
  wire stageF_rg_full$EN;

  // register stageF_rg_priv
  reg [1 : 0] stageF_rg_priv;
  wire [1 : 0] stageF_rg_priv$D_IN;
  wire stageF_rg_priv$EN;

  // ports of submodule csr_regfile
  reg [63 : 0] csr_regfile$mav_csr_write_word;
  reg [2 : 0] csr_regfile$write_dcsr_cause_priv_cause;
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [128 : 0] csr_regfile$mav_csr_write;
  wire [64 : 0] csr_regfile$read_csr, csr_regfile$read_csr_port2;
  wire [63 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$ma_set_csr_time_t,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_dpc,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus,
		csr_regfile$write_dpc_pc;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$ma_update_fcsr_fflags_flags,
	       csr_regfile$mv_update_fcsr_fflags_flags;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_ret_actions_from_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$dcsr_break_enters_debug_cur_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$ma_update_mstatus_fs_fs,
	       csr_regfile$mv_update_mstatus_fs_fs,
	       csr_regfile$write_dcsr_cause_priv_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_ma_update_fcsr_fflags,
       csr_regfile$EN_ma_update_mstatus_fs,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_write_dcsr_cause_priv,
       csr_regfile$EN_write_dpc,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$dcsr_break_enters_debug,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$read_dcsr_step,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_csr_reqs
  wire [76 : 0] f_csr_reqs$D_IN, f_csr_reqs$D_OUT;
  wire f_csr_reqs$CLR,
       f_csr_reqs$DEQ,
       f_csr_reqs$EMPTY_N,
       f_csr_reqs$ENQ,
       f_csr_reqs$FULL_N;

  // ports of submodule f_csr_rsps
  reg [64 : 0] f_csr_rsps$D_IN;
  wire [64 : 0] f_csr_rsps$D_OUT;
  wire f_csr_rsps$CLR,
       f_csr_rsps$DEQ,
       f_csr_rsps$EMPTY_N,
       f_csr_rsps$ENQ,
       f_csr_rsps$FULL_N;

  // ports of submodule f_fpr_reqs
  wire [69 : 0] f_fpr_reqs$D_IN, f_fpr_reqs$D_OUT;
  wire f_fpr_reqs$CLR,
       f_fpr_reqs$DEQ,
       f_fpr_reqs$EMPTY_N,
       f_fpr_reqs$ENQ,
       f_fpr_reqs$FULL_N;

  // ports of submodule f_fpr_rsps
  reg [64 : 0] f_fpr_rsps$D_IN;
  wire [64 : 0] f_fpr_rsps$D_OUT;
  wire f_fpr_rsps$CLR,
       f_fpr_rsps$DEQ,
       f_fpr_rsps$EMPTY_N,
       f_fpr_rsps$ENQ,
       f_fpr_rsps$FULL_N;

  // ports of submodule f_gpr_reqs
  wire [69 : 0] f_gpr_reqs$D_IN, f_gpr_reqs$D_OUT;
  wire f_gpr_reqs$CLR,
       f_gpr_reqs$DEQ,
       f_gpr_reqs$EMPTY_N,
       f_gpr_reqs$ENQ,
       f_gpr_reqs$FULL_N;

  // ports of submodule f_gpr_rsps
  reg [64 : 0] f_gpr_rsps$D_IN;
  wire [64 : 0] f_gpr_rsps$D_OUT;
  wire f_gpr_rsps$CLR,
       f_gpr_rsps$DEQ,
       f_gpr_rsps$EMPTY_N,
       f_gpr_rsps$ENQ,
       f_gpr_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_run_halt_reqs
  wire f_run_halt_reqs$CLR,
       f_run_halt_reqs$DEQ,
       f_run_halt_reqs$D_IN,
       f_run_halt_reqs$D_OUT,
       f_run_halt_reqs$EMPTY_N,
       f_run_halt_reqs$ENQ,
       f_run_halt_reqs$FULL_N;

  // ports of submodule f_run_halt_rsps
  wire f_run_halt_rsps$CLR,
       f_run_halt_rsps$DEQ,
       f_run_halt_rsps$D_IN,
       f_run_halt_rsps$D_OUT,
       f_run_halt_rsps$EMPTY_N,
       f_run_halt_rsps$ENQ,
       f_run_halt_rsps$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs1_port2,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  reg [63 : 0] gpr_regfile$write_rd_rd_val;
  reg [4 : 0] gpr_regfile$write_rd_rd;
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs1_port2,
		gpr_regfile$read_rs2;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$dmem_req_store_value, near_mem$imem_req_addr;
  wire [511 : 0] near_mem$dma_server_rdata,
		 near_mem$dma_server_wdata,
		 near_mem$mem_master_rdata,
		 near_mem$mem_master_wdata;
  wire [63 : 0] near_mem$dma_server_araddr,
		near_mem$dma_server_awaddr,
		near_mem$dma_server_wstrb,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$mem_master_araddr,
		near_mem$mem_master_awaddr,
		near_mem$mem_master_wstrb,
		near_mem$mv_tohost_value,
		near_mem$set_watch_tohost_tohost_addr;
  wire [31 : 0] near_mem$imem_instr;
  wire [15 : 0] near_mem$dma_server_arid,
		near_mem$dma_server_awid,
		near_mem$dma_server_bid,
		near_mem$dma_server_rid,
		near_mem$imem_master_arid,
		near_mem$imem_master_awid,
		near_mem$imem_master_bid,
		near_mem$imem_master_rid,
		near_mem$mem_master_arid,
		near_mem$mem_master_awid,
		near_mem$mem_master_bid,
		near_mem$mem_master_rid;
  wire [7 : 0] near_mem$dma_server_arlen,
	       near_mem$dma_server_awlen,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$mem_master_arlen,
	       near_mem$mem_master_awlen,
	       near_mem$mv_status,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dma_server_arcache,
	       near_mem$dma_server_arqos,
	       near_mem$dma_server_arregion,
	       near_mem$dma_server_awcache,
	       near_mem$dma_server_awqos,
	       near_mem$dma_server_awregion,
	       near_mem$dmem_exc_code,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$mem_master_arcache,
	       near_mem$mem_master_arqos,
	       near_mem$mem_master_arregion,
	       near_mem$mem_master_awcache,
	       near_mem$mem_master_awqos,
	       near_mem$mem_master_awregion;
  wire [2 : 0] near_mem$dma_server_arprot,
	       near_mem$dma_server_arsize,
	       near_mem$dma_server_awprot,
	       near_mem$dma_server_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3,
	       near_mem$mem_master_arprot,
	       near_mem$mem_master_arsize,
	       near_mem$mem_master_awprot,
	       near_mem$mem_master_awsize;
  wire [1 : 0] near_mem$dma_server_arburst,
	       near_mem$dma_server_awburst,
	       near_mem$dma_server_bresp,
	       near_mem$dma_server_rresp,
	       near_mem$dmem_req_op,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv,
	       near_mem$mem_master_arburst,
	       near_mem$mem_master_awburst,
	       near_mem$mem_master_bresp,
	       near_mem$mem_master_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_ma_ddr4_ready,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_set_watch_tohost,
       near_mem$EN_sfence_vma_server_request_put,
       near_mem$EN_sfence_vma_server_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dma_server_arlock,
       near_mem$dma_server_arready,
       near_mem$dma_server_arvalid,
       near_mem$dma_server_awlock,
       near_mem$dma_server_awready,
       near_mem$dma_server_awvalid,
       near_mem$dma_server_bready,
       near_mem$dma_server_bvalid,
       near_mem$dma_server_rlast,
       near_mem$dma_server_rready,
       near_mem$dma_server_rvalid,
       near_mem$dma_server_wlast,
       near_mem$dma_server_wready,
       near_mem$dma_server_wvalid,
       near_mem$dmem_exc,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_req_mstatus_MXR,
       near_mem$imem_req_sstatus_SUM,
       near_mem$imem_valid,
       near_mem$mem_master_arlock,
       near_mem$mem_master_arready,
       near_mem$mem_master_arvalid,
       near_mem$mem_master_awlock,
       near_mem$mem_master_awready,
       near_mem$mem_master_awvalid,
       near_mem$mem_master_bready,
       near_mem$mem_master_bvalid,
       near_mem$mem_master_rlast,
       near_mem$mem_master_rready,
       near_mem$mem_master_rvalid,
       near_mem$mem_master_wlast,
       near_mem$mem_master_wready,
       near_mem$mem_master_wvalid,
       near_mem$set_watch_tohost_watch_tohost;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req,
       stage2_fbox$EN_server_reset_request_put,
       stage2_fbox$EN_server_reset_response_get,
       stage2_fbox$RDY_server_reset_request_put,
       stage2_fbox$RDY_server_reset_response_get,
       stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // ports of submodule stageD_f_reset_reqs
  wire stageD_f_reset_reqs$CLR,
       stageD_f_reset_reqs$DEQ,
       stageD_f_reset_reqs$EMPTY_N,
       stageD_f_reset_reqs$ENQ,
       stageD_f_reset_reqs$FULL_N;

  // ports of submodule stageD_f_reset_rsps
  wire stageD_f_reset_rsps$CLR,
       stageD_f_reset_rsps$DEQ,
       stageD_f_reset_rsps$EMPTY_N,
       stageD_f_reset_rsps$ENQ,
       stageD_f_reset_rsps$FULL_N;

  // ports of submodule stageF_branch_predictor
  reg [63 : 0] stageF_branch_predictor$predict_req_pc;
  wire [194 : 0] stageF_branch_predictor$bp_train_cf_info;
  wire [63 : 0] stageF_branch_predictor$bp_train_pc,
		stageF_branch_predictor$predict_rsp;
  wire [31 : 0] stageF_branch_predictor$bp_train_instr,
		stageF_branch_predictor$predict_rsp_instr;
  wire stageF_branch_predictor$EN_bp_train,
       stageF_branch_predictor$EN_predict_req,
       stageF_branch_predictor$EN_reset,
       stageF_branch_predictor$RDY_predict_req,
       stageF_branch_predictor$bp_train_is_i32_not_i16,
       stageF_branch_predictor$predict_rsp_is_i32_not_i16;

  // ports of submodule stageF_f_reset_reqs
  wire stageF_f_reset_reqs$CLR,
       stageF_f_reset_reqs$DEQ,
       stageF_f_reset_reqs$EMPTY_N,
       stageF_f_reset_reqs$ENQ,
       stageF_f_reset_reqs$FULL_N;

  // ports of submodule stageF_f_reset_rsps
  wire stageF_f_reset_rsps$CLR,
       stageF_f_reset_rsps$DEQ,
       stageF_f_reset_rsps$EMPTY_N,
       stageF_f_reset_rsps$ENQ,
       stageF_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_BREAK_cache_flush_finish,
       CAN_FIRE_RL_rl_WFI_count,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_debug_csr_access_busy,
       CAN_FIRE_RL_rl_debug_fpr_access_busy,
       CAN_FIRE_RL_rl_debug_gpr_access_busy,
       CAN_FIRE_RL_rl_debug_halt,
       CAN_FIRE_RL_rl_debug_halt_redundant,
       CAN_FIRE_RL_rl_debug_read_csr,
       CAN_FIRE_RL_rl_debug_read_fpr,
       CAN_FIRE_RL_rl_debug_read_gpr,
       CAN_FIRE_RL_rl_debug_run,
       CAN_FIRE_RL_rl_debug_run_redundant,
       CAN_FIRE_RL_rl_debug_write_csr,
       CAN_FIRE_RL_rl_debug_write_fpr,
       CAN_FIRE_RL_rl_debug_write_gpr,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_Debug_Module,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_stop,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_stageD_rl_reset,
       CAN_FIRE_RL_stageF_rl_reset,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_hart0_csr_mem_server_request_put,
       CAN_FIRE_hart0_csr_mem_server_response_get,
       CAN_FIRE_hart0_fpr_mem_server_request_put,
       CAN_FIRE_hart0_fpr_mem_server_response_get,
       CAN_FIRE_hart0_gpr_mem_server_request_put,
       CAN_FIRE_hart0_gpr_mem_server_response_get,
       CAN_FIRE_hart0_put_other_req_put,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_hart0_server_run_halt_request_put,
       CAN_FIRE_hart0_server_run_halt_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_ma_set_csr_time,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_BREAK_cache_flush_finish,
       WILL_FIRE_RL_rl_WFI_count,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_debug_csr_access_busy,
       WILL_FIRE_RL_rl_debug_fpr_access_busy,
       WILL_FIRE_RL_rl_debug_gpr_access_busy,
       WILL_FIRE_RL_rl_debug_halt,
       WILL_FIRE_RL_rl_debug_halt_redundant,
       WILL_FIRE_RL_rl_debug_read_csr,
       WILL_FIRE_RL_rl_debug_read_fpr,
       WILL_FIRE_RL_rl_debug_read_gpr,
       WILL_FIRE_RL_rl_debug_run,
       WILL_FIRE_RL_rl_debug_run_redundant,
       WILL_FIRE_RL_rl_debug_write_csr,
       WILL_FIRE_RL_rl_debug_write_fpr,
       WILL_FIRE_RL_rl_debug_write_gpr,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_Debug_Module,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_stop,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_stageD_rl_reset,
       WILL_FIRE_RL_stageF_rl_reset,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_hart0_csr_mem_server_request_put,
       WILL_FIRE_hart0_csr_mem_server_response_get,
       WILL_FIRE_hart0_fpr_mem_server_request_put,
       WILL_FIRE_hart0_fpr_mem_server_response_get,
       WILL_FIRE_hart0_gpr_mem_server_request_put,
       WILL_FIRE_hart0_gpr_mem_server_response_get,
       WILL_FIRE_hart0_put_other_req_put,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_hart0_server_run_halt_request_put,
       WILL_FIRE_hart0_server_run_halt_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_ma_set_csr_time,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [131 : 0] MUX_rg_trap_info$write_1__VAL_1,
		 MUX_rg_trap_info$write_1__VAL_2,
		 MUX_rg_trap_info$write_1__VAL_3,
		 MUX_rg_trap_info$write_1__VAL_4;
  wire [64 : 0] MUX_f_csr_rsps$enq_1__VAL_3,
		MUX_f_fpr_rsps$enq_1__VAL_3,
		MUX_f_gpr_rsps$enq_1__VAL_3;
  wire [63 : 0] MUX_imem_rg_cache_addr$write_1__VAL_1,
		MUX_imem_rg_cache_addr$write_1__VAL_2,
		MUX_imem_rg_tval$write_1__VAL_2,
		MUX_imem_rg_tval$write_1__VAL_3,
		MUX_imem_rg_tval$write_1__VAL_4,
		MUX_imem_rg_tval$write_1__VAL_5,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_4,
		MUX_near_mem$imem_req_2__VAL_5;
  wire [31 : 0] MUX_rg_trap_instr$write_1__VAL_2,
		MUX_rg_wfi_counter$write_1__VAL_1;
  wire [3 : 0] MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_4;
  wire [2 : 0] MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_csr_regfile$mav_csr_write_1__SEL_2,
       MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1,
       MUX_csr_regfile$write_dpc_1__SEL_2,
       MUX_f_run_halt_rsps$enq_1__SEL_1,
       MUX_fpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_2,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_rg_cache_addr$write_1__SEL_1,
       MUX_imem_rg_cache_addr$write_1__SEL_2,
       MUX_imem_rg_cache_b16$write_1__PSEL_1,
       MUX_imem_rg_pc$write_1__SEL_3,
       MUX_rg_instret_reported$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_2,
       MUX_rg_pc_reported$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_step_count$write_1__SEL_4,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stage3_rg_full$write_1__VAL_2,
       MUX_stageD_rg_full$write_1__VAL_2,
       MUX_stageF_rg_full$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2522;
  reg [31 : 0] v__h2516;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19,
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20,
	       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551,
	       _theResult_____1_fst__h13333,
	       alu_outputs___1_val1__h11371,
	       rs1_val__h36382,
	       value__h9415,
	       value__h9629,
	       x_out_bypass_rd_val__h10022,
	       x_out_cf_info_taken_PC__h17066,
	       x_out_data_to_stage2_addr__h10893,
	       x_out_data_to_stage2_val1__h10894,
	       x_out_data_to_stage3_frd_val__h9063,
	       x_out_data_to_stage3_rd_val__h9059,
	       x_out_fbypass_rd_val__h10216;
  reg [4 : 0] data_to_stage2_rd__h10875,
	      x_out_bypass_rd__h10021,
	      x_out_data_to_stage3_fpr_flags__h9062,
	      x_out_data_to_stage3_rd__h9058,
	      x_out_fbypass_rd__h10215;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q15,
	      CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16,
	      alu_outputs_exc_code__h12528,
	      x_out_trap_info_exc_code__h9525;
  reg [2 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21,
	      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22;
  reg [1 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23;
  reg CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q11,
      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q13,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14,
      CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_ne_ETC__q3,
      CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q5,
      CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q4,
      IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453,
      IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796,
      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823,
      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2827,
      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d777,
      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d785,
      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d983,
      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d991,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d1586,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d181,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d190,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d277,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d283,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d296,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d319,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d324,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d335,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342,
      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d424;
  wire [429 : 0] IF_stage1_rg_stage_input_52_BITS_335_TO_334_53_ETC___d2554;
  wire [127 : 0] csr_regfile_read_csr_mcycle__3_MINUS_rg_start__ETC___d3044;
  wire [63 : 0] IF_csr_regfile_read_csr_rg_trap_instr_865_BITS_ETC___d2918,
		IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d1291,
		IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1552,
		IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1553,
		IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1562,
		SEXT_stage1_rg_stage_input_52_BITS_87_TO_76_078___d1290,
		_theResult_____1_fst__h13326,
		_theResult_____1_fst__h13361,
		_theResult____h47206,
		_theResult___fst__h13497,
		_theResult___fst__h13504,
		_theResult___fst__h13585,
		_theResult___fst_rd_val__h10001,
		_theResult___fst_rd_val__h9987,
		_theResult___fst_rd_val__h9990,
		_theResult___snd_rd_val__h10188,
		_theResult___snd_rd_val__h10191,
		_theResult___snd_rd_val__h10197,
		_theResult___snd_snd__h17492,
		addr_of_b32___1__h33402,
		addr_of_b32___1__h45902,
		addr_of_b32___1__h48358,
		addr_of_b32__h33274,
		addr_of_b32__h45774,
		addr_of_b32__h48230,
		alu_outputs___1_addr__h11096,
		alu_outputs___1_addr__h11470,
		alu_outputs___1_fval1__h12500,
		alu_outputs___1_fval2__h11474,
		alu_outputs___1_fval3__h12502,
		alu_outputs___1_val1__h11269,
		alu_outputs___1_val1__h11314,
		alu_outputs___1_val1__h11343,
		alu_outputs___1_val1__h11756,
		alu_outputs___1_val1__h11784,
		alu_outputs_cf_info_taken_PC__h17058,
		branch_target__h11074,
		cpi__h47208,
		cpifrac__h47209,
		data_to_stage2_addr__h10876,
		data_to_stage2_val2__h10878,
		data_to_stage3_frd_val__h8984,
		delta_CPI_cycles__h47204,
		delta_CPI_instrs___1__h47250,
		delta_CPI_instrs__h47205,
		fall_through_pc__h10619,
		next_pc___1__h14758,
		next_pc__h10620,
		next_pc__h11109,
		next_pc__h11144,
		next_pc__h14755,
		rd_val___1__h13241,
		rd_val___1__h13322,
		rd_val___1__h13329,
		rd_val___1__h13336,
		rd_val___1__h13343,
		rd_val___1__h13350,
		rd_val___1__h17521,
		rd_val___1__h17552,
		rd_val___1__h17584,
		rd_val___1__h17613,
		rd_val___1__h17665,
		rd_val___1__h17713,
		rd_val___1__h17719,
		rd_val___1__h17764,
		rd_val__h10457,
		rd_val__h10490,
		rd_val__h10523,
		rd_val__h10554,
		rd_val__h10588,
		rd_val__h11385,
		rd_val__h11406,
		rd_val__h17393,
		rd_val__h17444,
		rd_val__h17466,
		rs1_val__h35457,
		rs1_val_bypassed__h5451,
		rs2_val_bypassed__h5457,
		trap_info_tval__h15908,
		val__h10459,
		val__h10492,
		value__h15978,
		x__h47207,
		x_out_cf_info_fallthru_PC__h17065,
		x_out_data_to_stage2_fval1__h10896,
		x_out_data_to_stage2_fval3__h10898,
		x_out_data_to_stage2_val2__h10895,
		x_out_next_pc__h10637,
		y__h36660;
  wire [31 : 0] IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d2121,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1962,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1963,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1964,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1965,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1966,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1967,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1968,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1970,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1972,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1974,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1976,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1977,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1978,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1980,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1981,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1982,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1984,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1986,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1987,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1989,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1990,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1991,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1992,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1993,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1994,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1995,
		IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1996,
		IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d2122,
		IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC__q18,
		_theResult____h5735,
		d_instr__h26151,
		instr___1__h18516,
		instr__h18693,
		instr__h18838,
		instr__h19030,
		instr__h19225,
		instr__h19454,
		instr__h19907,
		instr__h20023,
		instr__h20088,
		instr__h20405,
		instr__h20743,
		instr__h20927,
		instr__h21056,
		instr__h21283,
		instr__h21538,
		instr__h21710,
		instr__h21879,
		instr__h22068,
		instr__h22257,
		instr__h22374,
		instr__h22552,
		instr__h22671,
		instr__h22766,
		instr__h22902,
		instr__h23038,
		instr__h23174,
		instr__h23312,
		instr__h23450,
		instr__h23608,
		instr__h23704,
		instr__h23857,
		instr__h24056,
		instr__h24207,
		instr__h24412,
		instr__h25212,
		instr__h25377,
		instr__h25576,
		instr__h25727,
		instr_out___1__h26153,
		instr_out___1__h26175,
		rs1_val_bypassed451_BITS_31_TO_0_MINUS_rs2_val_ETC__q10,
		rs1_val_bypassed451_BITS_31_TO_0_PLUS_rs2_val__ETC__q9,
		rs1_val_bypassed451_BITS_31_TO_0_SRL_rs2_val_b_ETC__q8,
		rs1_val_bypassed451_BITS_31_TO_0__q7,
		tmp__h17612,
		v32__h11383,
		x__h17555,
		x__h17587,
		x__h17722,
		x__h17767,
		x_out_data_to_stage1_instr__h18442;
  wire [20 : 0] SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1769,
		decoded_instr_imm21_UJ__h31699,
		stage1_rg_stage_input_BITS_30_TO_10__q2;
  wire [19 : 0] imm20__h20795;
  wire [12 : 0] SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794,
		decoded_instr_imm13_SB__h31697,
		stage1_rg_stage_input_BITS_63_TO_51__q1;
  wire [11 : 0] decoded_instr_imm12_S__h31696,
		imm12__h18694,
		imm12__h19031,
		imm12__h20667,
		imm12__h21336,
		imm12__h21551,
		imm12__h21747,
		imm12__h22084,
		imm12__h23705,
		imm12__h24057,
		offset__h19401,
		stage1_rg_stage_input_BITS_75_TO_64__q6,
		stage1_rg_stage_input_BITS_87_TO_76__q17;
  wire [9 : 0] decoded_instr_funct10__h31694,
	       nzimm10__h21334,
	       nzimm10__h21549;
  wire [8 : 0] offset__h20032, offset__h23619;
  wire [7 : 0] offset__h18566, offset__h23991;
  wire [6 : 0] offset__h18973;
  wire [5 : 0] imm6__h20665, shamt__h11256;
  wire [4 : 0] offset_BITS_4_TO_0___h18962,
	       offset_BITS_4_TO_0___h19393,
	       offset_BITS_4_TO_0___h24332,
	       rd__h19033,
	       rs1__h19032,
	       x_out_data_to_stage2_rd__h10892;
  wire [3 : 0] alu_outputs___1_exc_code__h11752,
	       cur_verbosity__h3801,
	       x_exc_code__h46908,
	       x_out_trap_info_exc_code__h15913;
  wire [2 : 0] rm__h11057;
  wire [1 : 0] new_epoch__h27662, sxl__h7703, uxl__h7704;
  wire IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689,
       IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2377,
       IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445,
       IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2632,
       IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d363,
       IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d364,
       IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d367,
       IF_stage1_rg_full_51_THEN_stage1_rg_stage_inpu_ETC___d2959,
       IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d2819,
       IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442,
       IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444,
       IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446,
       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000,
       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2870,
       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790,
       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802,
       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996,
       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2336,
       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2339,
       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2353,
       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2677,
       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718,
       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2774,
       IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d357,
       IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d359,
       NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2323,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2371,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2804,
       NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2426,
       NOT_csr_regfile_read_dpc__062_BITS_1_TO_0_063__ETC___d3070,
       NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2505,
       NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2548,
       NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d878,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2118,
       NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2137,
       NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144,
       NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1135,
       NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1157,
       NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1232,
       NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1677,
       NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d2813,
       NOT_rg_next_pc_929_BITS_1_TO_0_930_EQ_0b0_931__ETC___d2937,
       NOT_rg_run_on_reset_279_280_OR_imem_rg_pc_BITS_ETC___d2287,
       NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3162,
       NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2367,
       NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2370,
       NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2376,
       NOT_stage1_rg_stage_input_52_BITS_109_TO_105_4_ETC___d580,
       NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1188,
       NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1195,
       NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d500,
       NOT_stage1_rg_stage_input_52_BITS_144_TO_140_0_ETC___d1200,
       NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d2829,
       NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470,
       NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d787,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1261,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1269,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1274,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1280,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1331,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1692,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1696,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3016,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3030,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3034,
       NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3039,
       NOT_stage1_rg_stage_input_52_BITS_99_TO_98_95__ETC___d774,
       NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1035,
       NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1050,
       NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1099,
       NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1160,
       NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2803,
       NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2946,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1250,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1328,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1366,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2728,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2735,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2784,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2787,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2792,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395,
       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805,
       NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154,
       NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162,
       NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d183,
       NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d295,
       NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d423,
       NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2753,
       _0_OR_stage1_rg_stage_input_52_BITS_104_TO_98_5_ETC___d2528,
       _dand1rg_step_count$EN_write,
       _dand2rg_step_count$EN_write,
       csr_regfile_RDY_server_reset_request_put__251__ETC___d2263,
       csr_regfile_interrupt_pending_rg_cur_priv_4_31_ETC___d2730,
       csr_regfile_interrupt_pending_rg_cur_priv_4_31_ETC___d3031,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2431,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2863,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2898,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971,
       csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1779,
       csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1785,
       csr_regfile_read_mstatus__5_BITS_14_TO_13_7_EQ_ETC___d594,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d2141,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3058,
       imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2096,
       imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17,
       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2149,
       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151,
       near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_098___d2099,
       near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d2246,
       rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1155,
       rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1220,
       rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1234,
       rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1667,
       rg_state_7_EQ_13_0_AND_csr_regfile_wfi_resume__ETC___d3001,
       rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873,
       rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2974,
       rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2978,
       rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2807,
       rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2834,
       rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2960,
       rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d3008,
       rg_state_7_EQ_4_354_AND_stage3_rg_full_04_OR_s_ETC___d2366,
       rg_state_7_EQ_6_005_AND_NOT_stageF_rg_full_126_ETC___d3006,
       rg_state_7_EQ_9_926_AND_NOT_stageF_rg_full_126_ETC___d2927,
       stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2776,
       stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2780,
       stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d3022,
       stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1021,
       stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1029,
       stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1348,
       stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1406,
       stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1432,
       stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d2467,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d896,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d905,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d913,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d920,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d947,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d958,
       stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d964,
       stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1066,
       stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1080,
       stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d833,
       stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1096,
       stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1134,
       stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d1372,
       stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d2954,
       stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821,
       stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d993,
       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d1429,
       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d1620,
       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373,
       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2669,
       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354,
       stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d2488,
       stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d980,
       stage1_rg_stage_input_52_BIT_332_97_OR_NOT_rg__ETC___d1127,
       stage2_rg_full_20_AND_IF_stage2_rg_stage2_21_B_ETC___d2409,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1026,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1037,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1038,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1040,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1052,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1053,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1055,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1070,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1071,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1073,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1084,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1085,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1087,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1101,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1102,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1104,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1116,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1117,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1119,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1140,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1141,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1142,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1144,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1162,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1163,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1164,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1166,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1239,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1240,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1241,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1244,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1245,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1246,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1247,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1309,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1363,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1381,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1391,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1396,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1399,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1410,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1426,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2316,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2328,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2332,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2342,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2347,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2440,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2447,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2584,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2618,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2634,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2648,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2652,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2656,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2657,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2661,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2665,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2673,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361,
       stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2406,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2411,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2413,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2415,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2417,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2419,
       stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2433,
       stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174,
       stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d221,
       stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d250,
       stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_2_27_ETC___d304,
       stage3_rg_full_04_OR_NOT_stage2_rg_full_20_77__ETC___d2365,
       stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d428,
       stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d436,
       stageF_f_reset_rsps_i_notEmpty__273_AND_stageD_ETC___d2293,
       stageF_rg_full_126_AND_near_mem_imem_valid_AND_ETC___d2158;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = near_mem$mem_master_awvalid ;

  // value method mem_master_m_awid
  assign mem_master_awid = near_mem$mem_master_awid ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = near_mem$mem_master_awaddr ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = near_mem$mem_master_awlen ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = near_mem$mem_master_awsize ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = near_mem$mem_master_awburst ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = near_mem$mem_master_awlock ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = near_mem$mem_master_awcache ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = near_mem$mem_master_awprot ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = near_mem$mem_master_awqos ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = near_mem$mem_master_awregion ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = near_mem$mem_master_wvalid ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = near_mem$mem_master_wdata ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = near_mem$mem_master_wstrb ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = near_mem$mem_master_wlast ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = near_mem$mem_master_bready ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = near_mem$mem_master_arvalid ;

  // value method mem_master_m_arid
  assign mem_master_arid = near_mem$mem_master_arid ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = near_mem$mem_master_araddr ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = near_mem$mem_master_arlen ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = near_mem$mem_master_arsize ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = near_mem$mem_master_arburst ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = near_mem$mem_master_arlock ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = near_mem$mem_master_arcache ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = near_mem$mem_master_arprot ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = near_mem$mem_master_arqos ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = near_mem$mem_master_arregion ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = near_mem$mem_master_rready ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = near_mem$dma_server_awready ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = near_mem$dma_server_wready ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = near_mem$dma_server_bvalid ;

  // value method dma_server_m_bid
  assign dma_server_bid = near_mem$dma_server_bid ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = near_mem$dma_server_bresp ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = near_mem$dma_server_arready ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = near_mem$dma_server_rvalid ;

  // value method dma_server_m_rid
  assign dma_server_rid = near_mem$dma_server_rid ;

  // value method dma_server_m_rdata
  assign dma_server_rdata = near_mem$dma_server_rdata ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = near_mem$dma_server_rresp ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = near_mem$dma_server_rlast ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method ma_set_csr_time
  assign CAN_FIRE_ma_set_csr_time = 1'd1 ;
  assign WILL_FIRE_ma_set_csr_time = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method hart0_server_run_halt_request_put
  assign RDY_hart0_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_run_halt_request_put =
	     EN_hart0_server_run_halt_request_put ;

  // actionvalue method hart0_server_run_halt_response_get
  assign hart0_server_run_halt_response_get = f_run_halt_rsps$D_OUT ;
  assign RDY_hart0_server_run_halt_response_get = f_run_halt_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_run_halt_response_get =
	     EN_hart0_server_run_halt_response_get ;

  // action method hart0_put_other_req_put
  assign RDY_hart0_put_other_req_put = 1'd1 ;
  assign CAN_FIRE_hart0_put_other_req_put = 1'd1 ;
  assign WILL_FIRE_hart0_put_other_req_put = EN_hart0_put_other_req_put ;

  // action method hart0_gpr_mem_server_request_put
  assign RDY_hart0_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_gpr_mem_server_request_put =
	     EN_hart0_gpr_mem_server_request_put ;

  // actionvalue method hart0_gpr_mem_server_response_get
  assign hart0_gpr_mem_server_response_get = f_gpr_rsps$D_OUT ;
  assign RDY_hart0_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_gpr_mem_server_response_get =
	     EN_hart0_gpr_mem_server_response_get ;

  // action method hart0_fpr_mem_server_request_put
  assign RDY_hart0_fpr_mem_server_request_put = f_fpr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_fpr_mem_server_request_put = f_fpr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_fpr_mem_server_request_put =
	     EN_hart0_fpr_mem_server_request_put ;

  // actionvalue method hart0_fpr_mem_server_response_get
  assign hart0_fpr_mem_server_response_get = f_fpr_rsps$D_OUT ;
  assign RDY_hart0_fpr_mem_server_response_get = f_fpr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_fpr_mem_server_response_get = f_fpr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_fpr_mem_server_response_get =
	     EN_hart0_fpr_mem_server_response_get ;

  // action method hart0_csr_mem_server_request_put
  assign RDY_hart0_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_csr_mem_server_request_put =
	     EN_hart0_csr_mem_server_request_put ;

  // actionvalue method hart0_csr_mem_server_response_get
  assign hart0_csr_mem_server_response_get = f_csr_rsps$D_OUT ;
  assign RDY_hart0_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_csr_mem_server_response_get =
	     EN_hart0_csr_mem_server_response_get ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = near_mem$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = near_mem$mv_status ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .dcsr_break_enters_debug_cur_priv(csr_regfile$dcsr_break_enters_debug_cur_priv),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .ma_set_csr_time_t(csr_regfile$ma_set_csr_time_t),
			    .ma_update_fcsr_fflags_flags(csr_regfile$ma_update_fcsr_fflags_flags),
			    .ma_update_mstatus_fs_fs(csr_regfile$ma_update_mstatus_fs_fs),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .mv_update_fcsr_fflags_flags(csr_regfile$mv_update_fcsr_fflags_flags),
			    .mv_update_mstatus_fs_fs(csr_regfile$mv_update_mstatus_fs_fs),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .write_dcsr_cause_priv_cause(csr_regfile$write_dcsr_cause_priv_cause),
			    .write_dcsr_cause_priv_priv(csr_regfile$write_dcsr_cause_priv_priv),
			    .write_dpc_pc(csr_regfile$write_dpc_pc),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_ma_update_fcsr_fflags(csr_regfile$EN_ma_update_fcsr_fflags),
			    .EN_ma_update_mstatus_fs(csr_regfile$EN_ma_update_mstatus_fs),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_write_dpc(csr_regfile$EN_write_dpc),
			    .EN_write_dcsr_cause_priv(csr_regfile$EN_write_dcsr_cause_priv),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(csr_regfile$read_csr_port2),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_frm(csr_regfile$read_frm),
			    .read_fflags(),
			    .mv_update_fcsr_fflags(),
			    .mv_update_mstatus_fs(),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .read_dpc(csr_regfile$read_dpc),
			    .RDY_read_dpc(),
			    .RDY_write_dpc(),
			    .dcsr_break_enters_debug(csr_regfile$dcsr_break_enters_debug),
			    .RDY_dcsr_break_enters_debug(),
			    .read_dcsr_step(csr_regfile$read_dcsr_step),
			    .RDY_read_dcsr_step(),
			    .RDY_debug());

  // submodule f_csr_reqs
  FIFO2 #(.width(32'd77), .guarded(1'd1)) f_csr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_csr_reqs$D_IN),
						     .ENQ(f_csr_reqs$ENQ),
						     .DEQ(f_csr_reqs$DEQ),
						     .CLR(f_csr_reqs$CLR),
						     .D_OUT(f_csr_reqs$D_OUT),
						     .FULL_N(f_csr_reqs$FULL_N),
						     .EMPTY_N(f_csr_reqs$EMPTY_N));

  // submodule f_csr_rsps
  FIFO2 #(.width(32'd65), .guarded(1'd1)) f_csr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_csr_rsps$D_IN),
						     .ENQ(f_csr_rsps$ENQ),
						     .DEQ(f_csr_rsps$DEQ),
						     .CLR(f_csr_rsps$CLR),
						     .D_OUT(f_csr_rsps$D_OUT),
						     .FULL_N(f_csr_rsps$FULL_N),
						     .EMPTY_N(f_csr_rsps$EMPTY_N));

  // submodule f_fpr_reqs
  FIFO2 #(.width(32'd70), .guarded(1'd1)) f_fpr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_fpr_reqs$D_IN),
						     .ENQ(f_fpr_reqs$ENQ),
						     .DEQ(f_fpr_reqs$DEQ),
						     .CLR(f_fpr_reqs$CLR),
						     .D_OUT(f_fpr_reqs$D_OUT),
						     .FULL_N(f_fpr_reqs$FULL_N),
						     .EMPTY_N(f_fpr_reqs$EMPTY_N));

  // submodule f_fpr_rsps
  FIFO2 #(.width(32'd65), .guarded(1'd1)) f_fpr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_fpr_rsps$D_IN),
						     .ENQ(f_fpr_rsps$ENQ),
						     .DEQ(f_fpr_rsps$DEQ),
						     .CLR(f_fpr_rsps$CLR),
						     .D_OUT(f_fpr_rsps$D_OUT),
						     .FULL_N(f_fpr_rsps$FULL_N),
						     .EMPTY_N(f_fpr_rsps$EMPTY_N));

  // submodule f_gpr_reqs
  FIFO2 #(.width(32'd70), .guarded(1'd1)) f_gpr_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_gpr_reqs$D_IN),
						     .ENQ(f_gpr_reqs$ENQ),
						     .DEQ(f_gpr_reqs$DEQ),
						     .CLR(f_gpr_reqs$CLR),
						     .D_OUT(f_gpr_reqs$D_OUT),
						     .FULL_N(f_gpr_reqs$FULL_N),
						     .EMPTY_N(f_gpr_reqs$EMPTY_N));

  // submodule f_gpr_rsps
  FIFO2 #(.width(32'd65), .guarded(1'd1)) f_gpr_rsps(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_gpr_rsps$D_IN),
						     .ENQ(f_gpr_rsps$ENQ),
						     .DEQ(f_gpr_rsps$DEQ),
						     .CLR(f_gpr_rsps$CLR),
						     .D_OUT(f_gpr_rsps$D_OUT),
						     .FULL_N(f_gpr_rsps$FULL_N),
						     .EMPTY_N(f_gpr_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_run_halt_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_run_halt_reqs(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_run_halt_reqs$D_IN),
							 .ENQ(f_run_halt_reqs$ENQ),
							 .DEQ(f_run_halt_reqs$DEQ),
							 .CLR(f_run_halt_reqs$CLR),
							 .D_OUT(f_run_halt_reqs$D_OUT),
							 .FULL_N(f_run_halt_reqs$FULL_N),
							 .EMPTY_N(f_run_halt_reqs$EMPTY_N));

  // submodule f_run_halt_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_run_halt_rsps(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_run_halt_rsps$D_IN),
							 .ENQ(f_run_halt_rsps$ENQ),
							 .DEQ(f_run_halt_rsps$DEQ),
							 .CLR(f_run_halt_rsps$CLR),
							 .D_OUT(f_run_halt_rsps$D_OUT),
							 .FULL_N(f_run_halt_rsps$FULL_N),
							 .EMPTY_N(f_run_halt_rsps$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(fpr_regfile$read_rs1_port2),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(gpr_regfile$read_rs1_port2),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dma_server_araddr(near_mem$dma_server_araddr),
		      .dma_server_arburst(near_mem$dma_server_arburst),
		      .dma_server_arcache(near_mem$dma_server_arcache),
		      .dma_server_arid(near_mem$dma_server_arid),
		      .dma_server_arlen(near_mem$dma_server_arlen),
		      .dma_server_arlock(near_mem$dma_server_arlock),
		      .dma_server_arprot(near_mem$dma_server_arprot),
		      .dma_server_arqos(near_mem$dma_server_arqos),
		      .dma_server_arregion(near_mem$dma_server_arregion),
		      .dma_server_arsize(near_mem$dma_server_arsize),
		      .dma_server_arvalid(near_mem$dma_server_arvalid),
		      .dma_server_awaddr(near_mem$dma_server_awaddr),
		      .dma_server_awburst(near_mem$dma_server_awburst),
		      .dma_server_awcache(near_mem$dma_server_awcache),
		      .dma_server_awid(near_mem$dma_server_awid),
		      .dma_server_awlen(near_mem$dma_server_awlen),
		      .dma_server_awlock(near_mem$dma_server_awlock),
		      .dma_server_awprot(near_mem$dma_server_awprot),
		      .dma_server_awqos(near_mem$dma_server_awqos),
		      .dma_server_awregion(near_mem$dma_server_awregion),
		      .dma_server_awsize(near_mem$dma_server_awsize),
		      .dma_server_awvalid(near_mem$dma_server_awvalid),
		      .dma_server_bready(near_mem$dma_server_bready),
		      .dma_server_rready(near_mem$dma_server_rready),
		      .dma_server_wdata(near_mem$dma_server_wdata),
		      .dma_server_wlast(near_mem$dma_server_wlast),
		      .dma_server_wstrb(near_mem$dma_server_wstrb),
		      .dma_server_wvalid(near_mem$dma_server_wvalid),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .mem_master_arready(near_mem$mem_master_arready),
		      .mem_master_awready(near_mem$mem_master_awready),
		      .mem_master_bid(near_mem$mem_master_bid),
		      .mem_master_bresp(near_mem$mem_master_bresp),
		      .mem_master_bvalid(near_mem$mem_master_bvalid),
		      .mem_master_rdata(near_mem$mem_master_rdata),
		      .mem_master_rid(near_mem$mem_master_rid),
		      .mem_master_rlast(near_mem$mem_master_rlast),
		      .mem_master_rresp(near_mem$mem_master_rresp),
		      .mem_master_rvalid(near_mem$mem_master_rvalid),
		      .mem_master_wready(near_mem$mem_master_wready),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .set_watch_tohost_tohost_addr(near_mem$set_watch_tohost_tohost_addr),
		      .set_watch_tohost_watch_tohost(near_mem$set_watch_tohost_watch_tohost),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma_server_request_put(near_mem$EN_sfence_vma_server_request_put),
		      .EN_sfence_vma_server_response_get(near_mem$EN_sfence_vma_server_response_get),
		      .EN_set_watch_tohost(near_mem$EN_set_watch_tohost),
		      .EN_ma_ddr4_ready(near_mem$EN_ma_ddr4_ready),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .mem_master_awvalid(near_mem$mem_master_awvalid),
		      .mem_master_awid(near_mem$mem_master_awid),
		      .mem_master_awaddr(near_mem$mem_master_awaddr),
		      .mem_master_awlen(near_mem$mem_master_awlen),
		      .mem_master_awsize(near_mem$mem_master_awsize),
		      .mem_master_awburst(near_mem$mem_master_awburst),
		      .mem_master_awlock(near_mem$mem_master_awlock),
		      .mem_master_awcache(near_mem$mem_master_awcache),
		      .mem_master_awprot(near_mem$mem_master_awprot),
		      .mem_master_awqos(near_mem$mem_master_awqos),
		      .mem_master_awregion(near_mem$mem_master_awregion),
		      .mem_master_wvalid(near_mem$mem_master_wvalid),
		      .mem_master_wdata(near_mem$mem_master_wdata),
		      .mem_master_wstrb(near_mem$mem_master_wstrb),
		      .mem_master_wlast(near_mem$mem_master_wlast),
		      .mem_master_bready(near_mem$mem_master_bready),
		      .mem_master_arvalid(near_mem$mem_master_arvalid),
		      .mem_master_arid(near_mem$mem_master_arid),
		      .mem_master_araddr(near_mem$mem_master_araddr),
		      .mem_master_arlen(near_mem$mem_master_arlen),
		      .mem_master_arsize(near_mem$mem_master_arsize),
		      .mem_master_arburst(near_mem$mem_master_arburst),
		      .mem_master_arlock(near_mem$mem_master_arlock),
		      .mem_master_arcache(near_mem$mem_master_arcache),
		      .mem_master_arprot(near_mem$mem_master_arprot),
		      .mem_master_arqos(near_mem$mem_master_arqos),
		      .mem_master_arregion(near_mem$mem_master_arregion),
		      .mem_master_rready(near_mem$mem_master_rready),
		      .RDY_server_fence_i_request_put(),
		      .RDY_server_fence_i_response_get(),
		      .RDY_server_fence_request_put(),
		      .RDY_server_fence_response_get(),
		      .RDY_sfence_vma_server_request_put(),
		      .RDY_sfence_vma_server_response_get(),
		      .dma_server_awready(near_mem$dma_server_awready),
		      .dma_server_wready(near_mem$dma_server_wready),
		      .dma_server_bvalid(near_mem$dma_server_bvalid),
		      .dma_server_bid(near_mem$dma_server_bid),
		      .dma_server_bresp(near_mem$dma_server_bresp),
		      .dma_server_arready(near_mem$dma_server_arready),
		      .dma_server_rvalid(near_mem$dma_server_rvalid),
		      .dma_server_rid(near_mem$dma_server_rid),
		      .dma_server_rdata(near_mem$dma_server_rdata),
		      .dma_server_rresp(near_mem$dma_server_rresp),
		      .dma_server_rlast(near_mem$dma_server_rlast),
		      .RDY_set_watch_tohost(),
		      .mv_tohost_value(near_mem$mv_tohost_value),
		      .RDY_mv_tohost_value(),
		      .RDY_ma_ddr4_ready(),
		      .mv_status(near_mem$mv_status));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_reqs$ENQ),
					       .DEQ(stage1_f_reset_reqs$DEQ),
					       .CLR(stage1_f_reset_reqs$CLR),
					       .FULL_N(stage1_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_rsps$ENQ),
					       .DEQ(stage1_f_reset_rsps$DEQ),
					       .CLR(stage1_f_reset_rsps$CLR),
					       .FULL_N(stage1_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_reqs$ENQ),
					       .DEQ(stage2_f_reset_reqs$DEQ),
					       .CLR(stage2_f_reset_reqs$CLR),
					       .FULL_N(stage2_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_rsps$ENQ),
					       .DEQ(stage2_f_reset_rsps$DEQ),
					       .CLR(stage2_f_reset_rsps$CLR),
					       .FULL_N(stage2_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkFBox_Top stage2_fbox(.verbosity(4'd0),
			 .CLK(CLK),
			 .RST_N(RST_N),
			 .req_f7(stage2_fbox$req_f7),
			 .req_opcode(stage2_fbox$req_opcode),
			 .req_rm(stage2_fbox$req_rm),
			 .req_rs2(stage2_fbox$req_rs2),
			 .req_v1(stage2_fbox$req_v1),
			 .req_v2(stage2_fbox$req_v2),
			 .req_v3(stage2_fbox$req_v3),
			 .EN_server_reset_request_put(stage2_fbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(stage2_fbox$EN_server_reset_response_get),
			 .EN_req(stage2_fbox$EN_req),
			 .RDY_server_reset_request_put(stage2_fbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(stage2_fbox$RDY_server_reset_response_get),
			 .valid(stage2_fbox$valid),
			 .word_fst(stage2_fbox$word_fst),
			 .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_reqs$ENQ),
					       .DEQ(stage3_f_reset_reqs$DEQ),
					       .CLR(stage3_f_reset_reqs$CLR),
					       .FULL_N(stage3_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_rsps$ENQ),
					       .DEQ(stage3_f_reset_rsps$DEQ),
					       .CLR(stage3_f_reset_rsps$CLR),
					       .FULL_N(stage3_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // submodule stageD_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stageD_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageD_f_reset_reqs$ENQ),
					       .DEQ(stageD_f_reset_reqs$DEQ),
					       .CLR(stageD_f_reset_reqs$CLR),
					       .FULL_N(stageD_f_reset_reqs$FULL_N),
					       .EMPTY_N(stageD_f_reset_reqs$EMPTY_N));

  // submodule stageD_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stageD_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageD_f_reset_rsps$ENQ),
					       .DEQ(stageD_f_reset_rsps$DEQ),
					       .CLR(stageD_f_reset_rsps$CLR),
					       .FULL_N(stageD_f_reset_rsps$FULL_N),
					       .EMPTY_N(stageD_f_reset_rsps$EMPTY_N));

  // submodule stageF_branch_predictor
  mkBranch_Predictor stageF_branch_predictor(.CLK(CLK),
					     .RST_N(RST_N),
					     .bp_train_cf_info(stageF_branch_predictor$bp_train_cf_info),
					     .bp_train_instr(stageF_branch_predictor$bp_train_instr),
					     .bp_train_is_i32_not_i16(stageF_branch_predictor$bp_train_is_i32_not_i16),
					     .bp_train_pc(stageF_branch_predictor$bp_train_pc),
					     .predict_req_pc(stageF_branch_predictor$predict_req_pc),
					     .predict_rsp_instr(stageF_branch_predictor$predict_rsp_instr),
					     .predict_rsp_is_i32_not_i16(stageF_branch_predictor$predict_rsp_is_i32_not_i16),
					     .EN_reset(stageF_branch_predictor$EN_reset),
					     .EN_predict_req(stageF_branch_predictor$EN_predict_req),
					     .EN_bp_train(stageF_branch_predictor$EN_bp_train),
					     .RDY_reset(),
					     .RDY_predict_req(stageF_branch_predictor$RDY_predict_req),
					     .predict_rsp(stageF_branch_predictor$predict_rsp),
					     .RDY_bp_train());

  // submodule stageF_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stageF_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageF_f_reset_reqs$ENQ),
					       .DEQ(stageF_f_reset_reqs$DEQ),
					       .CLR(stageF_f_reset_reqs$CLR),
					       .FULL_N(stageF_f_reset_reqs$FULL_N),
					       .EMPTY_N(stageF_f_reset_reqs$EMPTY_N));

  // submodule stageF_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stageF_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageF_f_reset_rsps$ENQ),
					       .DEQ(stageF_f_reset_rsps$DEQ),
					       .CLR(stageF_f_reset_rsps$CLR),
					       .FULL_N(stageF_f_reset_rsps$FULL_N),
					       .EMPTY_N(stageF_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 &&
	     rg_state != 4'd13 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_WFI_count
  assign CAN_FIRE_RL_rl_WFI_count = rg_state == 4'd13 ;
  assign WILL_FIRE_RL_rl_WFI_count =
	     CAN_FIRE_RL_rl_WFI_count && !WILL_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_debug_run_redundant
  assign CAN_FIRE_RL_rl_debug_run_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run_redundant =
	     CAN_FIRE_RL_rl_debug_run_redundant ;

  // rule RL_rl_debug_halt
  assign CAN_FIRE_RL_rl_debug_halt =
	     f_run_halt_reqs$EMPTY_N && !f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_halt =
	     CAN_FIRE_RL_rl_debug_halt && !WILL_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_debug_halt_redundant
  assign CAN_FIRE_RL_rl_debug_halt_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     !f_run_halt_reqs$D_OUT &&
	     (rg_state == 4'd0 || rg_state == 4'd1 || rg_state == 4'd2 ||
	      rg_state == 4'd3) ;
  assign WILL_FIRE_RL_rl_debug_halt_redundant =
	     CAN_FIRE_RL_rl_debug_halt_redundant &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_debug_read_gpr
  assign CAN_FIRE_RL_rl_debug_read_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_gpr_reqs$D_OUT[69] ;
  assign WILL_FIRE_RL_rl_debug_read_gpr = CAN_FIRE_RL_rl_debug_read_gpr ;

  // rule RL_rl_debug_write_gpr
  assign CAN_FIRE_RL_rl_debug_write_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_gpr_reqs$D_OUT[69] ;
  assign WILL_FIRE_RL_rl_debug_write_gpr = CAN_FIRE_RL_rl_debug_write_gpr ;

  // rule RL_rl_debug_gpr_access_busy
  assign CAN_FIRE_RL_rl_debug_gpr_access_busy =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_gpr_access_busy =
	     CAN_FIRE_RL_rl_debug_gpr_access_busy ;

  // rule RL_rl_debug_read_fpr
  assign CAN_FIRE_RL_rl_debug_read_fpr =
	     f_fpr_reqs$EMPTY_N && f_fpr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_fpr_reqs$D_OUT[69] ;
  assign WILL_FIRE_RL_rl_debug_read_fpr = CAN_FIRE_RL_rl_debug_read_fpr ;

  // rule RL_rl_debug_write_fpr
  assign CAN_FIRE_RL_rl_debug_write_fpr =
	     f_fpr_reqs$EMPTY_N && f_fpr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_fpr_reqs$D_OUT[69] ;
  assign WILL_FIRE_RL_rl_debug_write_fpr = CAN_FIRE_RL_rl_debug_write_fpr ;

  // rule RL_rl_debug_fpr_access_busy
  assign CAN_FIRE_RL_rl_debug_fpr_access_busy =
	     f_fpr_reqs$EMPTY_N && f_fpr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_fpr_access_busy =
	     CAN_FIRE_RL_rl_debug_fpr_access_busy ;

  // rule RL_rl_debug_read_csr
  assign CAN_FIRE_RL_rl_debug_read_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_csr_reqs$D_OUT[76] ;
  assign WILL_FIRE_RL_rl_debug_read_csr = CAN_FIRE_RL_rl_debug_read_csr ;

  // rule RL_rl_debug_run
  assign CAN_FIRE_RL_rl_debug_run =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3058 &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run =
	     CAN_FIRE_RL_rl_debug_run &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_debug_write_csr
  assign CAN_FIRE_RL_rl_debug_write_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_csr_reqs$D_OUT[76] ;
  assign WILL_FIRE_RL_rl_debug_write_csr =
	     CAN_FIRE_RL_rl_debug_write_csr && !WILL_FIRE_RL_rl_debug_run ;

  // rule RL_rl_debug_csr_access_busy
  assign CAN_FIRE_RL_rl_debug_csr_access_busy =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_csr_access_busy =
	     CAN_FIRE_RL_rl_debug_csr_access_busy ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd4 && !stage3_rg_full && stage2_rg_full &&
	     NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2834 &&
	     (x_out_trap_info_exc_code__h15913 != 4'd3 ||
	      !csr_regfile$dcsr_break_enters_debug) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     rg_state == 4'd5 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = CAN_FIRE_RL_rl_stage1_CSRR_W_2 ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1035 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = CAN_FIRE_RL_rl_stage1_CSRR_W ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1050 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state_7_EQ_9_926_AND_NOT_stageF_rg_full_126_ETC___d2927 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2960 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2974 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = CAN_FIRE_RL_rl_stage1_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2978 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = CAN_FIRE_RL_rl_stage1_FENCE ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1099 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state == 4'd12 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1160 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state_7_EQ_13_0_AND_csr_regfile_wfi_resume__ETC___d3001 ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd13 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state_7_EQ_6_005_AND_NOT_stageF_rg_full_126_ETC___d3006 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_trap_BREAK_to_Debug_Mode
  assign CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d3008 &&
	     x_out_trap_info_exc_code__h15913 == 4'd3 &&
	     csr_regfile$dcsr_break_enters_debug ;
  assign WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_BREAK_cache_flush_finish
  assign CAN_FIRE_RL_rl_BREAK_cache_flush_finish =
	     f_run_halt_rsps$FULL_N && rg_state == 4'd2 ;
  assign WILL_FIRE_RL_rl_BREAK_cache_flush_finish =
	     CAN_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_reset_from_Debug_Module
  assign CAN_FIRE_RL_rl_reset_from_Debug_Module =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_from_Debug_Module =
	     CAN_FIRE_RL_rl_reset_from_Debug_Module &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	     !WILL_FIRE_RL_rl_stage1_interrupt &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_trap_fetch &&
	     !WILL_FIRE_RL_rl_reset_from_WFI &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_finish_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_finish_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_trap &&
	     !WILL_FIRE_RL_rl_stage1_trap &&
	     !WILL_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd4 &&
	     stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d3022 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_rl_stage1_stop
  assign CAN_FIRE_RL_rl_stage1_stop =
	     rg_state == 4'd4 &&
	     NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3039 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign WILL_FIRE_RL_rl_stage1_stop =
	     CAN_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stageF_f_reset_rsps_i_notEmpty__273_AND_stageD_ETC___d2293 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2353 &&
	     rg_state_7_EQ_4_354_AND_stage3_rg_full_04_OR_s_ETC___d2366 &&
	     (NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2376 ||
	      IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2377 ||
	      stage2_rg_full ||
	      stage3_rg_full) ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_debug_halt &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__251__ETC___d2263 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     imem_rg_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_fbox$RDY_server_reset_response_get &&
	     stage2_f_reset_rsps$FULL_N &&
	     stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin =
	     stage2_fbox$RDY_server_reset_request_put &&
	     stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_stageD_rl_reset
  assign CAN_FIRE_RL_stageD_rl_reset =
	     stageD_f_reset_reqs$EMPTY_N && stageD_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageD_rl_reset = CAN_FIRE_RL_stageD_rl_reset ;

  // rule RL_stageF_rl_reset
  assign CAN_FIRE_RL_stageF_rl_reset =
	     stageF_f_reset_reqs$EMPTY_N && stageF_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageF_rl_reset = CAN_FIRE_RL_stageF_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_csr_regfile$mav_csr_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ;
  assign MUX_csr_regfile$write_dpc_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_f_run_halt_rsps$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ;
  assign MUX_fpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     stage3_rg_stage3[69] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     !stage3_rg_stage3[69] ;
  assign MUX_imem_rg_cache_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_rg_cache_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ;
  assign MUX_imem_rg_cache_b16$write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_imem_rg_pc$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_instret_reported$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2673 ;
  assign MUX_rg_next_pc$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_pc_reported$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2347 ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_step_count$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h36660 or
	  IF_csr_regfile_read_csr_rg_trap_instr_865_BITS_ETC___d2918)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_865_BITS_ETC___d2918;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h36660;
    endcase
  end
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 =
	     rg_stop_req ? 3'd3 : 3'd4 ;
  assign MUX_f_csr_rsps$enq_1__VAL_3 =
	     { 1'd1, csr_regfile$read_csr_port2[63:0] } ;
  assign MUX_f_fpr_rsps$enq_1__VAL_3 = { 1'd1, fpr_regfile$read_rs1_port2 } ;
  assign MUX_f_gpr_rsps$enq_1__VAL_3 = { 1'd1, gpr_regfile$read_rs1_port2 } ;
  assign MUX_imem_rg_cache_addr$write_1__VAL_1 =
	     (near_mem$imem_valid && !near_mem$imem_exc) ?
	       near_mem$imem_pc :
	       64'h0000000000000001 ;
  assign MUX_imem_rg_cache_addr$write_1__VAL_2 =
	     near_mem$imem_exc ? 64'h0000000000000001 : near_mem$imem_pc ;
  assign MUX_imem_rg_tval$write_1__VAL_2 =
	     (NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2753 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h33402 :
	       stageF_branch_predictor$predict_rsp ;
  assign MUX_imem_rg_tval$write_1__VAL_3 =
	     (NOT_rg_next_pc_929_BITS_1_TO_0_930_EQ_0b0_931__ETC___d2937 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h45902 :
	       rg_next_pc ;
  assign MUX_imem_rg_tval$write_1__VAL_4 =
	     (NOT_csr_regfile_read_dpc__062_BITS_1_TO_0_063__ETC___d3070 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h48358 :
	       csr_regfile$read_dpc ;
  assign MUX_imem_rg_tval$write_1__VAL_5 = near_mem$imem_pc + 64'd4 ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     (NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2753 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h33402 :
	       addr_of_b32__h33274 ;
  assign MUX_near_mem$imem_req_2__VAL_4 =
	     (NOT_rg_next_pc_929_BITS_1_TO_0_930_EQ_0b0_931__ETC___d2937 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h45902 :
	       addr_of_b32__h45774 ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     (NOT_csr_regfile_read_dpc__062_BITS_1_TO_0_063__ETC___d3070 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h48358 :
	       addr_of_b32__h48230 ;
  assign MUX_rg_state$write_1__VAL_2 = rg_run_on_reset ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_1 ? 4'd9 : 4'd5 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     csr_regfile$access_permitted_2 ? 4'd9 : 4'd5 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { stage1_rg_stage_input[401:338],
	       4'd2,
	       stage1_rg_stage_input[332] ?
		 stage1_rg_stage_input[327:264] :
		 trap_info_tval__h15908 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { value__h9415,
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[389:326] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[332] ?
		 stage1_rg_stage_input[331:264] :
		 { alu_outputs_exc_code__h12528, trap_info_tval__h15908 } } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { stage1_rg_stage_input[401:338], x_exc_code__h46908, 64'd0 } ;
  assign MUX_rg_trap_instr$write_1__VAL_2 = stage1_rg_stage_input[263:232] ;
  assign MUX_rg_wfi_counter$write_1__VAL_1 = rg_wfi_counter + 32'd1 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2677 &&
	     stageD_rg_full ||
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2774 ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2332 ?
	       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	       (IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 ||
		stage2_rg_stage2[397:395] != 3'd0 &&
		IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 &&
		stage2_rg_full) :
	       stage2_rg_stage2[397:395] != 3'd0 &&
	       IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 &&
	       stage2_rg_full ;
  assign MUX_stage3_rg_full$write_1__VAL_2 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) ;
  assign MUX_stageD_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 ||
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2336 &&
	     stageD_rg_full ;
  assign MUX_stageF_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 ?
	       NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2792 ||
	       IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2336 &&
	       stageD_rg_full :
	       (IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2336 &&
		stageD_rg_full ||
		!near_mem$imem_valid ||
		NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144) &&
	       stageF_rg_full ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       hart0_put_other_req_put ;
  assign cfg_verbosity$EN = EN_hart0_put_other_req_put || EN_set_verbosity ;

  // register imem_rg_cache_addr
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__VAL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_rg_cache_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  near_mem$imem_pc or MUX_imem_rg_cache_b16$write_1__PSEL_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_1;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_cache_addr$D_IN = near_mem$imem_pc;
      MUX_imem_rg_cache_b16$write_1__PSEL_1:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_1;
      default: imem_rg_cache_addr$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_cache_addr$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_cache_b16
  assign imem_rg_cache_b16$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_cache_b16$EN =
	     MUX_imem_rg_cache_b16$write_1__PSEL_1 && near_mem$imem_valid &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_pc
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  rg_next_pc or WILL_FIRE_RL_rl_debug_run or csr_regfile$read_dpc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_pc$D_IN = 64'h0000000080000000;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_pc$D_IN = stageF_branch_predictor$predict_rsp;
      MUX_imem_rg_pc$write_1__SEL_3: imem_rg_pc$D_IN = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run: imem_rg_pc$D_IN = csr_regfile$read_dpc;
      default: imem_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register imem_rg_priv
  assign imem_rg_priv$D_IN = rg_cur_priv ;
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_tval
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_rg_tval$write_1__VAL_2 or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  MUX_imem_rg_tval$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_debug_run or
	  MUX_imem_rg_tval$write_1__VAL_4 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_tval$D_IN = 64'h0000000080000000;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_2;
      MUX_imem_rg_pc$write_1__SEL_3:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_3;
      WILL_FIRE_RL_rl_debug_run:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_4;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_5;
      default: imem_rg_tval$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = stage1_rg_stage_input[401:338] ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h10894 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_epoch
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  new_epoch__h27662 or
	  MUX_imem_rg_cache_b16$write_1__PSEL_1 or
	  WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  rg_epoch$D_IN = new_epoch__h27662;
      MUX_imem_rg_cache_b16$write_1__PSEL_1:
	  rg_epoch$D_IN = new_epoch__h27662;
      WILL_FIRE_RL_rl_reset_start: rg_epoch$D_IN = 2'd0;
      default: rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_instret_reported
  assign rg_instret_reported$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_instret_reported$EN =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_11 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h10637 or
	  MUX_rg_next_pc$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_ret_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h10637;
      MUX_rg_next_pc$write_1__SEL_2: rg_next_pc$D_IN = x_out_next_pc__h10637;
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      default: rg_next_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2673 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register rg_pc_reported
  always@(WILL_FIRE_RL_rl_trap or
	  rg_trap_info or
	  MUX_rg_pc_reported$write_1__SEL_4 or
	  stage1_rg_stage_input or
	  MUX_rg_instret_reported$write_1__SEL_1 or
	  stage2_rg_stage2 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_2 or rg_csr_pc)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap: rg_pc_reported$D_IN = rg_trap_info[131:68];
      MUX_rg_pc_reported$write_1__SEL_4:
	  rg_pc_reported$D_IN = stage1_rg_stage_input[401:338];
      MUX_rg_instret_reported$write_1__SEL_1:
	  rg_pc_reported$D_IN = stage2_rg_stage2[493:430];
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_2:
	  rg_pc_reported$D_IN = rg_csr_pc;
      default: rg_pc_reported$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pc_reported$EN =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_11 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_4 or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_regfile$write_dpc_1__SEL_2 or
	  WILL_FIRE_RL_rl_BREAK_cache_flush_finish or
	  MUX_imem_rg_cache_b16$write_1__PSEL_1 or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__SEL_11 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_csr_regfile$write_dpc_1__SEL_2: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_BREAK_cache_flush_finish: rg_state$D_IN = 4'd3;
      MUX_imem_rg_cache_b16$write_1__PSEL_1: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 4'd5;
      MUX_rg_state$write_1__SEL_1 || MUX_rg_state$write_1__SEL_11:
	  rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd8;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd12;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd13;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2347 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_step_count
  assign rg_step_count$D_IN = !MUX_rg_step_count$write_1__SEL_4 ;
  assign rg_step_count$EN =
	     _dand1rg_step_count$EN_write || _dand2rg_step_count$EN_write ||
	     (WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_xRET) &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stop_req
  assign rg_stop_req$D_IN = !MUX_rg_step_count$write_1__SEL_4 ;
  assign rg_stop_req$EN =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_debug_halt ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     WILL_FIRE_RL_rl_stage2_nonpipe ?
	       stage2_rg_stage2[429:398] :
	       stage1_rg_stage_input[263:232] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_wfi_counter
  assign rg_wfi_counter$D_IN =
	     WILL_FIRE_RL_rl_WFI_count ?
	       MUX_rg_wfi_counter$write_1__VAL_1 :
	       32'd1 ;
  assign rg_wfi_counter$EN =
	     WILL_FIRE_RL_rl_WFI_count || WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap ||
    WILL_FIRE_RL_rl_debug_run:
	stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ;

  // register stage1_rg_stage_input
  assign stage1_rg_stage_input$D_IN =
	     { stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168],
	       stageD_rg_data[165:96],
	       _theResult____h5735,
	       stageD_rg_data[79:0],
	       _theResult____h5735[6:0],
	       _theResult____h5735[11:7],
	       _theResult____h5735[19:15],
	       _theResult____h5735[24:20],
	       _theResult____h5735[31:27],
	       _theResult____h5735[31:20],
	       _theResult____h5735[14:12],
	       _theResult____h5735[31:27],
	       _theResult____h5735[31:25],
	       decoded_instr_funct10__h31694,
	       _theResult____h5735[31:20],
	       decoded_instr_imm12_S__h31696,
	       decoded_instr_imm13_SB__h31697,
	       _theResult____h5735[31:12],
	       decoded_instr_imm21_UJ__h31699,
	       _theResult____h5735[27:20],
	       _theResult____h5735[26:25] } ;
  assign stage1_rg_stage_input$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2677 &&
	     stageD_rg_full ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset_begin or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset_begin: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap ||
    WILL_FIRE_RL_rl_debug_run:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = WILL_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       stage1_rg_stage_input[401:338],
	       IF_stage1_rg_stage_input_52_BITS_335_TO_334_53_ETC___d2554 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2447 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage3_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN = MUX_stage3_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_debug_run:
	stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[493:398],
	       stage2_rg_stage2[495:494],
	       1'd1,
	       x_out_data_to_stage3_rd__h9058,
	       x_out_data_to_stage3_rd_val__h9059,
	       stage2_rg_stage2[397:395] != 3'd0 &&
	       stage2_rg_stage2[397:395] != 3'd1 &&
	       stage2_rg_stage2[397:395] != 3'd4 &&
	       stage2_rg_stage2[397:395] != 3'd2 &&
	       stage2_rg_stage2[397:395] != 3'd3,
	       stage2_rg_stage2[397:395] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q4,
	       x_out_data_to_stage3_fpr_flags__h9062,
	       x_out_data_to_stage3_frd_val__h9063 } ;
  assign stage3_rg_stage3$EN = MUX_rg_instret_reported$write_1__SEL_1 ;

  // register stageD_rg_data
  assign stageD_rg_data$D_IN =
	     { imem_rg_pc,
	       stageF_rg_epoch,
	       stageF_rg_priv,
	       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104 ||
	       imem_rg_pc[1:0] == 2'b0 &&
	       imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	       near_mem$imem_instr[1:0] == 2'b11,
	       near_mem$imem_exc,
	       near_mem$imem_exc_code,
	       imem_rg_tval,
	       d_instr__h26151,
	       stageF_branch_predictor$predict_rsp } ;
  assign stageD_rg_data$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 ;

  // register stageD_rg_full
  always@(WILL_FIRE_RL_stageD_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageD_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stageD_rl_reset: stageD_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageD_rg_full$D_IN = MUX_stageD_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap ||
    WILL_FIRE_RL_rl_debug_run:
	stageD_rg_full$D_IN = 1'd0;
    default: stageD_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageD_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stageD_rl_reset ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register stageF_rg_epoch
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_rg_epoch or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  new_epoch__h27662 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_epoch$D_IN = 2'd0;
    MUX_imem_rg_cache_addr$write_1__SEL_2:
	stageF_rg_epoch$D_IN = stageF_rg_epoch;
    MUX_imem_rg_cache_addr$write_1__SEL_1:
	stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_trap_fetch: stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_WFI_resume: stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_finish_SFENCE_VMA:
	stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_finish_FENCE: stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_finish_FENCE_I: stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_epoch$D_IN = new_epoch__h27662;
    WILL_FIRE_RL_rl_debug_run: stageF_rg_epoch$D_IN = new_epoch__h27662;
    default: stageF_rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stageF_rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_stageF_rl_reset ;

  // register stageF_rg_full
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageF_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageF_rg_full$D_IN = MUX_stageF_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_debug_run:
	stageF_rg_full$D_IN = 1'd1;
    default: stageF_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stageF_rl_reset ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register stageF_rg_priv
  assign stageF_rg_priv$D_IN = rg_cur_priv ;
  assign stageF_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h36382 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  assign csr_regfile$csr_ret_actions_from_priv =
	     (stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	      NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2946) ?
	       2'b11 :
	       ((stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
		 !stage1_rg_stage_input[332] &&
		 stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d2954) ?
		  2'b01 :
		  2'b0) ;
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[67:64] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[131:68] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[63:0] ;
  assign csr_regfile$dcsr_break_enters_debug_cur_priv = rg_cur_priv ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$ma_set_csr_time_t = ma_set_csr_time_t ;
  assign csr_regfile$ma_update_fcsr_fflags_flags = stage3_rg_stage3[68:64] ;
  assign csr_regfile$ma_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_csr_regfile$mav_csr_write_1__SEL_2) ?
	       rg_trap_instr[31:20] :
	       f_csr_reqs$D_OUT[75:64] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  rs1_val__h35457 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_2 or
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 or
	  WILL_FIRE_RL_rl_debug_write_csr or f_csr_reqs$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  csr_regfile$mav_csr_write_word = rs1_val__h35457;
      MUX_csr_regfile$mav_csr_write_1__SEL_2:
	  csr_regfile$mav_csr_write_word =
	      MUX_csr_regfile$mav_csr_write_2__VAL_2;
      WILL_FIRE_RL_rl_debug_write_csr:
	  csr_regfile$mav_csr_write_word = f_csr_reqs$D_OUT[63:0];
      default: csr_regfile$mav_csr_write_word =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$mv_update_fcsr_fflags_flags = 5'h0 ;
  assign csr_regfile$mv_update_mstatus_fs_fs = 2'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = f_csr_reqs$D_OUT[75:64] ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  always@(MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_stop or
	  MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 or
	  WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd3;
      WILL_FIRE_RL_rl_stage1_stop:
	  csr_regfile$write_dcsr_cause_priv_cause =
	      MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd1;
      default: csr_regfile$write_dcsr_cause_priv_cause =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$write_dcsr_cause_priv_priv =
	     (WILL_FIRE_RL_rl_stage1_stop ||
	      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode) ?
	       rg_cur_priv :
	       2'b11 ;
  assign csr_regfile$write_dpc_pc =
	     MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 ?
	       64'h0000000080000000 :
	       stage1_rg_stage_input[401:338] ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ||
	     WILL_FIRE_RL_rl_debug_write_csr ;
  assign csr_regfile$EN_ma_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     stage3_rg_stage3[70] ;
  assign csr_regfile$EN_ma_update_mstatus_fs =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     (stage3_rg_stage3[70] || stage3_rg_stage3[69]) ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_write_dpc =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_write_dcsr_cause_priv =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_csr_reqs
  assign f_csr_reqs$D_IN = hart0_csr_mem_server_request_put ;
  assign f_csr_reqs$ENQ = EN_hart0_csr_mem_server_request_put ;
  assign f_csr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_reqs$CLR = 1'b0 ;

  // submodule f_csr_rsps
  always@(WILL_FIRE_RL_rl_debug_csr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_csr or
	  WILL_FIRE_RL_rl_debug_read_csr or MUX_f_csr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_csr_access_busy:
	  f_csr_rsps$D_IN = 65'h0AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_csr:
	  f_csr_rsps$D_IN = 65'h1AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_csr:
	  f_csr_rsps$D_IN = MUX_f_csr_rsps$enq_1__VAL_3;
      default: f_csr_rsps$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_csr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_rsps$DEQ = EN_hart0_csr_mem_server_response_get ;
  assign f_csr_rsps$CLR = 1'b0 ;

  // submodule f_fpr_reqs
  assign f_fpr_reqs$D_IN = hart0_fpr_mem_server_request_put ;
  assign f_fpr_reqs$ENQ = EN_hart0_fpr_mem_server_request_put ;
  assign f_fpr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_fpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_fpr ||
	     WILL_FIRE_RL_rl_debug_read_fpr ;
  assign f_fpr_reqs$CLR = 1'b0 ;

  // submodule f_fpr_rsps
  always@(WILL_FIRE_RL_rl_debug_fpr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_fpr or
	  WILL_FIRE_RL_rl_debug_read_fpr or MUX_f_fpr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_fpr_access_busy:
	  f_fpr_rsps$D_IN = 65'h0AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_fpr:
	  f_fpr_rsps$D_IN = 65'h1AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_fpr:
	  f_fpr_rsps$D_IN = MUX_f_fpr_rsps$enq_1__VAL_3;
      default: f_fpr_rsps$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fpr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_fpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_fpr ||
	     WILL_FIRE_RL_rl_debug_read_fpr ;
  assign f_fpr_rsps$DEQ = EN_hart0_fpr_mem_server_response_get ;
  assign f_fpr_rsps$CLR = 1'b0 ;

  // submodule f_gpr_reqs
  assign f_gpr_reqs$D_IN = hart0_gpr_mem_server_request_put ;
  assign f_gpr_reqs$ENQ = EN_hart0_gpr_mem_server_request_put ;
  assign f_gpr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_reqs$CLR = 1'b0 ;

  // submodule f_gpr_rsps
  always@(WILL_FIRE_RL_rl_debug_gpr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  WILL_FIRE_RL_rl_debug_read_gpr or MUX_f_gpr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_gpr_access_busy:
	  f_gpr_rsps$D_IN = 65'h0AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_gpr:
	  f_gpr_rsps$D_IN = 65'h1AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_gpr:
	  f_gpr_rsps$D_IN = MUX_f_gpr_rsps$enq_1__VAL_3;
      default: f_gpr_rsps$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_gpr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_rsps$DEQ = EN_hart0_gpr_mem_server_response_get ;
  assign f_gpr_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset_start ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = WILL_FIRE_RL_rl_reset_complete ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_run_halt_reqs
  assign f_run_halt_reqs$D_IN = hart0_server_run_halt_request_put ;
  assign f_run_halt_reqs$ENQ = EN_hart0_server_run_halt_request_put ;
  assign f_run_halt_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_halt ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_reqs$CLR = 1'b0 ;

  // submodule f_run_halt_rsps
  assign f_run_halt_rsps$D_IN = !MUX_f_run_halt_rsps$enq_1__SEL_1 ;
  assign f_run_halt_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_rsps$DEQ = EN_hart0_server_run_halt_response_get ;
  assign f_run_halt_rsps$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = f_fpr_reqs$D_OUT[68:64] ;
  assign fpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign fpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  assign fpr_regfile$read_rs3_rs3 = stage1_rg_stage_input[129:125] ;
  assign fpr_regfile$write_rd_rd =
	     MUX_fpr_regfile$write_rd_1__SEL_1 ?
	       stage3_rg_stage3[139:135] :
	       f_fpr_reqs$D_OUT[68:64] ;
  assign fpr_regfile$write_rd_rd_val =
	     MUX_fpr_regfile$write_rd_1__SEL_1 ?
	       stage3_rg_stage3[63:0] :
	       f_fpr_reqs$D_OUT[63:0] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     stage3_rg_stage3[69] ||
	     WILL_FIRE_RL_rl_debug_write_fpr ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = f_gpr_reqs$D_OUT[68:64] ;
  assign gpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign gpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_2 or
	  rg_trap_instr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_2:
	  gpr_regfile$write_rd_rd = rg_trap_instr[11:7];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd = f_gpr_reqs$D_OUT[68:64];
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd = stage3_rg_stage3[139:135];
      default: gpr_regfile$write_rd_rd = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_2 or
	  csr_regfile$read_csr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_2:
	  gpr_regfile$write_rd_rd_val = csr_regfile$read_csr[63:0];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd_val = f_gpr_reqs$D_OUT[63:0];
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd_val = stage3_rg_stage3[134:71];
      default: gpr_regfile$write_rd_rd_val =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     !stage3_rg_stage3[69] ||
	     WILL_FIRE_RL_rl_debug_write_gpr ;

  // submodule near_mem
  assign near_mem$dma_server_araddr = dma_server_araddr ;
  assign near_mem$dma_server_arburst = dma_server_arburst ;
  assign near_mem$dma_server_arcache = dma_server_arcache ;
  assign near_mem$dma_server_arid = dma_server_arid ;
  assign near_mem$dma_server_arlen = dma_server_arlen ;
  assign near_mem$dma_server_arlock = dma_server_arlock ;
  assign near_mem$dma_server_arprot = dma_server_arprot ;
  assign near_mem$dma_server_arqos = dma_server_arqos ;
  assign near_mem$dma_server_arregion = dma_server_arregion ;
  assign near_mem$dma_server_arsize = dma_server_arsize ;
  assign near_mem$dma_server_arvalid = dma_server_arvalid ;
  assign near_mem$dma_server_awaddr = dma_server_awaddr ;
  assign near_mem$dma_server_awburst = dma_server_awburst ;
  assign near_mem$dma_server_awcache = dma_server_awcache ;
  assign near_mem$dma_server_awid = dma_server_awid ;
  assign near_mem$dma_server_awlen = dma_server_awlen ;
  assign near_mem$dma_server_awlock = dma_server_awlock ;
  assign near_mem$dma_server_awprot = dma_server_awprot ;
  assign near_mem$dma_server_awqos = dma_server_awqos ;
  assign near_mem$dma_server_awregion = dma_server_awregion ;
  assign near_mem$dma_server_awsize = dma_server_awsize ;
  assign near_mem$dma_server_awvalid = dma_server_awvalid ;
  assign near_mem$dma_server_bready = dma_server_bready ;
  assign near_mem$dma_server_rready = dma_server_rready ;
  assign near_mem$dma_server_wdata = dma_server_wdata ;
  assign near_mem$dma_server_wlast = dma_server_wlast ;
  assign near_mem$dma_server_wstrb = dma_server_wstrb ;
  assign near_mem$dma_server_wvalid = dma_server_wvalid ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h10893 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h10894[6:0] ;
  assign near_mem$dmem_req_f3 = MUX_rg_trap_instr$write_1__VAL_2[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  assign near_mem$dmem_req_op =
	     (stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	      (stage1_rg_stage_input[151:145] == 7'b0000011 ||
	       stage1_rg_stage_input[151:145] == 7'b0000111)) ?
	       2'd0 :
	       ((stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
		 (stage1_rg_stage_input[151:145] == 7'b0100011 ||
		  stage1_rg_stage_input[151:145] == 7'b0100111)) ?
		  2'd1 :
		  2'd2) ;
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1562 or
	  alu_outputs___1_fval2__h11474 or branch_target__h11074)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0100111:
	  near_mem$dmem_req_store_value = alu_outputs___1_fval2__h11474;
      7'b1100011: near_mem$dmem_req_store_value = branch_target__h11074;
      default: near_mem$dmem_req_store_value =
		   IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1562;
    endcase
  end
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5 or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  MUX_near_mem$imem_req_2__VAL_4 or
	  WILL_FIRE_RL_rl_debug_run or MUX_near_mem$imem_req_2__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  near_mem$imem_req_addr = 64'h0000000080000000;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_rg_tval$write_1__VAL_5;
      MUX_imem_rg_pc$write_1__SEL_3:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_4;
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  assign near_mem$imem_req_mstatus_MXR =
	     (MUX_imem_rg_cache_addr$write_1__SEL_1 ||
	      MUX_imem_rg_cache_addr$write_1__SEL_2 ||
	      MUX_imem_rg_pc$write_1__SEL_3 ||
	      WILL_FIRE_RL_rl_debug_run) ?
	       csr_regfile$read_mstatus[19] :
	       imem_rg_mstatus_MXR ;
  assign near_mem$imem_req_priv =
	     (MUX_imem_rg_cache_addr$write_1__SEL_1 ||
	      MUX_imem_rg_cache_addr$write_1__SEL_2 ||
	      MUX_imem_rg_pc$write_1__SEL_3 ||
	      WILL_FIRE_RL_rl_debug_run) ?
	       rg_cur_priv :
	       imem_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  assign near_mem$imem_req_sstatus_SUM =
	     (MUX_imem_rg_cache_addr$write_1__SEL_1 ||
	      MUX_imem_rg_cache_addr$write_1__SEL_2 ||
	      MUX_imem_rg_pc$write_1__SEL_3 ||
	      WILL_FIRE_RL_rl_debug_run) ?
	       csr_regfile$read_sstatus[18] :
	       imem_rg_sstatus_SUM ;
  assign near_mem$mem_master_arready = mem_master_arready ;
  assign near_mem$mem_master_awready = mem_master_awready ;
  assign near_mem$mem_master_bid = mem_master_bid ;
  assign near_mem$mem_master_bresp = mem_master_bresp ;
  assign near_mem$mem_master_bvalid = mem_master_bvalid ;
  assign near_mem$mem_master_rdata = mem_master_rdata ;
  assign near_mem$mem_master_rid = mem_master_rid ;
  assign near_mem$mem_master_rlast = mem_master_rlast ;
  assign near_mem$mem_master_rresp = mem_master_rresp ;
  assign near_mem$mem_master_rvalid = mem_master_rvalid ;
  assign near_mem$mem_master_wready = mem_master_wready ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$set_watch_tohost_tohost_addr =
	     set_watch_tohost_tohost_addr ;
  assign near_mem$set_watch_tohost_watch_tohost =
	     set_watch_tohost_watch_tohost ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2584 ;
  assign near_mem$EN_server_fence_i_request_put =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ;
  assign near_mem$EN_server_fence_i_response_get =
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = CAN_FIRE_RL_rl_stage1_FENCE ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma_server_request_put =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign near_mem$EN_sfence_vma_server_response_get =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;
  assign near_mem$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign near_mem$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 = MUX_rg_trap_instr$write_1__VAL_2[31:25] ;
  assign stage2_fbox$req_opcode = MUX_rg_trap_instr$write_1__VAL_2[6:0] ;
  assign stage2_fbox$req_rm = rm__h11057 ;
  assign stage2_fbox$req_rs2 = MUX_rg_trap_instr$write_1__VAL_2[24:20] ;
  assign stage2_fbox$req_v1 =
	     NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2548 ?
	       x_out_data_to_stage2_val1__h10894 :
	       x_out_data_to_stage2_fval1__h10896 ;
  assign stage2_fbox$req_v2 = alu_outputs___1_fval2__h11474 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_fval3__h10898 ;
  assign stage2_fbox$EN_server_reset_request_put =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_fbox$EN_server_reset_response_get =
	     CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2634 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = MUX_rg_trap_instr$write_1__VAL_2[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 =
	     !MUX_rg_trap_instr$write_1__VAL_2[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h10894 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h10895 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2618 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageD_f_reset_reqs
  assign stageD_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageD_f_reset_reqs$DEQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageD_f_reset_rsps
  assign stageD_f_reset_rsps$ENQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stageD_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageF_branch_predictor
  assign stageF_branch_predictor$bp_train_cf_info =
	     (stage1_rg_full &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354) ?
	       { CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[151:145] != 7'b1100011 ||
		 IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453,
		 x_out_cf_info_fallthru_PC__h17065,
		 alu_outputs_cf_info_taken_PC__h17058 } :
	       195'h6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign stageF_branch_predictor$bp_train_instr = d_instr__h26151 ;
  assign stageF_branch_predictor$bp_train_is_i32_not_i16 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign stageF_branch_predictor$bp_train_pc = imem_rg_pc ;
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  rg_next_pc or WILL_FIRE_RL_rl_debug_run or csr_regfile$read_dpc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  stageF_branch_predictor$predict_req_pc = 64'h0000000080000000;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  stageF_branch_predictor$predict_req_pc =
	      stageF_branch_predictor$predict_rsp;
      MUX_imem_rg_pc$write_1__SEL_3:
	  stageF_branch_predictor$predict_req_pc = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run:
	  stageF_branch_predictor$predict_req_pc = csr_regfile$read_dpc;
      default: stageF_branch_predictor$predict_req_pc =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign stageF_branch_predictor$predict_rsp_instr = d_instr__h26151 ;
  assign stageF_branch_predictor$predict_rsp_is_i32_not_i16 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign stageF_branch_predictor$EN_reset = 1'b0 ;
  assign stageF_branch_predictor$EN_predict_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign stageF_branch_predictor$EN_bp_train =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 ;

  // submodule stageF_f_reset_reqs
  assign stageF_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageF_f_reset_reqs$DEQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageF_f_reset_rsps
  assign stageF_f_reset_rsps$ENQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stageF_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 =
	     next_pc__h10620 == stage1_rg_stage_input[215:152] ;
  assign IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d2121 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2118 ?
	       { 16'b0,
		 imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ?
		   near_mem$imem_instr[31:16] :
		   imem_rg_cache_b16 } :
	       near_mem$imem_instr ;
  assign IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2377 =
	     !IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 &&
	     stageF_rg_full &&
	     (!near_mem$imem_valid ||
	      NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144) ;
  assign IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 =
	     IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ||
	     !stageF_rg_full ||
	     near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151 ;
  assign IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2632 =
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470 &&
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 &&
	     stage1_rg_stage_input[151:145] != 7'b0010011 &&
	     stage1_rg_stage_input[151:145] != 7'b0110011 &&
	     stage1_rg_stage_input[151:145] != 7'b0011011 &&
	     stage1_rg_stage_input[151:145] != 7'b0111011 &&
	     stage1_rg_stage_input[151:145] != 7'b0110111 &&
	     stage1_rg_stage_input[151:145] != 7'b0010111 &&
	     stage1_rg_stage_input[151:145] != 7'b0000011 &&
	     stage1_rg_stage_input[151:145] != 7'b0100011 &&
	     stage1_rg_stage_input[151:145] != 7'b0101111 &&
	     stage1_rg_stage_input[151:145] != 7'b0000111 &&
	     stage1_rg_stage_input[151:145] != 7'b0100111 ;
  assign IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d363 =
	     x_out_fbypass_rd__h10215 == stage1_rg_stage_input[139:135] ;
  assign IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d364 =
	     x_out_fbypass_rd__h10215 == stage1_rg_stage_input[134:130] ;
  assign IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d367 =
	     x_out_fbypass_rd__h10215 == stage1_rg_stage_input[129:125] ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_865_BITS_ETC___d2918 =
	     csr_regfile$read_csr[63:0] | rs1_val__h36382 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1962 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b001) ?
	       instr__h25576 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b101) ?
		  instr__h25727 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1963 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h25377 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1962 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1964 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b001 &&
	      csr_regfile$read_misa[3]) ?
	       instr__h25212 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1963 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1965 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      csr_regfile$read_misa[5]) ?
	       instr__h24412 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1964 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1966 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h24207 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1965 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1967 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b011) ?
	       instr__h24056 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1966 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1968 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h23857 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1967 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1970 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:76] == 4'b1001 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h23608 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
		 stageD_rg_data[75:71] != 5'd0 &&
		 stageD_rg_data[79:77] == 3'b011) ?
		  instr__h23704 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1968) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1972 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100111 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h23312 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100111 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h23450 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1970) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1974 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h23038 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h23174 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1972) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1976 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b11) ?
	       instr__h22766 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b10) ?
		  instr__h22902 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1974) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1977 =
	     (csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1785 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h22671 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1976 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1978 =
	     (csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1779 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h22552 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1977 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1980 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b01 &&
	      imm6__h20665 != 6'd0) ?
	       instr__h22257 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b100 &&
		 stageD_rg_data[75:74] == 2'b10) ?
		  instr__h22374 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1978) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1981 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b0 &&
	      imm6__h20665 != 6'd0) ?
	       instr__h22068 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1980 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1982 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h20665 != 6'd0) ?
	       instr__h21879 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1981 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1984 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] == 5'd2 &&
	      nzimm10__h21334 != 10'd0) ?
	       instr__h21538 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b0 &&
		 nzimm10__h21549 != 10'd0) ?
		  instr__h21710 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1982) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1986 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h20665 != 6'd0 ||
	      csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      imm6__h20665 == 6'd0) ?
	       instr__h21056 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b001 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h21283 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1984) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1987 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[75:71] != 5'd2 &&
	      imm6__h20665 != 6'd0) ?
	       instr__h20927 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1986 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1989 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h20405 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b010 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h20743 :
		  IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1987) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1990 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h20088 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1989 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1991 =
	     (csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1785 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h20023 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1990 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1992 =
	     (csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1779 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h19907 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1991 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1993 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h19454 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1992 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1994 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h19225 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1993 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1995 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h19030 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1994 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1996 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h18838 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1995 ;
  assign IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d2122 =
	     (imem_rg_pc[1:0] == 2'b0 &&
	      imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h26175 :
	       IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d2121 ;
  assign IF_stage1_rg_full_51_THEN_stage1_rg_stage_inpu_ETC___d2959 =
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     (NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2946 ||
	      !stage1_rg_stage_input[332] &&
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d2954) ;
  assign IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d2819 =
	     (stage1_rg_stage_input[112:110] == 3'd0) ?
	       NOT_stage1_rg_stage_input_52_BITS_144_TO_140_0_ETC___d1200 &&
	       (stage1_rg_stage_input[144:140] != 5'd0 ||
		stage1_rg_stage_input[139:135] != 5'd0 ||
		stage1_rg_stage_input[87:76] == 12'b0 ||
		stage1_rg_stage_input[87:76] == 12'b000000000001 ||
		(rg_cur_priv != 2'b11 ||
		 stage1_rg_stage_input[87:76] != 12'b001100000010) &&
		NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d2813) :
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b010 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b011 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ;
  assign IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d1291 =
	     rs1_val_bypassed__h5451 +
	     SEXT_stage1_rg_stage_input_52_BITS_87_TO_76_078___d1290 ;
  assign IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442 =
	     rs1_val_bypassed__h5451 == rs2_val_bypassed__h5457 ;
  assign IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444 =
	     (rs1_val_bypassed__h5451 ^ 64'h8000000000000000) <
	     (rs2_val_bypassed__h5457 ^ 64'h8000000000000000) ;
  assign IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446 =
	     rs1_val_bypassed__h5451 < rs2_val_bypassed__h5457 ;
  assign IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC__q18 =
	     IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d1291[31:0] ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'd0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 &&
	       stage1_rg_stage_input[112:110] == 3'd0 ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1552 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       alu_outputs___1_val1__h11269 :
	       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1553 =
	     (stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[104:98] == 7'b0000001 ||
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821) ?
	       rs1_val_bypassed__h5451 :
	       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1552 ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1562 =
	     (stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[104:98] == 7'b0000001 ||
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821) ?
	       rs2_val_bypassed__h5457 :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2870 =
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'd0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 ||
	       NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d787 ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'd0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       (stage1_rg_stage_input[151:145] != 7'b1100111 ||
		stage1_rg_stage_input[112:110] != 3'd0) ;
  assign IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'd0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 &&
	       stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d993 ;
  assign IF_stage1_rg_stage_input_52_BITS_335_TO_334_53_ETC___d2554 =
	     { stage1_rg_stage_input[263:232],
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22,
	       data_to_stage2_rd__h10875,
	       data_to_stage2_addr__h10876,
	       x_out_data_to_stage2_val1__h10894,
	       data_to_stage2_val2__h10878,
	       alu_outputs___1_fval1__h12500,
	       alu_outputs___1_fval2__h11474,
	       alu_outputs___1_fval3__h12502,
	       stage1_rg_stage_input[151:145] != 7'b1100011 &&
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 &&
	       stage1_rg_stage_input[151:145] != 7'b0010011 &&
	       stage1_rg_stage_input[151:145] != 7'b0110011 &&
	       stage1_rg_stage_input[151:145] != 7'b0011011 &&
	       stage1_rg_stage_input[151:145] != 7'b0111011 &&
	       stage1_rg_stage_input[151:145] != 7'b0110111 &&
	       stage1_rg_stage_input[151:145] != 7'b0010111 &&
	       stage1_rg_stage_input[151:145] != 7'b0000011 &&
	       stage1_rg_stage_input[151:145] != 7'b0100011 &&
	       stage1_rg_stage_input[151:145] != 7'b0001111 &&
	       stage1_rg_stage_input[151:145] != 7'b1110011 &&
	       stage1_rg_stage_input[151:145] != 7'b0101111 &&
	       (stage1_rg_stage_input[151:145] == 7'b0000111 ||
		stage1_rg_stage_input[151:145] != 7'b0100111 &&
		NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2505),
	       stage1_rg_stage_input[151:145] == 7'b0100111,
	       NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2548,
	       rm__h11057 } ;
  assign IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2336 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2332 ?
	       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	       !IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 &&
	       stageF_rg_full &&
	       (!near_mem$imem_valid ||
		NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144) :
	       stage1_rg_full ;
  assign IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2339 =
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2336 &&
	     stageD_rg_full ||
	     !stageF_rg_full ||
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144 ;
  assign IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2353 =
	     IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2339 ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2347 ||
	     (imem_rg_pc[1:0] == 2'b0 || near_mem$imem_exc ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req ;
  assign IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2677 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2332 ?
	       !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	       IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ||
	       !stageF_rg_full ||
	       near_mem$imem_valid &&
	       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151 :
	       !stage1_rg_full ;
  assign IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 =
	     (IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2677 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151 ;
  assign IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2774 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2332 ?
	       stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	       IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2377 :
	       stage1_rg_full ;
  assign IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d357 =
	     x_out_bypass_rd__h10021 == stage1_rg_stage_input[139:135] ;
  assign IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d359 =
	     x_out_bypass_rd__h10021 == stage1_rg_stage_input[134:130] ;
  assign NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 =
	     cur_verbosity__h3801 > 4'd1 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2323 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 ||
	      !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2371 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2367 ||
	      !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2804 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2426 =
	     csr_regfile$read_csr_minstret != rg_instret_reported ;
  assign NOT_csr_regfile_read_dpc__062_BITS_1_TO_0_063__ETC___d3070 =
	     csr_regfile$read_dpc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h48230 == near_mem$imem_pc ;
  assign NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2505 =
	     NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d878 &&
	     stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d2488 &&
	     (stage1_rg_stage_input[104:98] != 7'h61 ||
	      stage1_rg_stage_input[134:130] != 5'd0) &&
	     (stage1_rg_stage_input[104:98] != 7'h61 ||
	      stage1_rg_stage_input[134:130] != 5'b00001) &&
	     (stage1_rg_stage_input[104:98] != 7'h61 ||
	      stage1_rg_stage_input[134:130] != 5'b00010) &&
	     (stage1_rg_stage_input[104:98] != 7'h61 ||
	      stage1_rg_stage_input[134:130] != 5'b00011) &&
	     stage1_rg_stage_input[104:98] != 7'h71 &&
	     stage1_rg_stage_input[104:98] != 7'h51 &&
	     (stage1_rg_stage_input[104:98] != 7'h60 ||
	      stage1_rg_stage_input[134:130] != 5'b00010) &&
	     (stage1_rg_stage_input[104:98] != 7'h60 ||
	      stage1_rg_stage_input[134:130] != 5'b00011) &&
	     (stage1_rg_stage_input[104:98] != 7'h60 ||
	      stage1_rg_stage_input[134:130] != 5'd0) &&
	     (stage1_rg_stage_input[104:98] != 7'h60 ||
	      stage1_rg_stage_input[134:130] != 5'b00001) &&
	     stage1_rg_stage_input[104:98] != 7'h70 &&
	     stage1_rg_stage_input[104:98] != 7'h50 ;
  assign NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d2548 =
	     NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d878 &&
	     (_0_OR_stage1_rg_stage_input_52_BITS_104_TO_98_5_ETC___d2528 ||
	      stage1_rg_stage_input[104:98] == 7'h61 &&
	      (stage1_rg_stage_input[134:130] == 5'b00010 ||
	       stage1_rg_stage_input[134:130] == 5'b00011) ||
	      stage1_rg_stage_input[104:98] == 7'h71 &&
	      stage1_rg_stage_input[134:130] == 5'd0 &&
	      rm__h11057 == 3'b0 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'b00010 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'b00011 ||
	      stage1_rg_stage_input[104:98] == 7'h79 &&
	      stage1_rg_stage_input[134:130] == 5'd0 &&
	      rm__h11057 == 3'b0) &&
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input[104:98] == 7'h69 &&
	      (stage1_rg_stage_input[134:130] == 5'd0 ||
	       stage1_rg_stage_input[134:130] == 5'b00001 ||
	       stage1_rg_stage_input[134:130] == 5'b00010 ||
	       stage1_rg_stage_input[134:130] == 5'b00011) ||
	      stage1_rg_stage_input[104:98] == 7'h79 ||
	      stage1_rg_stage_input[104:98] == 7'h68 &&
	      (stage1_rg_stage_input[134:130] == 5'd0 ||
	       stage1_rg_stage_input[134:130] == 5'b00001 ||
	       stage1_rg_stage_input[134:130] == 5'b00010 ||
	       stage1_rg_stage_input[134:130] == 5'b00011) ||
	      stage1_rg_stage_input[104:98] == 7'h78) ;
  assign NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d878 =
	     csr_regfile$read_mstatus[14:13] != 2'h0 &&
	     ((stage1_rg_stage_input[112:110] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		stage1_rg_stage_input[112:110] != 3'b101 &&
		stage1_rg_stage_input[112:110] != 3'b110) ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2096 &&
	     near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_098___d2099 &&
	     imem_rg_cache_b16[1:0] == 2'b11 ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2118 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     (imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	      near_mem$imem_instr[17:16] != 2'b11 ||
	      imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2096 &&
	      imem_rg_cache_b16[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2137 =
	     !near_mem$imem_exc &&
	     (imem_rg_pc[1:0] == 2'b0 ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2096 ||
	      !near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_098___d2099 ||
	      imem_rg_cache_b16[1:0] != 2'b11) &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144 =
	     NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2137 &&
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d2141 &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1135 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[104:98] != 7'b0001001) &&
	     stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1134 ;
  assign NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1157 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[104:98] != 7'b0001001) &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1155 ;
  assign NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1232 =
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[21]) &&
	     (rg_cur_priv != 2'b0 || !csr_regfile$read_misa[13]) ||
	     stage1_rg_stage_input[87:76] != 12'b000100000101 ;
  assign NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1677 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[104:98] != 7'b0001001) &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     stage1_rg_stage_input[87:76] == 12'b000000000001 ;
  assign NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d2813 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	      stage1_rg_stage_input[87:76] != 12'b000100000010) &&
	     NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1232 ;
  assign NOT_rg_next_pc_929_BITS_1_TO_0_930_EQ_0b0_931__ETC___d2937 =
	     rg_next_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h45774 == near_mem$imem_pc ;
  assign NOT_rg_run_on_reset_279_280_OR_imem_rg_pc_BITS_ETC___d2287 =
	     !rg_run_on_reset ||
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req ;
  assign NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3162 =
	     set_verbosity_verbosity != cfg_verbosity ;
  assign NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2367 =
	     !stage1_rg_full || stage1_rg_stage_input[332] ||
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802 ;
  assign NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2370 =
	     (NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2367 ||
	      !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2376 =
	     NOT_stage1_rg_full_51_007_OR_stage1_rg_stage_i_ETC___d2370 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2371 ||
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362) ;
  assign NOT_stage1_rg_stage_input_52_BITS_109_TO_105_4_ETC___d580 =
	     (stage1_rg_stage_input[109:105] != 5'b00010 ||
	      stage1_rg_stage_input[134:130] != 5'd0) &&
	     stage1_rg_stage_input[109:105] != 5'b00011 &&
	     stage1_rg_stage_input[109:105] != 5'b0 &&
	     stage1_rg_stage_input[109:105] != 5'b00001 &&
	     stage1_rg_stage_input[109:105] != 5'b01100 &&
	     stage1_rg_stage_input[109:105] != 5'b01000 &&
	     stage1_rg_stage_input[109:105] != 5'b00100 &&
	     stage1_rg_stage_input[109:105] != 5'b10000 &&
	     stage1_rg_stage_input[109:105] != 5'b11000 &&
	     stage1_rg_stage_input[109:105] != 5'b10100 &&
	     stage1_rg_stage_input[109:105] != 5'b11100 ||
	     stage1_rg_stage_input[112:110] != 3'b010 &&
	     stage1_rg_stage_input[112:110] != 3'b011 ;
  assign NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1188 =
	     stage1_rg_stage_input[112:110] != 3'd0 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[263:260] != 4'b0 &&
	     stage1_rg_stage_input[263:260] != 4'b1000 ;
  assign NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1195 =
	     stage1_rg_stage_input[112:110] != 3'b001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[87:76] != 12'b0 ;
  assign NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d500 =
	     (stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[262]) &&
	     (stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[262]) &&
	     CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q11 ;
  assign NOT_stage1_rg_stage_input_52_BITS_144_TO_140_0_ETC___d1200 =
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	     stage1_rg_stage_input[104:98] != 7'b0001001 ;
  assign NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d2829 =
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      stage1_rg_stage_input[104:98] != 7'b0000001) &&
	     NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470 &&
	     (((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		stage1_rg_stage_input[151:145] == 7'b0110011) &&
	       (stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b101)) ?
		stage1_rg_stage_input[263] ||
		stage1_rg_stage_input[261:258] != 4'b0 :
		IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2827) ;
  assign NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470 =
	     stage1_rg_stage_input[151:145] != 7'b0111011 ||
	     stage1_rg_stage_input[104:98] != 7'b0000001 ||
	     stage1_rg_stage_input[112:110] == 3'b001 ||
	     stage1_rg_stage_input[112:110] == 3'b010 ||
	     stage1_rg_stage_input[112:110] == 3'b011 ;
  assign NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d787 =
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      stage1_rg_stage_input[104:98] != 7'b0000001) &&
	     NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470 &&
	     (((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		stage1_rg_stage_input[151:145] == 7'b0110011) &&
	       (stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b101)) ?
		stage1_rg_stage_input[263] ||
		stage1_rg_stage_input[261:258] != 4'b0 :
		IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d785) ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1261 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) &&
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1269 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) &&
	     stage1_rg_stage_input[151:145] == 7'b1100011 ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1274 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) &&
	     (stage1_rg_stage_input[151:145] == 7'b1101111 ||
	      stage1_rg_stage_input[151:145] == 7'b1100111) ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1280 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) &&
	     stage1_rg_stage_input[151:145] == 7'b1101111 ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1331 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1328) ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1692 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     !IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1696 =
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395) &&
	     IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362 =
	     !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3016 =
	     !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000 ||
	     stage1_rg_stage_input[332] ||
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802 ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3030 =
	     (NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362 &&
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373) &&
	     (rg_stop_req || rg_step_count) ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3034 =
	     (NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3030 ||
	      csr_regfile_interrupt_pending_rg_cur_priv_4_31_ETC___d3031) &&
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3016 &&
	     !stage2_rg_full ;
  assign NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3039 =
	     NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3034 &&
	     !stage3_rg_full &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      (stage1_rg_stage_input[332] ||
	       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 &&
	       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802 ||
	       !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354) &&
	      NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362) ;
  assign NOT_stage1_rg_stage_input_52_BITS_99_TO_98_95__ETC___d774 =
	     (stage1_rg_stage_input[99:98] != 2'b0 &&
	      stage1_rg_stage_input[99:98] != 2'b01 ||
	      stage1_rg_stage_input[151:145] != 7'b1000011 &&
	      stage1_rg_stage_input[151:145] != 7'b1000111 &&
	      stage1_rg_stage_input[151:145] != 7'b1001111 &&
	      stage1_rg_stage_input[151:145] != 7'b1001011) &&
	     (stage1_rg_stage_input[151:145] != 7'b1010011 ||
	      stage1_rg_stage_input[104:98] != 7'h0 &&
	      stage1_rg_stage_input[104:98] != 7'h04 &&
	      stage1_rg_stage_input[104:98] != 7'h08 &&
	      stage1_rg_stage_input[104:98] != 7'h0C &&
	      (stage1_rg_stage_input[104:98] != 7'h2C ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h10 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h10 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h10 ||
	       rm__h11057 != 3'b010) &&
	      (stage1_rg_stage_input[104:98] != 7'h14 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h14 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h60 ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h60 ||
	       stage1_rg_stage_input[134:130] != 5'b00001) &&
	      (stage1_rg_stage_input[104:98] != 7'h70 ||
	       stage1_rg_stage_input[134:130] != 5'd0 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h50 ||
	       rm__h11057 != 3'b010) &&
	      (stage1_rg_stage_input[104:98] != 7'h50 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h50 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h70 ||
	       stage1_rg_stage_input[134:130] != 5'd0 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h68 ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h68 ||
	       stage1_rg_stage_input[134:130] != 5'b00001) &&
	      (stage1_rg_stage_input[104:98] != 7'h78 ||
	       stage1_rg_stage_input[134:130] != 5'd0 ||
	       rm__h11057 != 3'b0)) &&
	     (stage1_rg_stage_input[151:145] != 7'b1010011 ||
	      (stage1_rg_stage_input[104:98] != 7'h60 ||
	       stage1_rg_stage_input[134:130] != 5'b00010 &&
	       stage1_rg_stage_input[134:130] != 5'b00011) &&
	      (stage1_rg_stage_input[104:98] != 7'h68 ||
	       stage1_rg_stage_input[134:130] != 5'b00010) &&
	      (stage1_rg_stage_input[104:98] != 7'h68 ||
	       stage1_rg_stage_input[134:130] != 5'b00011)) &&
	     (stage1_rg_stage_input[151:145] != 7'b1010011 ||
	      stage1_rg_stage_input[104:98] != 7'b0000001 &&
	      stage1_rg_stage_input[104:98] != 7'h05 &&
	      stage1_rg_stage_input[104:98] != 7'b0001001 &&
	      stage1_rg_stage_input[104:98] != 7'h0D &&
	      (stage1_rg_stage_input[104:98] != 7'h2D ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h11 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h11 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h11 ||
	       rm__h11057 != 3'b010) &&
	      (stage1_rg_stage_input[104:98] != 7'h15 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h15 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h20 ||
	       stage1_rg_stage_input[134:130] != 5'b00001) &&
	      (stage1_rg_stage_input[104:98] != 7'h21 ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h51 ||
	       rm__h11057 != 3'b010) &&
	      (stage1_rg_stage_input[104:98] != 7'h51 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h51 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h71 ||
	       stage1_rg_stage_input[134:130] != 5'd0 ||
	       rm__h11057 != 3'b001) &&
	      (stage1_rg_stage_input[104:98] != 7'h61 ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h61 ||
	       stage1_rg_stage_input[134:130] != 5'b00001) &&
	      (stage1_rg_stage_input[104:98] != 7'h69 ||
	       stage1_rg_stage_input[134:130] != 5'd0) &&
	      (stage1_rg_stage_input[104:98] != 7'h69 ||
	       stage1_rg_stage_input[134:130] != 5'b00001)) &&
	     (stage1_rg_stage_input[151:145] != 7'b1010011 ||
	      (stage1_rg_stage_input[104:98] != 7'h61 ||
	       stage1_rg_stage_input[134:130] != 5'b00010 &&
	       stage1_rg_stage_input[134:130] != 5'b00011) &&
	      (stage1_rg_stage_input[104:98] != 7'h71 ||
	       stage1_rg_stage_input[134:130] != 5'd0 ||
	       rm__h11057 != 3'b0) &&
	      (stage1_rg_stage_input[104:98] != 7'h69 ||
	       stage1_rg_stage_input[134:130] != 5'b00010) &&
	      (stage1_rg_stage_input[104:98] != 7'h69 ||
	       stage1_rg_stage_input[134:130] != 5'b00011) &&
	      (stage1_rg_stage_input[104:98] != 7'h79 ||
	       stage1_rg_stage_input[134:130] != 5'd0 ||
	       rm__h11057 != 3'b0)) ;
  assign NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1035 =
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     (stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101) ;
  assign NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1050 =
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     (stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b011 ||
	      stage1_rg_stage_input[112:110] == 3'b111) ;
  assign NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1099 =
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1096 ;
  assign NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1160 =
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1157 ;
  assign NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2803 =
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2946 =
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[104:98] != 7'b0001001 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     stage1_rg_stage_input[87:76] == 12'b001100000010 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 =
	     (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305 ||
	      !IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d357) &&
	     (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305 ||
	      !IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d359) &&
	     (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342 ||
	      !IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d363) &&
	     (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342 ||
	      !IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d364) &&
	     (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342 ||
	      !IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d367) ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1250 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1247 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1328 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     (stage1_rg_stage_input[151:145] == 7'b1100011 ||
	      stage1_rg_stage_input[151:145] == 7'b1101111 ||
	      stage1_rg_stage_input[151:145] == 7'b1100111 ||
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       stage1_rg_stage_input[104:98] != 7'b0000001) &&
	      NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470 &&
	      (stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011 ||
	       stage1_rg_stage_input[151:145] == 7'b0011011 ||
	       stage1_rg_stage_input[151:145] == 7'b0111011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110111 ||
	       stage1_rg_stage_input[151:145] == 7'b0010111)) ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1366 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1363 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2728 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     (rg_stop_req || rg_step_count) ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2735 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2728 ||
	     csr_regfile_interrupt_pending_rg_cur_priv_4_31_ETC___d2730 ||
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 &&
	     stage2_rg_full ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2735 ||
	     !stage1_rg_full ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 ||
	     !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	     IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2784 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2787 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2784 &&
	     (rg_stop_req || rg_step_count) ||
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2784 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2792 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2787 ||
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 &&
	     stage2_rg_full ||
	     !stage1_rg_full ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 ||
	     !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	     IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 =
	     !stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305 ||
	     !IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d357 &&
	     !IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d359 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 =
	     !stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342 ||
	     !IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d363 &&
	     !IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d364 &&
	     !IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d367 ;
  assign NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     (stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 &&
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) ;
  assign NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154 =
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_ne_ETC__q3 ;
  assign NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162 =
	     (stage2_rg_stage2[397:395] == 3'd1 ||
	      stage2_rg_stage2[397:395] == 3'd4 ||
	      stage2_rg_stage2[397:395] == 3'd2) &&
	     near_mem$dmem_valid &&
	     near_mem$dmem_exc ;
  assign NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d183 =
	     (stage2_rg_stage2[397:395] != 3'd1 &&
	      stage2_rg_stage2[397:395] != 3'd4 &&
	      stage2_rg_stage2[397:395] != 3'd2 ||
	      !near_mem$dmem_valid ||
	      !near_mem$dmem_exc) &&
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d181 ;
  assign NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d295 =
	     stage2_rg_stage2[397:395] != 3'd2 &&
	     ((stage2_rg_stage2[397:395] == 3'd3) ?
		!stage2_mbox$valid :
		!stage2_rg_stage2[5] && !stage2_fbox$valid) ;
  assign NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d423 =
	     stage2_rg_stage2[397:395] != 3'd2 &&
	     ((stage2_rg_stage2[397:395] == 3'd3) ?
		stage2_mbox$valid :
		!stage2_rg_stage2[5] && stage2_fbox$valid) ;
  assign NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2753 =
	     stageF_branch_predictor$predict_rsp[1:0] != 2'b0 &&
	     near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h33274 == near_mem$imem_pc ;
  assign SEXT_stage1_rg_stage_input_52_BITS_87_TO_76_078___d1290 =
	     { {52{stage1_rg_stage_input_BITS_87_TO_76__q17[11]}},
	       stage1_rg_stage_input_BITS_87_TO_76__q17 } ;
  assign SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1769 =
	     { {9{offset__h19401[11]}}, offset__h19401 } ;
  assign SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794 =
	     { {4{offset__h20032[8]}}, offset__h20032 } ;
  assign _0_OR_stage1_rg_stage_input_52_BITS_104_TO_98_5_ETC___d2528 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d920 ||
	     (stage1_rg_stage_input[104:98] == 7'h60 ||
	      stage1_rg_stage_input[104:98] == 7'h68) &&
	     (stage1_rg_stage_input[134:130] == 5'b00010 ||
	      stage1_rg_stage_input[134:130] == 5'b00011) ||
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d964 ||
	     stage1_rg_stage_input[104:98] == 7'h69 &&
	     stage1_rg_stage_input[134:130] == 5'b00001 ;
  assign _dand1rg_step_count$EN_write =
	     (WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	      WILL_FIRE_RL_rl_finish_FENCE ||
	      WILL_FIRE_RL_rl_finish_FENCE_I ||
	      WILL_FIRE_RL_rl_pipe) &&
	     stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2780 ;
  assign _dand2rg_step_count$EN_write =
	     (WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap) &&
	     stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2776 &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ;
  assign _theResult_____1_fst__h13326 =
	     (stage1_rg_stage_input[112:110] == 3'd0 &&
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[262]) ?
	       rd_val___1__h13322 :
	       _theResult_____1_fst__h13333 ;
  assign _theResult_____1_fst__h13361 =
	     rs1_val_bypassed__h5451 & _theResult___snd_snd__h17492 ;
  assign _theResult____h47206 =
	     (delta_CPI_instrs__h47205 == 64'd0) ?
	       delta_CPI_instrs___1__h47250 :
	       delta_CPI_instrs__h47205 ;
  assign _theResult____h5735 = x_out_data_to_stage1_instr__h18442 ;
  assign _theResult___fst__h13497 =
	     (stage1_rg_stage_input[112:110] == 3'b001 &&
	      !stage1_rg_stage_input[263] &&
	      stage1_rg_stage_input[261:257] == 5'b0 &&
	      !stage1_rg_stage_input[262]) ?
	       rd_val___1__h17552 :
	       _theResult___fst__h13504 ;
  assign _theResult___fst__h13504 =
	     stage1_rg_stage_input[262] ?
	       rd_val___1__h17613 :
	       rd_val___1__h17584 ;
  assign _theResult___fst__h13585 =
	     { {32{rs1_val_bypassed451_BITS_31_TO_0_SRL_rs2_val_b_ETC__q8[31]}},
	       rs1_val_bypassed451_BITS_31_TO_0_SRL_rs2_val_b_ETC__q8 } ;
  assign _theResult___fst_rd_val__h10001 =
	     stage2_rg_stage2[5] ?
	       stage2_rg_stage2[325:262] :
	       stage2_fbox$word_fst ;
  assign _theResult___fst_rd_val__h9987 =
	     (stage2_rg_stage2[394:390] == 5'd0) ?
	       stage2_rg_stage2[325:262] :
	       near_mem$dmem_word64 ;
  assign _theResult___fst_rd_val__h9990 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       _theResult___fst_rd_val__h9987 :
	       stage2_rg_stage2[325:262] ;
  assign _theResult___snd_rd_val__h10188 =
	     stage2_rg_stage2[5] ?
	       data_to_stage3_frd_val__h8984 :
	       stage2_rg_stage2[197:134] ;
  assign _theResult___snd_rd_val__h10191 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       _theResult___snd_rd_val__h10188 :
	       stage2_rg_stage2[197:134] ;
  assign _theResult___snd_rd_val__h10197 =
	     stage2_rg_stage2[5] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[197:134] ;
  assign _theResult___snd_snd__h17492 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       SEXT_stage1_rg_stage_input_52_BITS_87_TO_76_078___d1290 :
	       rs2_val_bypassed__h5457 ;
  assign addr_of_b32___1__h33402 = addr_of_b32__h33274 + 64'd4 ;
  assign addr_of_b32___1__h45902 = addr_of_b32__h45774 + 64'd4 ;
  assign addr_of_b32___1__h48358 = addr_of_b32__h48230 + 64'd4 ;
  assign addr_of_b32__h33274 =
	     { stageF_branch_predictor$predict_rsp[63:2], 2'd0 } ;
  assign addr_of_b32__h45774 = { rg_next_pc[63:2], 2'd0 } ;
  assign addr_of_b32__h48230 = { csr_regfile$read_dpc[63:2], 2'd0 } ;
  assign alu_outputs___1_addr__h11096 =
	     IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 ?
	       branch_target__h11074 :
	       x_out_cf_info_fallthru_PC__h17065 ;
  assign alu_outputs___1_addr__h11470 =
	     rs1_val_bypassed__h5451 +
	     { {52{stage1_rg_stage_input_BITS_75_TO_64__q6[11]}},
	       stage1_rg_stage_input_BITS_75_TO_64__q6 } ;
  assign alu_outputs___1_exc_code__h11752 =
	     (stage1_rg_stage_input[112:110] == 3'd0) ?
	       (stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1096 ?
		  4'd2 :
		  ((stage1_rg_stage_input[144:140] == 5'd0 &&
		    stage1_rg_stage_input[139:135] == 5'd0) ?
		     CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_fval1__h12500 = x_out_data_to_stage2_fval1__h10896 ;
  assign alu_outputs___1_fval2__h11474 =
	     (stage2_rg_full && stage2_rg_stage2[397:395] != 3'd0 &&
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d1586 &&
	      IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d364) ?
	       x_out_fbypass_rd_val__h10216 :
	       rd_val__h10554 ;
  assign alu_outputs___1_fval3__h12502 = x_out_data_to_stage2_fval3__h10898 ;
  assign alu_outputs___1_val1__h11269 =
	     (stage1_rg_stage_input[112:110] == 3'b001) ?
	       rd_val__h17393 :
	       (stage1_rg_stage_input[262] ?
		  rd_val__h17466 :
		  rd_val__h17444) ;
  assign alu_outputs___1_val1__h11314 =
	     (stage1_rg_stage_input[112:110] == 3'd0 &&
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       !stage1_rg_stage_input[262])) ?
	       rd_val___1__h13241 :
	       _theResult_____1_fst__h13326 ;
  assign alu_outputs___1_val1__h11343 =
	     (stage1_rg_stage_input[112:110] == 3'd0) ?
	       rd_val___1__h17521 :
	       _theResult___fst__h13497 ;
  assign alu_outputs___1_val1__h11756 =
	     stage1_rg_stage_input[112] ?
	       { 59'd0, stage1_rg_stage_input[139:135] } :
	       rs1_val_bypassed__h5451 ;
  assign alu_outputs___1_val1__h11784 =
	     { 57'd0, stage1_rg_stage_input[104:98] } ;
  assign alu_outputs_cf_info_taken_PC__h17058 =
	     x_out_cf_info_taken_PC__h17066 ;
  assign branch_target__h11074 =
	     stage1_rg_stage_input[401:338] +
	     { {51{stage1_rg_stage_input_BITS_63_TO_51__q1[12]}},
	       stage1_rg_stage_input_BITS_63_TO_51__q1 } ;
  assign cpi__h47208 = x__h47207 / 64'd10 ;
  assign cpifrac__h47209 = x__h47207 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_request_put__251__ETC___d2263 =
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stageF_f_reset_reqs$FULL_N &&
	     stageD_f_reset_reqs$FULL_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_4_31_ETC___d2730 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_4_31_ETC___d3031 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362 &&
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373) ;
  assign csr_regfile_read_csr_mcycle__3_MINUS_rg_start__ETC___d3044 =
	     delta_CPI_cycles__h47204 * 64'd10 ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2431 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2426 ||
	      stage2_rg_stage2[493:430] != rg_pc_reported) ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2863 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2426 ||
	      rg_trap_info[131:68] != rg_pc_reported) ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2898 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2426 ||
	      rg_csr_pc != rg_pc_reported) ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2426 ||
	      stage1_rg_stage_input[401:338] != rg_pc_reported) ;
  assign csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1779 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1000 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_misa__2_BIT_2_704_AND_stageD__ETC___d1785 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1001 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_mstatus__5_BITS_14_TO_13_7_EQ_ETC___d594 =
	     csr_regfile$read_mstatus[14:13] == 2'h0 ||
	     ((stage1_rg_stage_input[112:110] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110) ;
  assign cur_verbosity__h3801 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign d_instr__h26151 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104 ?
	       instr_out___1__h26153 :
	       IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d2122 ;
  assign data_to_stage2_addr__h10876 = x_out_data_to_stage2_addr__h10893 ;
  assign data_to_stage2_val2__h10878 = x_out_data_to_stage2_val2__h10895 ;
  assign data_to_stage3_frd_val__h8984 =
	     stage2_rg_stage2[5] ?
	       ((stage2_rg_stage2[412:410] == 3'b010) ?
		  { 32'hFFFFFFFF, near_mem$dmem_word64[31:0] } :
		  near_mem$dmem_word64) :
	       stage2_rg_stage2[197:134] ;
  assign decoded_instr_funct10__h31694 =
	     { _theResult____h5735[31:25], _theResult____h5735[14:12] } ;
  assign decoded_instr_imm12_S__h31696 =
	     { _theResult____h5735[31:25], _theResult____h5735[11:7] } ;
  assign decoded_instr_imm13_SB__h31697 =
	     { _theResult____h5735[31],
	       _theResult____h5735[7],
	       _theResult____h5735[30:25],
	       _theResult____h5735[11:8],
	       1'b0 } ;
  assign decoded_instr_imm21_UJ__h31699 =
	     { _theResult____h5735[31],
	       _theResult____h5735[19:12],
	       _theResult____h5735[20],
	       _theResult____h5735[30:21],
	       1'b0 } ;
  assign delta_CPI_cycles__h47204 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h47250 = delta_CPI_instrs__h47205 + 64'd1 ;
  assign delta_CPI_instrs__h47205 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign fall_through_pc__h10619 =
	     stage1_rg_stage_input[401:338] +
	     (stage1_rg_stage_input[333] ? 64'd4 : 64'd2) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d2141 =
	     imem_rg_pc[1:0] == 2'b0 ||
	     (!imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2096 ||
	      imem_rg_cache_b16[1:0] == 2'b11) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 =
	     imem_rg_pc[1:0] == 2'b0 || !near_mem$imem_valid ||
	     near_mem$imem_exc ||
	     !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3058 =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2283 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     f_run_halt_rsps$FULL_N &&
	     f_run_halt_reqs$EMPTY_N ;
  assign imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2096 =
	     imem_rg_pc[63:2] == imem_rg_cache_addr[63:2] ;
  assign imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 =
	     imem_rg_pc[63:2] == near_mem$imem_pc[63:2] ;
  assign imm12__h18694 = { 4'd0, offset__h18566 } ;
  assign imm12__h19031 = { 5'd0, offset__h18973 } ;
  assign imm12__h20667 = { {6{imm6__h20665[5]}}, imm6__h20665 } ;
  assign imm12__h21336 = { {2{nzimm10__h21334[9]}}, nzimm10__h21334 } ;
  assign imm12__h21551 = { 2'd0, nzimm10__h21549 } ;
  assign imm12__h21747 = { 6'b0, imm6__h20665 } ;
  assign imm12__h22084 = { 6'b010000, imm6__h20665 } ;
  assign imm12__h23705 = { 3'd0, offset__h23619 } ;
  assign imm12__h24057 = { 4'd0, offset__h23991 } ;
  assign imm20__h20795 = { {14{imm6__h20665[5]}}, imm6__h20665 } ;
  assign imm6__h20665 = { stageD_rg_data[76], stageD_rg_data[70:66] } ;
  assign instr___1__h18516 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h18693 :
	       IF_csr_regfile_read_misa__2_BIT_2_704_AND_stag_ETC___d1996 ;
  assign instr__h18693 =
	     { imm12__h18694, 8'd18, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h18838 =
	     { 4'd0,
	       stageD_rg_data[72:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd18,
	       offset_BITS_4_TO_0___h18962,
	       7'b0100011 } ;
  assign instr__h19030 =
	     { imm12__h19031, rs1__h19032, 3'b010, rd__h19033, 7'b0000011 } ;
  assign instr__h19225 =
	     { 5'd0,
	       stageD_rg_data[69],
	       stageD_rg_data[76],
	       rd__h19033,
	       rs1__h19032,
	       3'b010,
	       offset_BITS_4_TO_0___h19393,
	       7'b0100011 } ;
  assign instr__h19454 =
	     { SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1769[20],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1769[10:1],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1769[11],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1769[19:12],
	       12'd111 } ;
  assign instr__h19907 = { 12'd0, stageD_rg_data[75:71], 15'd103 } ;
  assign instr__h20023 = { 12'd0, stageD_rg_data[75:71], 15'd231 } ;
  assign instr__h20088 =
	     { SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[12],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[10:5],
	       5'd0,
	       rs1__h19032,
	       3'b0,
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[4:1],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[11],
	       7'b1100011 } ;
  assign instr__h20405 =
	     { SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[12],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[10:5],
	       5'd0,
	       rs1__h19032,
	       3'b001,
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[4:1],
	       SEXT_stageD_rg_data_699_BIT_76_716_CONCAT_stag_ETC___d1794[11],
	       7'b1100011 } ;
  assign instr__h20743 =
	     { imm12__h20667, 8'd0, stageD_rg_data[75:71], 7'b0010011 } ;
  assign instr__h20927 =
	     { imm20__h20795, stageD_rg_data[75:71], 7'b0110111 } ;
  assign instr__h21056 =
	     { imm12__h20667,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h21283 =
	     { imm12__h20667,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0011011 } ;
  assign instr__h21538 =
	     { imm12__h21336,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h21710 = { imm12__h21551, 8'd16, rd__h19033, 7'b0010011 } ;
  assign instr__h21879 =
	     { imm12__h21747,
	       stageD_rg_data[75:71],
	       3'b001,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h22068 =
	     { imm12__h21747, rs1__h19032, 3'b101, rs1__h19032, 7'b0010011 } ;
  assign instr__h22257 =
	     { imm12__h22084, rs1__h19032, 3'b101, rs1__h19032, 7'b0010011 } ;
  assign instr__h22374 =
	     { imm12__h20667, rs1__h19032, 3'b111, rs1__h19032, 7'b0010011 } ;
  assign instr__h22552 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       8'd0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h22671 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h22766 =
	     { 7'b0,
	       rd__h19033,
	       rs1__h19032,
	       3'b111,
	       rs1__h19032,
	       7'b0110011 } ;
  assign instr__h22902 =
	     { 7'b0,
	       rd__h19033,
	       rs1__h19032,
	       3'b110,
	       rs1__h19032,
	       7'b0110011 } ;
  assign instr__h23038 =
	     { 7'b0,
	       rd__h19033,
	       rs1__h19032,
	       3'b100,
	       rs1__h19032,
	       7'b0110011 } ;
  assign instr__h23174 =
	     { 7'b0100000,
	       rd__h19033,
	       rs1__h19032,
	       3'b0,
	       rs1__h19032,
	       7'b0110011 } ;
  assign instr__h23312 =
	     { 7'b0,
	       rd__h19033,
	       rs1__h19032,
	       3'b0,
	       rs1__h19032,
	       7'b0111011 } ;
  assign instr__h23450 =
	     { 7'b0100000,
	       rd__h19033,
	       rs1__h19032,
	       3'b0,
	       rs1__h19032,
	       7'b0111011 } ;
  assign instr__h23608 =
	     { 12'b000000000001,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b1110011 } ;
  assign instr__h23704 =
	     { imm12__h23705, 8'd19, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h23857 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h24332,
	       7'b0100011 } ;
  assign instr__h24056 =
	     { imm12__h24057, rs1__h19032, 3'b011, rd__h19033, 7'b0000011 } ;
  assign instr__h24207 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h19033,
	       rs1__h19032,
	       3'b011,
	       offset_BITS_4_TO_0___h24332,
	       7'b0100011 } ;
  assign instr__h24412 =
	     { imm12__h18694, 8'd18, stageD_rg_data[75:71], 7'b0000111 } ;
  assign instr__h25212 =
	     { imm12__h23705, 8'd19, stageD_rg_data[75:71], 7'b0000111 } ;
  assign instr__h25377 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h24332,
	       7'b0100111 } ;
  assign instr__h25576 =
	     { imm12__h24057, rs1__h19032, 3'b011, rd__h19033, 7'b0000111 } ;
  assign instr__h25727 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h19033,
	       rs1__h19032,
	       3'b011,
	       offset_BITS_4_TO_0___h24332,
	       7'b0100111 } ;
  assign instr_out___1__h26153 =
	     { near_mem$imem_instr[15:0], imem_rg_cache_b16 } ;
  assign instr_out___1__h26175 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2149 =
	     near_mem$imem_exc ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2104 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151 =
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2149 ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2118 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_098___d2099 =
	     near_mem$imem_pc == imem_rg_pc + 64'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d2246 =
	     near_mem$imem_valid && near_mem$imem_exc &&
	     near_mem$imem_exc_code != 4'd0 &&
	     near_mem$imem_exc_code != 4'd1 &&
	     near_mem$imem_exc_code != 4'd2 &&
	     near_mem$imem_exc_code != 4'd3 &&
	     near_mem$imem_exc_code != 4'd4 &&
	     near_mem$imem_exc_code != 4'd5 &&
	     near_mem$imem_exc_code != 4'd6 &&
	     near_mem$imem_exc_code != 4'd7 &&
	     near_mem$imem_exc_code != 4'd8 &&
	     near_mem$imem_exc_code != 4'd9 &&
	     near_mem$imem_exc_code != 4'd11 &&
	     near_mem$imem_exc_code != 4'd12 &&
	     near_mem$imem_exc_code != 4'd13 &&
	     near_mem$imem_exc_code != 4'd15 ;
  assign new_epoch__h27662 = rg_epoch + 2'd1 ;
  assign next_pc___1__h14758 = stage1_rg_stage_input[401:338] + 64'd2 ;
  assign next_pc__h10620 = x_out_next_pc__h10637 ;
  assign next_pc__h11109 =
	     stage1_rg_stage_input[401:338] +
	     { {43{stage1_rg_stage_input_BITS_30_TO_10__q2[20]}},
	       stage1_rg_stage_input_BITS_30_TO_10__q2 } ;
  assign next_pc__h11144 =
	     { IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d1291[63:1],
	       1'd0 } ;
  assign next_pc__h14755 = stage1_rg_stage_input[401:338] + 64'd4 ;
  assign nzimm10__h21334 =
	     { stageD_rg_data[76],
	       stageD_rg_data[68:67],
	       stageD_rg_data[69],
	       stageD_rg_data[66],
	       stageD_rg_data[70],
	       4'b0 } ;
  assign nzimm10__h21549 =
	     { stageD_rg_data[74:71],
	       stageD_rg_data[76:75],
	       stageD_rg_data[69],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h18962 = { stageD_rg_data[75:73], 2'b0 } ;
  assign offset_BITS_4_TO_0___h19393 =
	     { stageD_rg_data[75:74], stageD_rg_data[70], 2'b0 } ;
  assign offset_BITS_4_TO_0___h24332 = { stageD_rg_data[75:74], 3'b0 } ;
  assign offset__h18566 =
	     { stageD_rg_data[67:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:68],
	       2'b0 } ;
  assign offset__h18973 =
	     { stageD_rg_data[69],
	       stageD_rg_data[76:74],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset__h19401 =
	     { stageD_rg_data[76],
	       stageD_rg_data[72],
	       stageD_rg_data[74:73],
	       stageD_rg_data[70],
	       stageD_rg_data[71],
	       stageD_rg_data[66],
	       stageD_rg_data[75],
	       stageD_rg_data[69:67],
	       1'b0 } ;
  assign offset__h20032 =
	     { stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       stageD_rg_data[66],
	       stageD_rg_data[75:74],
	       stageD_rg_data[68:67],
	       1'b0 } ;
  assign offset__h23619 =
	     { stageD_rg_data[68:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       3'b0 } ;
  assign offset__h23991 =
	     { stageD_rg_data[70:69], stageD_rg_data[76:74], 3'b0 } ;
  assign rd__h19033 = { 2'b01, stageD_rg_data[68:66] } ;
  assign rd_val___1__h13241 =
	     rs1_val_bypassed__h5451 + _theResult___snd_snd__h17492 ;
  assign rd_val___1__h13322 =
	     rs1_val_bypassed__h5451 - _theResult___snd_snd__h17492 ;
  assign rd_val___1__h13329 =
	     ((rs1_val_bypassed__h5451 ^ 64'h8000000000000000) <
	      (_theResult___snd_snd__h17492 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h13336 =
	     (rs1_val_bypassed__h5451 < _theResult___snd_snd__h17492) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h13343 =
	     rs1_val_bypassed__h5451 ^ _theResult___snd_snd__h17492 ;
  assign rd_val___1__h13350 =
	     rs1_val_bypassed__h5451 | _theResult___snd_snd__h17492 ;
  assign rd_val___1__h17521 =
	     { {32{IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC__q18[31]}},
	       IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC__q18 } ;
  assign rd_val___1__h17552 = { {32{x__h17555[31]}}, x__h17555 } ;
  assign rd_val___1__h17584 = { {32{x__h17587[31]}}, x__h17587 } ;
  assign rd_val___1__h17613 = { {32{tmp__h17612[31]}}, tmp__h17612 } ;
  assign rd_val___1__h17665 =
	     { {32{rs1_val_bypassed451_BITS_31_TO_0_PLUS_rs2_val__ETC__q9[31]}},
	       rs1_val_bypassed451_BITS_31_TO_0_PLUS_rs2_val__ETC__q9 } ;
  assign rd_val___1__h17713 =
	     { {32{rs1_val_bypassed451_BITS_31_TO_0_MINUS_rs2_val_ETC__q10[31]}},
	       rs1_val_bypassed451_BITS_31_TO_0_MINUS_rs2_val_ETC__q10 } ;
  assign rd_val___1__h17719 = { {32{x__h17722[31]}}, x__h17722 } ;
  assign rd_val___1__h17764 = { {32{x__h17767[31]}}, x__h17767 } ;
  assign rd_val__h10457 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d428) ?
	       stage3_rg_stage3[134:71] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h10490 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d436) ?
	       stage3_rg_stage3[134:71] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h10523 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d428) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h10554 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d436) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h10588 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3[139:135] == stage1_rg_stage_input[129:125]) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs3 ;
  assign rd_val__h11385 = { {32{v32__h11383[31]}}, v32__h11383 } ;
  assign rd_val__h11406 = stage1_rg_stage_input[401:338] + rd_val__h11385 ;
  assign rd_val__h17393 = rs1_val_bypassed__h5451 << shamt__h11256 ;
  assign rd_val__h17444 = rs1_val_bypassed__h5451 >> shamt__h11256 ;
  assign rd_val__h17466 =
	     rs1_val_bypassed__h5451 >> shamt__h11256 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h11256) &
	     {64{rs1_val_bypassed__h5451[63]}} ;
  assign rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1155 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     stage1_rg_stage_input[87:76] == 12'b000100000101 ;
  assign rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1220 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	     stage1_rg_stage_input[87:76] != 12'b000100000010 ;
  assign rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1234 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1232 ;
  assign rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1667 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[87:76] != 12'b0 &&
	     stage1_rg_stage_input[87:76] != 12'b000000000001 ;
  assign rg_state_7_EQ_13_0_AND_csr_regfile_wfi_resume__ETC___d3001 =
	     rg_state == 4'd13 &&
	     (csr_regfile$wfi_resume || rg_stop_req || rg_step_count) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 =
	     rg_state == 4'd4 &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2870 &&
	     !stage3_rg_full &&
	     !stage2_rg_full ;
  assign rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2974 =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1080 ;
  assign rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2978 =
	     rg_state_7_EQ_4_354_AND_IF_stage1_rg_stage_inp_ETC___d2873 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1066 ;
  assign rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2807 =
	     rg_state == 4'd4 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d2803 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2804 &&
	     !stage3_rg_full ;
  assign rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2834 =
	     rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2807 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     (stage1_rg_stage_input[332] ||
	      ((stage1_rg_stage_input[151:145] == 7'b1100011) ?
		 stage1_rg_stage_input[112:110] != 3'd0 &&
		 stage1_rg_stage_input[112:110] != 3'b001 &&
		 stage1_rg_stage_input[112:110] != 3'b100 &&
		 stage1_rg_stage_input[112:110] != 3'b101 &&
		 stage1_rg_stage_input[112:110] != 3'b110 &&
		 stage1_rg_stage_input[112:110] != 3'b111 :
		 stage1_rg_stage_input[151:145] != 7'b1101111 &&
		 ((stage1_rg_stage_input[151:145] == 7'b1100111) ?
		    stage1_rg_stage_input[112:110] != 3'd0 :
		    NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d2829))) ;
  assign rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2960 =
	     rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2807 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 &&
	     IF_stage1_rg_full_51_THEN_stage1_rg_stage_inpu_ETC___d2959 ;
  assign rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d3008 =
	     rg_state_7_EQ_4_354_AND_NOT_stage1_rg_stage_in_ETC___d2834 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign rg_state_7_EQ_4_354_AND_stage3_rg_full_04_OR_s_ETC___d2366 =
	     rg_state == 4'd4 &&
	     (stage3_rg_full || stage2_rg_full || stage1_rg_full ||
	      stageD_rg_full ||
	      stageF_rg_full) &&
	     stage3_rg_full_04_OR_NOT_stage2_rg_full_20_77__ETC___d2365 ;
  assign rg_state_7_EQ_6_005_AND_NOT_stageF_rg_full_126_ETC___d3006 =
	     rg_state == 4'd6 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign rg_state_7_EQ_9_926_AND_NOT_stageF_rg_full_126_ETC___d2927 =
	     rg_state == 4'd9 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151) ;
  assign rm__h11057 =
	     (stage1_rg_stage_input[112:110] == 3'b111) ?
	       csr_regfile$read_frm :
	       stage1_rg_stage_input[112:110] ;
  assign rs1__h19032 = { 2'b01, stageD_rg_data[73:71] } ;
  assign rs1_val__h35457 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 59'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed451_BITS_31_TO_0_MINUS_rs2_val_ETC__q10 =
	     rs1_val_bypassed__h5451[31:0] - rs2_val_bypassed__h5457[31:0] ;
  assign rs1_val_bypassed451_BITS_31_TO_0_PLUS_rs2_val__ETC__q9 =
	     rs1_val_bypassed__h5451[31:0] + rs2_val_bypassed__h5457[31:0] ;
  assign rs1_val_bypassed451_BITS_31_TO_0_SRL_rs2_val_b_ETC__q8 =
	     rs1_val_bypassed__h5451[31:0] >> rs2_val_bypassed__h5457[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val_bypassed__h5457[4:0]) &
	     {32{rs1_val_bypassed451_BITS_31_TO_0__q7[31]}} ;
  assign rs1_val_bypassed451_BITS_31_TO_0__q7 =
	     rs1_val_bypassed__h5451[31:0] ;
  assign rs1_val_bypassed__h5451 =
	     (stage1_rg_stage_input[139:135] == 5'd0) ? 64'd0 : val__h10459 ;
  assign rs2_val_bypassed__h5457 =
	     (stage1_rg_stage_input[134:130] == 5'd0) ? 64'd0 : val__h10492 ;
  assign shamt__h11256 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       stage1_rg_stage_input[81:76] :
	       rs2_val_bypassed__h5457[5:0] ;
  assign stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2776 =
	     stage1_rg_full &&
	     (NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805) ;
  assign stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2780 =
	     stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d2776 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ;
  assign stage1_rg_full_51_AND_NOT_stage1_rg_stage_inpu_ETC___d3022 =
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d3016 &&
	     !stage2_rg_full &&
	     !stage3_rg_full &&
	     (NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362 &&
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373) ;
  assign stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1021 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ;
  assign stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1029 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1026 ;
  assign stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1348 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     (stage1_rg_stage_input[151:145] == 7'b0000011 ||
	      stage1_rg_stage_input[151:145] == 7'b0000111) ;
  assign stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1406 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     stage1_rg_stage_input[151:145] == 7'b0101111 ;
  assign stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1432 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d1429 ;
  assign stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383 =
	     stage1_rg_full &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369) ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d2467 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d896 ||
	     stage1_rg_stage_input[104:98] == 7'h14 && rm__h11057 == 3'b001 ||
	     stage1_rg_stage_input[104:98] == 7'h68 &&
	     stage1_rg_stage_input[134:130] == 5'd0 ||
	     stage1_rg_stage_input[104:98] == 7'h68 &&
	     stage1_rg_stage_input[134:130] == 5'b00001 ||
	     stage1_rg_stage_input[104:98] == 7'h78 &&
	     stage1_rg_stage_input[134:130] == 5'd0 &&
	     rm__h11057 == 3'b0 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d896 =
	     stage1_rg_stage_input[104:98] == 7'h0 ||
	     stage1_rg_stage_input[104:98] == 7'h04 ||
	     stage1_rg_stage_input[104:98] == 7'h08 ||
	     stage1_rg_stage_input[104:98] == 7'h0C ||
	     stage1_rg_stage_input[104:98] == 7'h2C &&
	     stage1_rg_stage_input[134:130] == 5'd0 ||
	     stage1_rg_stage_input[104:98] == 7'h10 && rm__h11057 == 3'b0 ||
	     stage1_rg_stage_input[104:98] == 7'h10 &&
	     (rm__h11057 == 3'b001 || rm__h11057 == 3'b010) ||
	     stage1_rg_stage_input[104:98] == 7'h14 && rm__h11057 == 3'b0 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d905 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d896 ||
	     stage1_rg_stage_input[104:98] == 7'h14 && rm__h11057 == 3'b001 ||
	     stage1_rg_stage_input[104:98] == 7'h60 &&
	     stage1_rg_stage_input[134:130] == 5'd0 ||
	     stage1_rg_stage_input[104:98] == 7'h60 &&
	     stage1_rg_stage_input[134:130] == 5'b00001 ||
	     stage1_rg_stage_input[104:98] == 7'h70 &&
	     stage1_rg_stage_input[134:130] == 5'd0 &&
	     rm__h11057 == 3'b0 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d913 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d905 ||
	     stage1_rg_stage_input[104:98] == 7'h50 &&
	     (rm__h11057 == 3'b010 || rm__h11057 == 3'b001 ||
	      rm__h11057 == 3'b0) ||
	     stage1_rg_stage_input[104:98] == 7'h70 &&
	     stage1_rg_stage_input[134:130] == 5'd0 &&
	     rm__h11057 == 3'b001 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d920 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d913 ||
	     stage1_rg_stage_input[104:98] == 7'h68 &&
	     (stage1_rg_stage_input[134:130] == 5'd0 ||
	      stage1_rg_stage_input[134:130] == 5'b00001) ||
	     stage1_rg_stage_input[104:98] == 7'h78 &&
	     stage1_rg_stage_input[134:130] == 5'd0 &&
	     rm__h11057 == 3'b0 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d947 =
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     stage1_rg_stage_input[104:98] == 7'h05 ||
	     stage1_rg_stage_input[104:98] == 7'b0001001 ||
	     stage1_rg_stage_input[104:98] == 7'h0D ||
	     stage1_rg_stage_input[104:98] == 7'h2D &&
	     stage1_rg_stage_input[134:130] == 5'd0 ||
	     stage1_rg_stage_input[104:98] == 7'h11 && rm__h11057 == 3'b0 ||
	     stage1_rg_stage_input[104:98] == 7'h11 &&
	     (rm__h11057 == 3'b001 || rm__h11057 == 3'b010) ||
	     stage1_rg_stage_input[104:98] == 7'h15 && rm__h11057 == 3'b0 ||
	     stage1_rg_stage_input[104:98] == 7'h15 && rm__h11057 == 3'b001 ||
	     stage1_rg_stage_input[104:98] == 7'h20 &&
	     stage1_rg_stage_input[134:130] == 5'b00001 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d958 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d947 ||
	     stage1_rg_stage_input[104:98] == 7'h21 &&
	     stage1_rg_stage_input[134:130] == 5'd0 ||
	     stage1_rg_stage_input[104:98] == 7'h51 && rm__h11057 == 3'b010 ||
	     stage1_rg_stage_input[104:98] == 7'h51 &&
	     (rm__h11057 == 3'b001 || rm__h11057 == 3'b0) ||
	     stage1_rg_stage_input[104:98] == 7'h71 &&
	     stage1_rg_stage_input[134:130] == 5'd0 &&
	     rm__h11057 == 3'b001 ;
  assign stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d964 =
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d958 ||
	     stage1_rg_stage_input[104:98] == 7'h61 &&
	     (stage1_rg_stage_input[134:130] == 5'd0 ||
	      stage1_rg_stage_input[134:130] == 5'b00001) ||
	     stage1_rg_stage_input[104:98] == 7'h69 &&
	     stage1_rg_stage_input[134:130] == 5'd0 ;
  assign stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1066 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     (stage1_rg_stage_input[263:260] == 4'b0 ||
	      stage1_rg_stage_input[263:260] == 4'b1000) ;
  assign stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1080 =
	     stage1_rg_stage_input[112:110] == 3'b001 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     stage1_rg_stage_input[87:76] == 12'b0 ;
  assign stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d833 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[262]) ||
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[262] ||
	     CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q13 ;
  assign stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1096 =
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ;
  assign stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1134 =
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	     stage1_rg_stage_input[87:76] == 12'b000100000010 ;
  assign stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d1372 =
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821 ||
	     stage1_rg_stage_input[151:145] != 7'b0010011 &&
	     stage1_rg_stage_input[151:145] != 7'b0110011 &&
	     stage1_rg_stage_input[151:145] != 7'b0011011 &&
	     stage1_rg_stage_input[151:145] != 7'b0111011 &&
	     stage1_rg_stage_input[151:145] != 7'b0110111 &&
	     stage1_rg_stage_input[151:145] != 7'b0010111 ;
  assign stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d2954 =
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[104:98] != 7'b0001001) &&
	     stage1_rg_stage_input_52_BITS_144_TO_140_058_E_ETC___d1134 ;
  assign stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821 =
	     stage1_rg_stage_input[151:145] == 7'b0111011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 &&
	     stage1_rg_stage_input[112:110] != 3'b001 &&
	     stage1_rg_stage_input[112:110] != 3'b010 &&
	     stage1_rg_stage_input[112:110] != 3'b011 ;
  assign stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d993 =
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821 ||
	     (((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		stage1_rg_stage_input[151:145] == 7'b0110011) &&
	       (stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b101)) ?
		!stage1_rg_stage_input[263] &&
		stage1_rg_stage_input[261:258] == 4'b0 :
		IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d991) ;
  assign stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d1429 =
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1410 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1381 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1391 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1426 ;
  assign stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d1620 =
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ;
  assign stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2373 =
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     (stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 &&
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) ;
  assign stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2669 =
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1410 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1381 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1391 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1426 ;
  assign stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 =
	     stage1_rg_stage_input[335:334] == rg_epoch ;
  assign stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d2488 =
	     (stage1_rg_stage_input[99:98] == 2'b0 ||
	      stage1_rg_stage_input[99:98] == 2'b01) &&
	     (stage1_rg_stage_input[151:145] == 7'b1000011 ||
	      stage1_rg_stage_input[151:145] == 7'b1000111 ||
	      stage1_rg_stage_input[151:145] == 7'b1001111 ||
	      stage1_rg_stage_input[151:145] == 7'b1001011) ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d2467 ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     stage1_rg_stage_input[104:98] == 7'h68 &&
	     (stage1_rg_stage_input[134:130] == 5'b00010 ||
	      stage1_rg_stage_input[134:130] == 5'b00011) ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d947 ||
	      stage1_rg_stage_input[104:98] == 7'h21 &&
	      stage1_rg_stage_input[134:130] == 5'd0 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'd0 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'b00001) ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input[104:98] == 7'h69 &&
	      (stage1_rg_stage_input[134:130] == 5'b00010 ||
	       stage1_rg_stage_input[134:130] == 5'b00011) ||
	      stage1_rg_stage_input[104:98] == 7'h79 &&
	      stage1_rg_stage_input[134:130] == 5'd0 &&
	      rm__h11057 == 3'b0) ;
  assign stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d980 =
	     (stage1_rg_stage_input[99:98] == 2'b0 ||
	      stage1_rg_stage_input[99:98] == 2'b01) &&
	     (stage1_rg_stage_input[151:145] == 7'b1000011 ||
	      stage1_rg_stage_input[151:145] == 7'b1000111 ||
	      stage1_rg_stage_input[151:145] == 7'b1001111 ||
	      stage1_rg_stage_input[151:145] == 7'b1001011) ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d920 ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input[104:98] == 7'h60 ||
	      stage1_rg_stage_input[104:98] == 7'h68) &&
	     (stage1_rg_stage_input[134:130] == 5'b00010 ||
	      stage1_rg_stage_input[134:130] == 5'b00011) ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input_52_BITS_104_TO_98_59_EQ__ETC___d964 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'b00001) ||
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input[104:98] == 7'h61 &&
	      (stage1_rg_stage_input[134:130] == 5'b00010 ||
	       stage1_rg_stage_input[134:130] == 5'b00011) ||
	      stage1_rg_stage_input[104:98] == 7'h71 &&
	      stage1_rg_stage_input[134:130] == 5'd0 &&
	      rm__h11057 == 3'b0 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'b00010 ||
	      stage1_rg_stage_input[104:98] == 7'h69 &&
	      stage1_rg_stage_input[134:130] == 5'b00011 ||
	      stage1_rg_stage_input[104:98] == 7'h79 &&
	      stage1_rg_stage_input[134:130] == 5'd0 &&
	      rm__h11057 == 3'b0) ;
  assign stage1_rg_stage_input_52_BIT_332_97_OR_NOT_rg__ETC___d1127 =
	     stage1_rg_stage_input[332] ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	     stage1_rg_stage_input[104:98] != 7'b0001001 ;
  assign stage1_rg_stage_input_BITS_30_TO_10__q2 =
	     stage1_rg_stage_input[30:10] ;
  assign stage1_rg_stage_input_BITS_63_TO_51__q1 =
	     stage1_rg_stage_input[63:51] ;
  assign stage1_rg_stage_input_BITS_75_TO_64__q6 =
	     stage1_rg_stage_input[75:64] ;
  assign stage1_rg_stage_input_BITS_87_TO_76__q17 =
	     stage1_rg_stage_input[87:76] ;
  assign stage2_rg_full_20_AND_IF_stage2_rg_stage2_21_B_ETC___d2409 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d181 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1026 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1037 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1035 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1038 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1037 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1040 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1038 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1052 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1050 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1053 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1052 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1055 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1053 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1070 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1066 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1071 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1070 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1073 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1071 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1084 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b0001111 &&
	     stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d1080 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1085 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1084 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1087 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1085 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1101 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1099 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1102 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1101 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1104 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1102 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1116 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[104:98] != 7'b0001001 &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     stage1_rg_stage_input[87:76] == 12'b001100000010 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1117 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1116 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1119 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1117 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1140 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input_52_BIT_332_97_OR_NOT_rg__ETC___d1127) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1110011 &&
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1135 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1141 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1140 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1142 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1141 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1144 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1142 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1162 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input_52_BIT_332_97_OR_NOT_rg__ETC___d1127) &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     NOT_stage1_rg_stage_input_52_BIT_332_97_10_AND_ETC___d1160 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1163 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1162 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1164 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1163 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1166 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1164 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1239 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'd0 ||
	      rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1220) &&
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'd0 ||
	      rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1234) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1240 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[104:98] == 7'b0001001 ||
	      stage1_rg_stage_input[144:140] != 5'd0 ||
	      stage1_rg_stage_input[139:135] != 5'd0 ||
	      rg_cur_priv != 2'b11 ||
	      stage1_rg_stage_input[87:76] != 12'b001100000010) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1239 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1241 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'd0 ||
	      NOT_stage1_rg_stage_input_52_BITS_144_TO_140_0_ETC___d1200) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1240 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1244 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011 &&
	      stage1_rg_stage_input[112:110] != 3'b111) &&
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b0001111 ||
	      NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1188) &&
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b0001111 ||
	      NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1195) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1241 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1245 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      stage1_rg_stage_input[151:145] != 7'b1110011 ||
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1244 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1246 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1245 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1247 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1246 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1309 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d996 ||
	      IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000) &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	     !stage1_rg_stage_input[332] &&
	     stage1_rg_stage_input[151:145] == 7'b1100111 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1363 =
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     (stage1_rg_stage_input[151:145] == 7'b0100011 ||
	      stage1_rg_stage_input[151:145] == 7'b0100111) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1381 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	     stage1_rg_stage_input[151:145] != 7'b0000011 &&
	     stage1_rg_stage_input[151:145] != 7'b0000111 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1391 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	     stage1_rg_stage_input[151:145] != 7'b0100011 &&
	     stage1_rg_stage_input[151:145] != 7'b0100111 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1396 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1391 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 &&
	     (stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[104:98] == 7'b0000001 ||
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1399 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d1372) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1381 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1396 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1410 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 &&
	     stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d1372 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1426 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[151:145] == 7'b1100011 ||
	      stage1_rg_stage_input[151:145] == 7'b1101111 ||
	      stage1_rg_stage_input[151:145] == 7'b1100111 ||
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       stage1_rg_stage_input[104:98] != 7'b0000001) &&
	      NOT_stage1_rg_stage_input_52_BITS_151_TO_145_9_ETC___d470) &&
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input[151:145] != 7'b0101111) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	     stage1_rg_stage_input[332] ||
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d790 &&
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d802 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2316 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 ||
	      !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354) &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) ||
	     !rg_stop_req && !rg_step_count ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2328 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2316 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2323 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 ||
	      !stage2_rg_full) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2332 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2328 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ||
	      NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2342 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2347 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2342 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 ||
	      !stage2_rg_full) &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     !IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2440 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 &&
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2308 &&
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1003) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2440 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 ||
	      !stage2_rg_full) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2447 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2584 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     (stage1_rg_stage_input[151:145] == 7'b0000011 ||
	      stage1_rg_stage_input[151:145] == 7'b0000111 ||
	      stage1_rg_stage_input[151:145] == 7'b0100011 ||
	      stage1_rg_stage_input[151:145] == 7'b0100111 ||
	      stage1_rg_stage_input[151:145] == 7'b0101111) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2618 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     stage1_rg_stage_input[151:145] != 7'b0000011 &&
	     stage1_rg_stage_input[151:145] != 7'b0000111 &&
	     stage1_rg_stage_input[151:145] != 7'b0100011 &&
	     stage1_rg_stage_input[151:145] != 7'b0100111 &&
	     stage1_rg_stage_input[151:145] != 7'b0101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100011 &&
	     stage1_rg_stage_input[151:145] != 7'b1101111 &&
	     stage1_rg_stage_input[151:145] != 7'b1100111 &&
	     (stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[104:98] == 7'b0000001 ||
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2634 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2632 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2648 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1328 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2652 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     (stage1_rg_stage_input[151:145] == 7'b0000011 ||
	      stage1_rg_stage_input[151:145] == 7'b0000111) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2656 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1363 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2657 =
	     (stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 ||
	      stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 ||
	      stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d1372) &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1381 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1396 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2661 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2657 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2665 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1016 &&
	     stage1_rg_stage_input[151:145] == 7'b0101111 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2673 =
	     stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	     IF_NOT_stage1_rg_full_51_007_OR_NOT_stage1_rg__ETC___d2445 &&
	     !IF_IF_stage1_rg_stage_input_52_BITS_151_TO_145_ETC___d1689 ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d361 =
	     stage2_rg_full && stage2_rg_stage2[397:395] != 3'd0 &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d296 &&
	     (IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d357 ||
	      IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d359) ;
  assign stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d369 =
	     stage2_rg_full && stage2_rg_stage2[397:395] != 3'd0 &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d335 &&
	     (IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d363 ||
	      IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d364 ||
	      IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d367) ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158) &&
	     stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2406 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2411 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d190) ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2413 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     stage2_rg_stage2[397:395] != 3'd1 &&
	     stage2_rg_stage2[397:395] != 3'd4 &&
	     stage2_rg_stage2[397:395] != 3'd2 &&
	     stage2_rg_stage2[397:395] != 3'd3 ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2415 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      stage2_rg_stage2[397:395] == 3'd1 ||
	      stage2_rg_stage2[397:395] == 3'd4 ||
	      stage2_rg_stage2[397:395] == 3'd2 ||
	      stage2_rg_stage2[397:395] == 3'd3) ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2417 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q4 ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2419 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q5) ;
  assign stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2433 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325) &&
	     (cur_verbosity__h3801 != 4'd0 ||
	      csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2431) ;
  assign stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 =
	     stage2_rg_stage2[397:395] != 3'd1 &&
	     stage2_rg_stage2[397:395] != 3'd4 &&
	     stage2_rg_stage2[397:395] != 3'd2 ||
	     !near_mem$dmem_valid ||
	     !near_mem$dmem_exc ;
  assign stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d221 =
	     IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	     stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 &&
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q4 ;
  assign stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d250 =
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158) &&
	     stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q5) ;
  assign stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_2_27_ETC___d304 =
	     stage2_rg_stage2[397:395] == 3'd2 ||
	     ((stage2_rg_stage2[397:395] == 3'd3) ?
		stage2_mbox$valid :
		stage2_rg_stage2[5] || stage2_fbox$valid) ;
  assign stage3_rg_full_04_OR_NOT_stage2_rg_full_20_77__ETC___d2365 =
	     (stage3_rg_full || !stage2_rg_full ||
	      stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174) &&
	     (stage3_rg_full || stage2_rg_full || !stage1_rg_full ||
	      NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d2362) ;
  assign stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d428 =
	     stage3_rg_stage3[139:135] == stage1_rg_stage_input[139:135] ;
  assign stage3_rg_stage3_06_BITS_139_TO_135_15_EQ_stag_ETC___d436 =
	     stage3_rg_stage3[139:135] == stage1_rg_stage_input[134:130] ;
  assign stageF_f_reset_rsps_i_notEmpty__273_AND_stageD_ETC___d2293 =
	     stageF_f_reset_rsps$EMPTY_N && stageD_f_reset_rsps$EMPTY_N &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     NOT_rg_run_on_reset_279_280_OR_imem_rg_pc_BITS_ETC___d2287 ;
  assign stageF_rg_full_126_AND_near_mem_imem_valid_AND_ETC___d2158 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151 &&
	     !near_mem$imem_exc ;
  assign sxl__h7703 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign tmp__h17612 =
	     rs1_val_bypassed__h5451[31:0] >> stage1_rg_stage_input[80:76] |
	     ~(32'hFFFFFFFF >> stage1_rg_stage_input[80:76]) &
	     {32{rs1_val_bypassed451_BITS_31_TO_0__q7[31]}} ;
  assign trap_info_tval__h15908 =
	     (stage1_rg_stage_input[151:145] != 7'b1101111 &&
	      stage1_rg_stage_input[151:145] != 7'b1100111 &&
	      (stage1_rg_stage_input[151:145] != 7'b1110011 ||
	       stage1_rg_stage_input[112:110] != 3'd0 ||
	       rg_cur_priv_4_EQ_0b11_090_OR_rg_cur_priv_4_EQ__ETC___d1667)) ?
	       (stage1_rg_stage_input[333] ?
		  { 32'd0, stage1_rg_stage_input[263:232] } :
		  { 48'd0, stage1_rg_stage_input[231:216] }) :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20 ;
  assign uxl__h7704 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h11383 = { stage1_rg_stage_input[50:31], 12'h0 } ;
  assign val__h10459 =
	     (stage2_rg_full &&
	      (stage2_rg_stage2[397:395] == 3'd0 ||
	       IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d424) &&
	      IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d357) ?
	       x_out_bypass_rd_val__h10022 :
	       rd_val__h10457 ;
  assign val__h10492 =
	     (stage2_rg_full &&
	      (stage2_rg_stage2[397:395] == 3'd0 ||
	       IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d424) &&
	      IF_stage2_rg_full_20_THEN_IF_stage2_rg_stage2__ETC___d359) ?
	       x_out_bypass_rd_val__h10022 :
	       rd_val__h10490 ;
  assign value__h15978 =
	     stage1_rg_stage_input[332] ?
	       stage1_rg_stage_input[327:264] :
	       trap_info_tval__h15908 ;
  assign x__h17555 =
	     rs1_val_bypassed__h5451[31:0] << stage1_rg_stage_input[80:76] ;
  assign x__h17587 =
	     rs1_val_bypassed__h5451[31:0] >> stage1_rg_stage_input[80:76] ;
  assign x__h17722 =
	     rs1_val_bypassed__h5451[31:0] << rs2_val_bypassed__h5457[4:0] ;
  assign x__h17767 =
	     rs1_val_bypassed__h5451[31:0] >> rs2_val_bypassed__h5457[4:0] ;
  assign x__h47207 =
	     csr_regfile_read_csr_mcycle__3_MINUS_rg_start__ETC___d3044[63:0] /
	     _theResult____h47206 ;
  assign x_exc_code__h46908 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_cf_info_fallthru_PC__h17065 =
	     stage1_rg_stage_input[333] ?
	       next_pc__h14755 :
	       next_pc___1__h14758 ;
  assign x_out_data_to_stage1_instr__h18442 =
	     stageD_rg_data[165] ? stageD_rg_data[95:64] : instr___1__h18516 ;
  assign x_out_data_to_stage2_fval1__h10896 =
	     (stage2_rg_full && stage2_rg_stage2[397:395] != 3'd0 &&
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d1586 &&
	      IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d363) ?
	       x_out_fbypass_rd_val__h10216 :
	       rd_val__h10523 ;
  assign x_out_data_to_stage2_fval3__h10898 =
	     (stage2_rg_full && stage2_rg_stage2[397:395] != 3'd0 &&
	      IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d1586 &&
	      IF_NOT_stage2_rg_full_20_77_OR_stage2_rg_stage_ETC___d367) ?
	       x_out_fbypass_rd_val__h10216 :
	       rd_val__h10588 ;
  assign x_out_data_to_stage2_rd__h10892 =
	     stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 ?
	       data_to_stage2_rd__h10875 :
	       5'd0 ;
  assign x_out_data_to_stage2_val2__h10895 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       branch_target__h11074 :
	       IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1562 ;
  assign x_out_next_pc__h10637 =
	     IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1000 ?
	       data_to_stage2_addr__h10876 :
	       fall_through_pc__h10619 ;
  assign x_out_trap_info_exc_code__h15913 =
	     stage1_rg_stage_input[332] ?
	       stage1_rg_stage_input[331:328] :
	       alu_outputs_exc_code__h12528 ;
  assign y__h36660 = ~rs1_val__h36382 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4: value__h9415 = stage2_rg_stage2[493:430];
      default: value__h9415 = stage2_rg_stage2[493:430];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4: value__h9629 = stage2_rg_stage2[389:326];
      default: value__h9629 = 64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h9525 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h9525 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h9062 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h9062 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h9058 = stage2_rg_stage2[394:390];
      3'd2: x_out_data_to_stage3_rd__h9058 = 5'd0;
      default: x_out_data_to_stage3_rd__h9058 = stage2_rg_stage2[394:390];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or near_mem$dmem_word64 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h9059 = stage2_rg_stage2[325:262];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h9059 = near_mem$dmem_word64;
      3'd3: x_out_data_to_stage3_rd_val__h9059 = stage2_mbox$word;
      default: x_out_data_to_stage3_rd_val__h9059 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h10021 = stage2_rg_stage2[394:390];
      default: x_out_bypass_rd__h10021 = stage2_rg_stage2[394:390];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4: x_out_fbypass_rd__h10215 = stage2_rg_stage2[394:390];
      default: x_out_fbypass_rd__h10215 = stage2_rg_stage2[394:390];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h36382 = rg_csr_val1;
      default: rs1_val__h36382 = { 59'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or data_to_stage3_frd_val__h8984)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd2, 3'd3:
	  x_out_data_to_stage3_frd_val__h9063 = stage2_rg_stage2[197:134];
      3'd1, 3'd4:
	  x_out_data_to_stage3_frd_val__h9063 = data_to_stage3_frd_val__h8984;
      default: x_out_data_to_stage3_frd_val__h9063 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___fst_rd_val__h10001 or
	  _theResult___fst_rd_val__h9990 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0: x_out_bypass_rd_val__h10022 = stage2_rg_stage2[325:262];
      3'd1, 3'd4:
	  x_out_bypass_rd_val__h10022 = _theResult___fst_rd_val__h9990;
      3'd3: x_out_bypass_rd_val__h10022 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h10022 = _theResult___fst_rd_val__h10001;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_rd_val__h10197 or _theResult___snd_rd_val__h10191)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  x_out_fbypass_rd_val__h10216 = _theResult___snd_rd_val__h10191;
      default: x_out_fbypass_rd_val__h10216 = _theResult___snd_rd_val__h10197;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100111,
      7'b1101111:
	  data_to_stage2_rd__h10875 = stage1_rg_stage_input[144:140];
      7'b1100011: data_to_stage2_rd__h10875 = 5'd0;
      default: data_to_stage2_rd__h10875 = stage1_rg_stage_input[144:140];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 =
	      near_mem$dmem_valid;
      3'd3:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_ne_ETC__q3 =
	      !near_mem$dmem_valid;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_ne_ETC__q3 =
	      !stage2_mbox$valid;
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_ne_ETC__q3 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d181 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d181 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d181 =
		   stage2_rg_stage2[397:395] == 3'd5 && !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d190 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d190 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d190 =
		   stage2_rg_stage2[397:395] != 3'd5 || stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q4 =
	      stage2_rg_stage2[5];
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q4 =
		   stage2_rg_stage2[397:395] != 3'd2 &&
		   stage2_rg_stage2[397:395] != 3'd3 &&
		   stage2_rg_stage2[5];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q5 =
	      !stage2_rg_stage2[5];
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q5 =
		   stage2_rg_stage2[397:395] == 3'd2 ||
		   stage2_rg_stage2[397:395] == 3'd3 ||
		   !stage2_rg_stage2[5];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d277 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[394:390] == 5'd0;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d277 =
		   stage2_rg_stage2[397:395] == 3'd2 ||
		   stage2_rg_stage2[397:395] != 3'd3 && stage2_rg_stage2[5];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d283 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[394:390] != 5'd0;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d283 =
		   stage2_rg_stage2[397:395] != 3'd2 &&
		   (stage2_rg_stage2[397:395] == 3'd3 ||
		    !stage2_rg_stage2[5]);
    endcase
  end
  always@(stage2_rg_stage2 or
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d295 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d296 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[394:390] != 5'd0 &&
	      (!near_mem$dmem_valid || near_mem$dmem_exc);
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d296 =
		   NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d295;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_2_27_ETC___d304 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[394:390] == 5'd0 ||
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305 =
		   stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_2_27_ETC___d304;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d319 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      !stage2_rg_stage2[5];
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d319 =
		   stage2_rg_stage2[397:395] == 3'd2 ||
		   stage2_rg_stage2[397:395] == 3'd3 ||
		   !stage2_rg_stage2[5];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d324 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[5];
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d324 =
		   stage2_rg_stage2[397:395] != 3'd2 &&
		   stage2_rg_stage2[397:395] != 3'd3 &&
		   stage2_rg_stage2[5];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d335 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[5] &&
	      (!near_mem$dmem_valid || near_mem$dmem_exc);
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d335 =
		   stage2_rg_stage2[397:395] != 3'd2 &&
		   stage2_rg_stage2[397:395] != 3'd3 &&
		   stage2_rg_stage2[5] &&
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      !stage2_rg_stage2[5] ||
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342 =
		   stage2_rg_stage2[397:395] == 3'd2 ||
		   stage2_rg_stage2[397:395] == 3'd3 ||
		   !stage2_rg_stage2[5] ||
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d423 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d424 =
	      stage2_rg_stage2[394:390] != 5'd0 && near_mem$dmem_valid &&
	      !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d424 =
		   NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d423;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult___fst__h13585 or
	  rd_val___1__h17665 or
	  rd_val___1__h17719 or rd_val___1__h17764 or rd_val___1__h17713)
  begin
    case (stage1_rg_stage_input[97:88])
      10'b0: alu_outputs___1_val1__h11371 = rd_val___1__h17665;
      10'b0000000001: alu_outputs___1_val1__h11371 = rd_val___1__h17719;
      10'b0000000101: alu_outputs___1_val1__h11371 = rd_val___1__h17764;
      10'b0100000000: alu_outputs___1_val1__h11371 = rd_val___1__h17713;
      default: alu_outputs___1_val1__h11371 = _theResult___fst__h13585;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446 or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442 or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 =
	      !IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442;
      3'b001:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 =
	      IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442;
      3'b100:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 =
	      !IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444;
      3'b101:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 =
	      IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444;
      3'b110:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 =
	      !IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446;
      default: IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d796 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446 or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442 or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 =
	      IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442;
      3'b001:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 =
	      !IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d442;
      3'b100:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 =
	      IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444;
      3'b101:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 =
	      !IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d444;
      3'b110:
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 =
	      IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446;
      default: IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   !IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d446;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q11 =
	      stage1_rg_stage_input[151:145] != 7'b0010011 &&
	      stage1_rg_stage_input[263] &&
	      stage1_rg_stage_input[262] &&
	      stage1_rg_stage_input[261:257] != 5'b0;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q11 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   stage1_rg_stage_input[151:145] != 7'b0010011 &&
		   stage1_rg_stage_input[263] &&
		   stage1_rg_stage_input[262] &&
		   stage1_rg_stage_input[261:257] != 5'b0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  csr_regfile_read_mstatus__5_BITS_14_TO_13_7_EQ_ETC___d594 or
	  NOT_stage1_rg_stage_input_52_BITS_99_TO_98_95__ETC___d774 or
	  csr_regfile$read_mstatus or
	  NOT_stage1_rg_stage_input_52_BITS_109_TO_105_4_ETC___d580)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000111, 7'b0100111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d777 =
	      csr_regfile$read_mstatus[14:13] == 2'h0 ||
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0101111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d777 =
	      NOT_stage1_rg_stage_input_52_BITS_109_TO_105_4_ETC___d580;
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d777 =
		   csr_regfile_read_mstatus__5_BITS_14_TO_13_7_EQ_ETC___d594 ||
		   NOT_stage1_rg_stage_input_52_BITS_99_TO_98_95__ETC___d774;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d777)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
		   stage1_rg_stage_input[151:145] == 7'b0001111 ||
		   stage1_rg_stage_input[151:145] == 7'b1110011 ||
		   IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d777;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 or
	  NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d500)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d785 =
	      NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d500;
      7'b0011011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d785 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      (stage1_rg_stage_input[112:110] != 3'b001 ||
	       stage1_rg_stage_input[263] ||
	       stage1_rg_stage_input[261:257] != 5'b0 ||
	       stage1_rg_stage_input[262]) &&
	      (stage1_rg_stage_input[112:110] != 3'b101 ||
	       stage1_rg_stage_input[263] ||
	       stage1_rg_stage_input[261:257] != 5'b0);
      7'b0111011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d785 =
	      stage1_rg_stage_input[97:88] != 10'b0 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000000 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000001 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000101 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000101;
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d785 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q13 =
	      stage1_rg_stage_input[151:145] == 7'b0010011 ||
	      !stage1_rg_stage_input[263] ||
	      !stage1_rg_stage_input[262] ||
	      stage1_rg_stage_input[261:257] == 5'b0;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q13 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   (stage1_rg_stage_input[151:145] == 7'b0010011 ||
		    !stage1_rg_stage_input[263] ||
		    !stage1_rg_stage_input[262] ||
		    stage1_rg_stage_input[261:257] == 5'b0);
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d878 or
	  stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d980 or
	  csr_regfile$read_mstatus)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000111, 7'b0100111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d983 =
	      csr_regfile$read_mstatus[14:13] != 2'h0 &&
	      (stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b011);
      7'b0101111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d983 =
	      (stage1_rg_stage_input[109:105] == 5'b00010 &&
	       stage1_rg_stage_input[134:130] == 5'd0 ||
	       stage1_rg_stage_input[109:105] == 5'b00011 ||
	       stage1_rg_stage_input[109:105] == 5'b0 ||
	       stage1_rg_stage_input[109:105] == 5'b00001 ||
	       stage1_rg_stage_input[109:105] == 5'b01100 ||
	       stage1_rg_stage_input[109:105] == 5'b01000 ||
	       stage1_rg_stage_input[109:105] == 5'b00100 ||
	       stage1_rg_stage_input[109:105] == 5'b10000 ||
	       stage1_rg_stage_input[109:105] == 5'b11000 ||
	       stage1_rg_stage_input[109:105] == 5'b10100 ||
	       stage1_rg_stage_input[109:105] == 5'b11100) &&
	      (stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b011);
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d983 =
		   NOT_csr_regfile_read_mstatus__5_BITS_14_TO_13__ETC___d878 &&
		   stage1_rg_stage_input_52_BITS_99_TO_98_95_EQ_0_ETC___d980;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d983)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      stage1_rg_stage_input[112:110] == 3'd0 ||
	      stage1_rg_stage_input[112:110] == 3'b100 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      stage1_rg_stage_input[112:110] == 3'd0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
		   stage1_rg_stage_input[151:145] != 7'b0001111 &&
		   stage1_rg_stage_input[151:145] != 7'b1110011 &&
		   IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d983;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 or
	  stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d833)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d991 =
	      stage1_rg_stage_input_52_BITS_112_TO_110_00_EQ_ETC___d833;
      7'b0011011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d991 =
	      stage1_rg_stage_input[112:110] == 3'd0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 &&
	      !stage1_rg_stage_input[263] &&
	      stage1_rg_stage_input[261:257] == 5'b0 &&
	      !stage1_rg_stage_input[262] ||
	      stage1_rg_stage_input[112:110] == 3'b101 &&
	      !stage1_rg_stage_input[263] &&
	      stage1_rg_stage_input[261:257] == 5'b0;
      7'b0111011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d991 =
	      stage1_rg_stage_input[97:88] == 10'b0 ||
	      stage1_rg_stage_input[97:88] == 10'b0100000000 ||
	      stage1_rg_stage_input[97:88] == 10'b0000000001 ||
	      stage1_rg_stage_input[97:88] == 10'b0000000101 ||
	      stage1_rg_stage_input[97:88] == 10'b0100000101;
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d991 =
		   stage1_rg_stage_input[151:145] == 7'b0110111 ||
		   stage1_rg_stage_input[151:145] == 7'b0010111 ||
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd11;
    endcase
  end
  always@(stage1_rg_stage_input or CASE_rg_cur_priv_0b0_8_0b1_9_11__q15)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q15;
      12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 = 4'd3;
      default: CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or alu_outputs___1_exc_code__h11752)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100011:
	  alu_outputs_exc_code__h12528 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h12528 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h12528 = alu_outputs___1_exc_code__h11752;
      default: alu_outputs_exc_code__h12528 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult_____1_fst__h13361 or
	  rd_val___1__h13329 or
	  rd_val___1__h13336 or rd_val___1__h13343 or rd_val___1__h13350)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010: _theResult_____1_fst__h13333 = rd_val___1__h13329;
      3'b011: _theResult_____1_fst__h13333 = rd_val___1__h13336;
      3'b100: _theResult_____1_fst__h13333 = rd_val___1__h13343;
      3'b110: _theResult_____1_fst__h13333 = rd_val___1__h13350;
      default: _theResult_____1_fst__h13333 = _theResult_____1_fst__h13361;
    endcase
  end
  always@(stage1_rg_stage_input or
	  next_pc__h11144 or branch_target__h11074 or next_pc__h11109)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011: x_out_cf_info_taken_PC__h17066 = branch_target__h11074;
      7'b1101111: x_out_cf_info_taken_PC__h17066 = next_pc__h11109;
      default: x_out_cf_info_taken_PC__h17066 = next_pc__h11144;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_addr__h11470 or
	  IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d1291 or
	  rs1_val_bypassed__h5451 or
	  alu_outputs___1_addr__h11096 or next_pc__h11144 or next_pc__h11109)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h10893 =
	      IF_stage1_rg_stage_input_52_BITS_139_TO_135_56_ETC___d1291;
      7'b0100011:
	  x_out_data_to_stage2_addr__h10893 = alu_outputs___1_addr__h11470;
      7'b0101111: x_out_data_to_stage2_addr__h10893 = rs1_val_bypassed__h5451;
      7'b1100011:
	  x_out_data_to_stage2_addr__h10893 = alu_outputs___1_addr__h11096;
      7'b1100111: x_out_data_to_stage2_addr__h10893 = next_pc__h11144;
      7'b1101111: x_out_data_to_stage2_addr__h10893 = next_pc__h11109;
      default: x_out_data_to_stage2_addr__h10893 =
		   alu_outputs___1_addr__h11470;
    endcase
  end
  always@(stage1_rg_stage_input or rs2_val_bypassed__h5457)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0100011, 7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 =
	      rs2_val_bypassed__h5457;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 =
		   rs2_val_bypassed__h5457;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d1586 =
	      stage2_rg_stage2[5] && near_mem$dmem_valid &&
	      !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d1586 =
		   stage2_rg_stage2[397:395] != 3'd2 &&
		   stage2_rg_stage2[397:395] != 3'd3 &&
		   stage2_rg_stage2[5] &&
		   stage2_fbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1677 or
	  data_to_stage2_addr__h10876)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20 =
	      data_to_stage2_addr__h10876;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20 =
		   (stage1_rg_stage_input[151:145] == 7'b1110011 &&
		    stage1_rg_stage_input[112:110] == 3'd0 &&
		    NOT_rg_cur_priv_4_EQ_0b11_090_122_AND_NOT_rg_c_ETC___d1677) ?
		     stage1_rg_stage_input[401:338] :
		     64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2732 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  csr_regfile_read_mstatus__5_BITS_14_TO_13_7_EQ_ETC___d594 or
	  NOT_stage1_rg_stage_input_52_BITS_99_TO_98_95__ETC___d774 or
	  csr_regfile$read_mstatus or
	  NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1195 or
	  NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1188 or
	  NOT_stage1_rg_stage_input_52_BITS_109_TO_105_4_ETC___d580 or
	  IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d2819)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0000111, 7'b0100111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
	      csr_regfile$read_mstatus[14:13] == 2'h0 ||
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0001111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
	      NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1195 &&
	      NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d1188;
      7'b0100011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0101111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
	      NOT_stage1_rg_stage_input_52_BITS_109_TO_105_4_ETC___d580;
      7'b1110011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
	      IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d2819;
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 =
		   csr_regfile_read_mstatus__5_BITS_14_TO_13_7_EQ_ETC___d594 ||
		   NOT_stage1_rg_stage_input_52_BITS_99_TO_98_95__ETC___d774;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823 or
	  NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d500)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2827 =
	      NOT_stage1_rg_stage_input_52_BITS_112_TO_110_0_ETC___d500;
      7'b0011011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2827 =
	      stage1_rg_stage_input[112:110] != 3'd0 &&
	      (stage1_rg_stage_input[112:110] != 3'b001 ||
	       stage1_rg_stage_input[263] ||
	       stage1_rg_stage_input[261:257] != 5'b0 ||
	       stage1_rg_stage_input[262]) &&
	      (stage1_rg_stage_input[112:110] != 3'b101 ||
	       stage1_rg_stage_input[263] ||
	       stage1_rg_stage_input[261:257] != 5'b0);
      7'b0111011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2827 =
	      stage1_rg_stage_input[97:88] != 10'b0 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000000 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000001 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000101 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000101;
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2827 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d2823;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rs1_val_bypassed__h5451 or
	  alu_outputs___1_val1__h11314 or
	  rd_val__h11406 or
	  alu_outputs___1_val1__h11343 or
	  alu_outputs___1_val1__h11784 or
	  rd_val__h11385 or
	  alu_outputs___1_val1__h11371 or alu_outputs___1_val1__h11756)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      alu_outputs___1_val1__h11314;
      7'b0010111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      rd_val__h11406;
      7'b0011011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      alu_outputs___1_val1__h11343;
      7'b0101111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      alu_outputs___1_val1__h11784;
      7'b0110111:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      rd_val__h11385;
      7'b0111011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      alu_outputs___1_val1__h11371;
      7'b1110011:
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
	      alu_outputs___1_val1__h11756;
      default: IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1551 =
		   rs1_val_bypassed__h5451;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1553 or
	  x_out_cf_info_fallthru_PC__h17065)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h10894 =
	      x_out_cf_info_fallthru_PC__h17065;
      default: x_out_data_to_stage2_val1__h10894 =
		   IF_stage1_rg_stage_input_52_BITS_151_TO_145_98_ETC___d1553;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21 = 3'd2;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21 = 3'd4;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21 = 3'd5;
    endcase
  end
  always@(stage1_rg_stage_input or
	  stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821 or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 = 3'd0;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 =
		   (stage1_rg_stage_input[151:145] == 7'b0110011 &&
		    stage1_rg_stage_input[104:98] == 7'b0000001 ||
		    stage1_rg_stage_input_52_BITS_151_TO_145_98_EQ_ETC___d821) ?
		     3'd3 :
		     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q21;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 = 2'd0;
      7'b1100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 = 2'd2;
      7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 = 2'd1;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_instret_reported <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_pc_reported <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_step_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stop_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wfi_counter <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageD_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stageF_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_rg_cache_addr$EN)
	  imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_addr$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_instret_reported$EN)
	  rg_instret_reported <= `BSV_ASSIGNMENT_DELAY
	      rg_instret_reported$D_IN;
	if (rg_pc_reported$EN)
	  rg_pc_reported <= `BSV_ASSIGNMENT_DELAY rg_pc_reported$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_step_count$EN)
	  rg_step_count <= `BSV_ASSIGNMENT_DELAY rg_step_count$D_IN;
	if (rg_stop_req$EN)
	  rg_stop_req <= `BSV_ASSIGNMENT_DELAY rg_stop_req$D_IN;
	if (rg_wfi_counter$EN)
	  rg_wfi_counter <= `BSV_ASSIGNMENT_DELAY rg_wfi_counter$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (stageD_rg_full$EN)
	  stageD_rg_full <= `BSV_ASSIGNMENT_DELAY stageD_rg_full$D_IN;
	if (stageF_rg_epoch$EN)
	  stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY stageF_rg_epoch$D_IN;
	if (stageF_rg_full$EN)
	  stageF_rg_full <= `BSV_ASSIGNMENT_DELAY stageF_rg_full$D_IN;
      end
    if (imem_rg_cache_b16$EN)
      imem_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_b16$D_IN;
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_epoch$EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (stage1_rg_stage_input$EN)
      stage1_rg_stage_input <= `BSV_ASSIGNMENT_DELAY
	  stage1_rg_stage_input$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
    if (stageD_rg_data$EN)
      stageD_rg_data <= `BSV_ASSIGNMENT_DELAY stageD_rg_data$D_IN;
    if (stageF_rg_priv$EN)
      stageF_rg_priv <= `BSV_ASSIGNMENT_DELAY stageF_rg_priv$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_cache_addr = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_cache_b16 = 16'hAAAA;
    imem_rg_f3 = 3'h2;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    imem_rg_tval = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_val1 = 64'hAAAAAAAAAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_epoch = 2'h2;
    rg_instret_reported = 64'hAAAAAAAAAAAAAAAA;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_pc_reported = 64'hAAAAAAAAAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_step_count = 1'h0;
    rg_stop_req = 1'h0;
    rg_trap_info = 132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    rg_wfi_counter = 32'hAAAAAAAA;
    stage1_rg_full = 1'h0;
    stage1_rg_stage_input =
	402'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	496'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 =
	239'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_data =
	234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_full = 1'h0;
    stageF_rg_epoch = 2'h2;
    stageF_rg_full = 1'h0;
    stageF_rg_priv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_verbosity &&
	  NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3162)
	$display("%0d: CPU verbosity change to %0d; logdelay %0d",
		 csr_regfile$read_csr_mcycle,
		 set_verbosity_verbosity,
		 set_verbosity_logdelay);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_verbosity &&
	  NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3162)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus,
		 rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h7703, uxl__h7704);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[140]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("Rd %0d ", stage3_rg_stage3[139:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[140]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("rd_val:%h", stage3_rg_stage3[134:71]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full ||
	   !stage3_rg_stage3[140]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("FRd %0d ", stage3_rg_stage3[139:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full ||
	   !stage3_rg_stage3[140]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("frd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[493:430],
		 stage2_rg_stage2[429:398],
		 stage2_rg_stage2[495:494]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[493:430]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[493:430],
	       stage2_rg_stage2[429:398],
	       stage2_rg_stage2[495:494]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d183)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158) &&
	  stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d190))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  stage2_rg_stage2[397:395] != 3'd1 &&
	  stage2_rg_stage2[397:395] != 3'd4 &&
	  stage2_rg_stage2[397:395] != 3'd2 &&
	  stage2_rg_stage2[397:395] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h9062);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158) &&
	  stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d174 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   stage2_rg_stage2[397:395] == 3'd1 ||
	   stage2_rg_stage2[397:395] == 3'd4 ||
	   stage2_rg_stage2[397:395] == 3'd2 ||
	   stage2_rg_stage2[397:395] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d221)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h9058,
	       x_out_data_to_stage3_frd_val__h9063);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_0_23_ETC___d250)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h9058,
	       x_out_data_to_stage3_rd_val__h9059);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("'h%h", value__h9415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("'h%h", x_out_trap_info_exc_code__h9525);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("'h%h", value__h9629, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("'h%h", value__h9415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("'h%h", x_out_trap_info_exc_code__h9525);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d154)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d158 &&
	  NOT_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ__ETC___d162)
	$write("'h%h", value__h9629, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d176)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[397:395] != 3'd0 &&
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d277))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d283))
	$write("Rd %0d ", x_out_bypass_rd__h10021);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[397:395] != 3'd0 &&
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d277))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d283 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d296)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d283) &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d305))
	$write("rd_val:%h", x_out_bypass_rd_val__h10022);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d319))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d324)
	$write("FRd %0d ", x_out_fbypass_rd__h10215);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d319))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d324 &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d335)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d324 &&
	  IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d342)
	$write("frd_val:%h", x_out_fbypass_rd_val__h10216);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("Output_Stage1",
	       " BUSY pc:%h",
	       stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("Output_Stage1",
	       " NONPIPE: pc:%h",
	       stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1021)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1029)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1040)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1055)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1073)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1087)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1104)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1119)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1144)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1166)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1250)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1261)
	$write("{", "CF_None");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1269)
	$write("{", "BR ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1274)
	$write("{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1261)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1269)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1280)
	$write("JAL [%h->%h/%h]",
	       stage1_rg_stage_input[401:338],
	       x_out_cf_info_taken_PC__h17066,
	       x_out_cf_info_fallthru_PC__h17065);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1309)
	$write("JALR [%h->%h/%h]",
	       stage1_rg_stage_input[401:338],
	       x_out_cf_info_taken_PC__h17066,
	       x_out_cf_info_fallthru_PC__h17065);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1261)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1269)
	if (stage1_rg_stage_input[151:145] != 7'b1100011 ||
	    IF_stage1_rg_stage_input_52_BITS_112_TO_110_00_ETC___d453)
	  $write("taken ");
	else
	  $write("fallthru ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1274)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1261)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1269)
	$write("[%h->%h %h]",
	       stage1_rg_stage_input[401:338],
	       x_out_cf_info_fallthru_PC__h17065,
	       x_out_cf_info_taken_PC__h17066);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1274)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[263:232],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1331)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1348)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d1366)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d388 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d395 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1399)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1406)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_NOT_stage2_rg_full_20_77_ETC___d1432)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h10892);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h10893,
	       x_out_data_to_stage2_val1__h10894,
	       x_out_data_to_stage2_val2__h10895);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h10896,
	       alu_outputs___1_fval2__h11474,
	       x_out_data_to_stage2_fval3__h10898);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d1620)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1026)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1038)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1053)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1071)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1085)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1102)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1117)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1142)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1164)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805 &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d1247)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("'h%h", stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("'h%h", x_out_trap_info_exc_code__h15913);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d805)
	$write("'h%h", value__h15978, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1005)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_51_AND_stage1_rg_stage_input_52_ETC___d383)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1692)
	$write("\n        redirect next_pc:%h", x_out_next_pc__h10637);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_52_BITS_335_TO_334_5_ETC___d1696)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageD: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 stageD_rg_data[233:170],
		 x_out_data_to_stage1_instr__h18442,
		 stageD_rg_data[167:166],
		 stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  stageD_rg_data[165])
	$write("  instr_C:%0h", stageD_rg_data[79:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  !stageD_rg_data[165])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("  instr:%0h  pred_pc:%0h",
	       x_out_data_to_stage1_instr__h18442,
	       stageD_rg_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] != 4'd0 &&
	  stageD_rg_data[163:160] != 4'd1 &&
	  stageD_rg_data[163:160] != 4'd2 &&
	  stageD_rg_data[163:160] != 4'd3 &&
	  stageD_rg_data[163:160] != 4'd4 &&
	  stageD_rg_data[163:160] != 4'd5 &&
	  stageD_rg_data[163:160] != 4'd6 &&
	  stageD_rg_data[163:160] != 4'd7 &&
	  stageD_rg_data[163:160] != 4'd8 &&
	  stageD_rg_data[163:160] != 4'd9 &&
	  stageD_rg_data[163:160] != 4'd11 &&
	  stageD_rg_data[163:160] != 4'd12 &&
	  stageD_rg_data[163:160] != 4'd13 &&
	  stageD_rg_data[163:160] != 4'd15)
	$write("unknown trap Exc_Code %d", stageD_rg_data[163:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write(" tval %0h", stageD_rg_data[159:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageF: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 imem_rg_pc,
		 d_instr__h26151,
		 stageF_rg_priv,
		 stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144))
	$write(" BUSY: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151)
	$write("data_to_StageD {pc:%h  priv:%0d  epoch:%0d",
	       imem_rg_pc,
	       stageF_rg_priv,
	       stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_126_AND_near_mem_imem_valid_AND_ETC___d2158)
	$write("  instr:%h  pred_pc:%h",
	       d_instr__h26151,
	       stageF_branch_predictor$predict_rsp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d2246)
	$write("unknown trap Exc_Code %d", near_mem$imem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_126_AND_near_mem_imem_valid_AND_ETC___d2158)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$display("%0d: CPU: rl_WFI_count: waited so far for %0d clocks",
		 csr_regfile$read_csr_mcycle,
		 rg_wfi_counter);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("    csr_regfile.wfi_resume = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  csr_regfile$wfi_resume)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  !csr_regfile$wfi_resume)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("    stageF.out.ostatus     = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2144))
	$write("OSTATUS_BUSY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2151)
	$write("OSTATUS_PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  !stageF_rg_full)
	$write("OSTATUS_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant)
	$display("CPU: Redundant debugger run request: already running.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_run_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt)
	$display("CPU: Debugger halt request: requested.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %d: Rule rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant)
	$display("CPU: Debugger halt request: but CPU is not currently running.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant)
	$write("CPU: Redundant debugger halt request: state = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd3)
	$write("CPU_DEBUG_MODE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd3 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_halt_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_gpr)
	$display("CPU: Debugger read GPR %0d => 0x%0h",
		 f_gpr_reqs$D_OUT[68:64],
		 gpr_regfile$read_rs1_port2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_read_gpr",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_gpr)
	$display("CPU: Debugger write GPR %0d <= 0x%0h",
		 f_gpr_reqs$D_OUT[68:64],
		 f_gpr_reqs$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_write_gpr",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy)
	$write("CPU: Debugger GPR access busy: state (not CPU_DEBUG_MODE) = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_gpr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_fpr)
	$display("CPU: Debugger read FPR %0d => 0x%0h",
		 f_fpr_reqs$D_OUT[68:64],
		 fpr_regfile$read_rs1_port2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_fpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_fpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_read_fpr",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_fpr)
	$display("CPU: Debugger write FPR %0d => 0x%0h",
		 f_fpr_reqs$D_OUT[68:64],
		 f_fpr_reqs$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_fpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_fpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_write_fpr",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy)
	$write("CPU: Debugger FPR access busy: state (not CPU_DEBUG_MODE) = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_fpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_fpr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_csr)
	$display("CPU: Debugger read CSR 0x%0x => 0x%0h",
		 f_csr_reqs$D_OUT[75:64],
		 csr_regfile$read_csr_port2[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_read_csr",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       csr_regfile$read_dpc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 csr_regfile$read_dpc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run)
	$display("CPU: Debugger run request: running: DPC = 0x%0x",
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_run", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_csr)
	$display("CPU: Debugger write CSR 0x%0h <= 0x%0h.  New csr contents: 0x%0h",
		 f_csr_reqs$D_OUT[75:64],
		 f_csr_reqs$D_OUT[63:0],
		 csr_regfile$mav_csr_write[128:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_write_csr",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy)
	$write("CPU: Debugger CSR access busy: state (not CPU_DEBUG_MODE) = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    %0d: Rule rl_debug_csr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage2_nonpipe -> CPU_TRAP",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2863))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[131:68],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3801 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 rg_trap_info[131:68],
		 rg_trap_info[63:0],
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2898))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h35457,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h35457,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2898))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h36382,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h36382,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_restart_after_csrrx",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3801 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  (cur_verbosity__h3801 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2971))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: CPU.rl_stage1_WFI: stage.out.next_pc 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 x_out_next_pc__h10637);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: CPU: rl_WFI_resume after waiting %0d cycles",
		 csr_regfile$read_csr_mcycle,
		 rg_wfi_counter);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("CPU: BREAK to Debug Mode: PC 0x%08h instr 0x%08h",
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  cur_verbosity__h3801 != 4'd0)
	$display("%m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  cur_verbosity__h3801 != 4'd0)
	$display("%0d: rule rl_trap_BREAK_to_Debug_Mode",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    Flushing caches");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_BREAK_cache_flush_finish) $display("CPU halted");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: rule rl_BREAK_cache_flush_finish",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_Debug_Module)
	$display("%0d: CPU reset from Debug Module",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_Debug_Module)
	$display("    At: %m.rl_reset_from_Debug_Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_stop", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("CPU stop for debugger: minstret %0d priv %0d PC 0x%0h instr 0x%0h",
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("    CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h47208,
		 cpifrac__h47209,
		 delta_CPI_cycles__h47204,
		 _theResult____h47206);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && !rg_stop_req)
	$display("CPU: stop after single-step. PC = 0x%08h",
		 stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop)
	$display("    %0d: %m", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop) $display("    Rule rl_stage1_stop");
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      begin
        v__h2522 = $stime;
	#0;
      end
    v__h2516 = v__h2522 / 32'd10;
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("%0d: ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False",
	       v__h2516);
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 64'h0000000080000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       64'h0000000080000000,
	       new_epoch__h27662,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 64'h0000000080000000,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h27662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[140] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	  stage3_rg_stage3[69])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[139:135],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[140] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	  !stage3_rg_stage3[69])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[139:135],
		 stage3_rg_stage3[134:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2406)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2406)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[493:430],
	       stage2_rg_stage2[429:398],
	       stage2_rg_stage2[495:494]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2406)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_IF_stage2_rg_stage2_21_B_ETC___d2409)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2411)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2413)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h9062);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2415)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2417)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h9058,
	       x_out_data_to_stage3_frd_val__h9063);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2419)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h9058,
	       x_out_data_to_stage3_rd_val__h9059);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2406)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_stage2_rg_stage2_21_BITS_ETC___d2433)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[493:430],
		 stage2_rg_stage2[429:398],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_21_BITS_397_TO_395_22_EQ_1_ETC___d2325 ||
	   !stage2_rg_full) &&
	  stage1_rg_full &&
	  !stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d354 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    rl_pipe: Discarding stage1 due to redirection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[263:232],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2648)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2652)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2656)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2661)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2665)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2441 &&
	  stage1_rg_full &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2329 &&
	  stage1_rg_stage_input_52_BITS_335_TO_334_53_EQ_ETC___d2669)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h10892);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h10893,
	       x_out_data_to_stage2_val1__h10894,
	       x_out_data_to_stage2_val2__h10895);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h10896,
	       alu_outputs___1_fval2__h11474,
	       x_out_data_to_stage2_fval3__h10898);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_20_AND_NOT_stage2_rg_stage2_21__ETC___d2644)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2677 &&
	  stageD_rg_full &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    CPU_Stage1.enq: 0x%08h", stageD_rg_data[233:170]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    CPU_StageD.enq (Data_StageF_to_StageD)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       stageF_branch_predictor$predict_rsp,
	       stageF_rg_epoch,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_20_AND_NOT_stage2_rg_stage2__ETC___d2718 &&
	  NOT_stage2_rg_full_20_77_OR_stage2_rg_stage2_2_ETC___d2739 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Flute  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2022 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
  end
  // synopsys translate_on
endmodule  // mkCPU

