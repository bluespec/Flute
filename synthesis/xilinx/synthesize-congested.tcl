#*****************************************************************************************
# Vivado (TM) v2019.1 (64-bit)
#
# wrapper.tcl: Tcl script for re-creating project 'CPU_wrapper'
#
# Generated by Vivado on Fri Sep 18 11:46:11 EDT 2020
# IP Build 2548770 on Fri May 24 18:01:18 MDT 2019
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "Vivado_wrapper"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

# Set a default part number
# Arty-A7
set xil_part_num "xc7a100tcsg324-1"
# VCU118
# set xil_part_num "xcvu9p-flga2104-2L-e"
# Zed Board
#set xil_part_num "xc7z020-clg484-1"
#
variable script_file
set script_file "Vivado_wrapper.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Runs synthesis and implementation upto routing. Does not create bitstream\n"
  puts "This run is for characterizing the RTL in terms of resources and timing.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--top_level <module-name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--top_level <name>\] Name of tht top-level module being synthesized.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--top_level"    { incr i; set top_level [lindex $::argv $i] }
      "--device"       { incr i; set xil_part_num [lindex $::argv $i] }
      "--jobs"         { incr i; set num_jobs [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part ${xil_part_num}

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Read in the sources -- common to all builds
source ${origin_dir}/../sources.tcl

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "wrap" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "${origin_dir}/${_xil_proj_name_}.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/${_xil_proj_name_}.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "wrap" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
set obj [get_runs synth_1]
set_property strategy Flow_AlternateRoutability $obj
set_property flow "Vivado Synthesis 2019" $obj
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj

# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create new implementation runs and set property for existing runs
set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
set_property flow "Vivado Implementation 2019" [get_runs impl_1]

launch_runs impl_1 -to_step route_design -jobs ${num_jobs}
wait_on_run impl_1

set implementations {impl_1}
# Analyse the design for each implementation
foreach impl $implementations {
   file mkdir ${origin_dir}/$impl

   open_run ${impl} -name ${impl}
   report_utilization -hierarchical -file ${origin_dir}/${impl}/${_xil_proj_name_}.utilization.rpt
   report_timing_summary -file ${origin_dir}/${impl}/${_xil_proj_name_}.timing.rpt

   # Report all failing paths
   set paths [ get_timing_paths -slack_lesser_than 0 -unique_pins -max_paths 100000 -delay_type max ]
   report_timing -of_objects $paths -file ${origin_dir}/${impl}/${_xil_proj_name_}.all-paths.rpt

   # Report logic level distribution
   report_design_analysis -logic_level_distribution -logic_level_dist_paths 10000 -file ${origin_dir}/${impl}/${_xil_proj_name_}.ll.rpt

   # Report details of worst-path
   report_design_analysis -timing -file ${origin_dir}/${impl}/${_xil_proj_name_}.worst.rpt
}
